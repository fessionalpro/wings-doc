import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as d,b as e,e as t,d as n,w as c,f as l}from"./app-C4PFB2tF.js";const p={},h=l('<h1 id="b6-frequently-asked-questions" tabindex="-1"><a class="header-anchor" href="#b6-frequently-asked-questions"><span>B6.Frequently Asked Questions</span></a></h1><h2 id="_01-how-to-debug-eg-parsing" tabindex="-1"><a class="header-anchor" href="#_01-how-to-debug-eg-parsing"><span>01.How to Debug, eg. Parsing</span></a></h2><p>Debugging is mainly focused on Parse and RnaEngine execution, so logger only exists in these 2 places. In the testing of the Meepo project itself, the slf4j logger is at trace level, so when debugging in other projects, you need to set the level of <code>pro.fessional.mepo</code> to <code>trace</code>.</p><p>If the debug logs are not detailed enough, you can extend Parser, and then call the protected method.</p><p>If you get an error like &#39;Class path contains multiple SLF4J bindings&#39;, you can directly exclude the slf4j dependency from Meepo.</p><h2 id="_02-performance-and-thread-safety" tabindex="-1"><a class="header-anchor" href="#_02-performance-and-thread-safety"><span>02.Performance and Thread Safety</span></a></h2><p>The template engines are all parsed once, used many times, with some pre-compilation or caching.</p><p>When Meepo parsing, the Parse itself is based on string analysis and only uses the RegExp in directive&#39;s <code>find</code>. It is usually recommended that the parsing process needs to be done within a single thread and multiple parsing or competition is not necessary.</p><p>When merging, if there is no <code>Rng</code> level directive, it just does a static string concat, concat first, then cache. During the concating, just pre-allocate enough buffs to avoid expansion. Performance is better than multiple times of string appends.</p><p>Without <code>Rng</code> in directive, it is thread-safe and very few fragments, so it can be used safely. but when <code>Rng</code> is present, the performance and thread safety depend on the execution engine and the context.</p><p>Meepo&#39;s performance is much better than <code>Freemarker</code> according to benchmark results (for+if+function).</p><table><thead><tr><th style="text-align:left;">Benchmark</th><th style="text-align:left;">Mode</th><th style="text-align:left;">Cnt</th><th style="text-align:right;">Score</th><th style="text-align:right;">Error</th><th style="text-align:left;">Units</th></tr></thead><tbody><tr><td style="text-align:left;">Meepo.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">24177.507 ±</td><td style="text-align:right;">493.546</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Freemarker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18152.915 ±</td><td style="text-align:right;">928.830</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Mustache.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">22565.064 ±</td><td style="text-align:right;">154.915</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Pebble.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">34311.017 ±</td><td style="text-align:right;">248.283</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Rocker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">37499.123 ±</td><td style="text-align:right;">1275.888</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Thymeleaf.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">5406.186 ±</td><td style="text-align:right;">177.424</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Trimou.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">19718.903 ±</td><td style="text-align:right;">669.759</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Velocity.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18956.594 ±</td><td style="text-align:right;">766.578</td><td style="text-align:left;">ops/s</td></tr></tbody></table><h2 id="_03-how-to-tune-performance" tabindex="-1"><a class="header-anchor" href="#_03-how-to-tune-performance"><span>03.How to Tune Performance</span></a></h2>',13),m={href:"https://github.com/async-profiler/async-profiler",target:"_blank",rel:"noopener noreferrer"},g=l(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn clean
mvn <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>false <span class="token builtin class-name">test</span>
mvn dependency:copy-dependencies <span class="token parameter variable">-DincludeScope</span><span class="token operator">=</span>runtime <span class="token parameter variable">-DoutputDirectory</span><span class="token operator">=</span>target/lib

<span class="token comment"># Start a long loop, or you can run it directly in the IDE</span>
<span class="token function">java</span> <span class="token parameter variable">-cp</span> target/classes:target/test-classes<span class="token punctuation">\\</span>
:target/lib/slf4j-api-1.7.30.jar<span class="token punctuation">\\</span>
:target/lib/annotations-19.0.0.jar <span class="token punctuation">\\</span>
pro.fessional.meepo.benchmark.MeepoAsyncProfile

<span class="token comment"># get the pid</span>
jps
<span class="token comment"># use async-profiler to generate flame graph in svg</span>
<span class="token comment">#/Users/trydofor/Applications-cli/async-profiler-1.8.2/profiler.sh</span>
profiler.sh <span class="token parameter variable">-d</span> <span class="token number">30</span> <span class="token parameter variable">-f</span> meepo-profile.svg <span class="token variable">$pid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are a lot of details related to performance, for the template engine, mainly focusing on string/char handling.</p><ul><li>zero-copy, Use <code>char[]</code> instead of a full string copy.</li><li>For array assignment, use System.arraycopy</li><li>hashCode() and equals(), short-circuit in if</li><li>toString() of primitive type</li><li>Avoid expanding buffers, try to reuse them thread-safe</li></ul><h2 id="_04-meepo-syntax-can-not-lexer" tabindex="-1"><a class="header-anchor" href="#_04-meepo-syntax-can-not-lexer"><span>04.Meepo Syntax can Not Lexer</span></a></h2><p>In general, grammar parsing consists of two steps: lexical and grammatical analysis.</p><ul><li>First, perform lexical analysis to convert text into tokens</li><li>Then, perform grammatical analysis to combine tokens into statements and AST</li></ul><p>Meepo uses a hard-coded finite-state way to handle the dynamic MEEPO head/tail and BKB block.</p><h2 id="_05-how-to-remember-meepo-syntax" tabindex="-1"><a class="header-anchor" href="#_05-how-to-remember-meepo-syntax"><span>05.How to Remember Meepo Syntax</span></a></h2><p>The syntax of Meepo is very simple, it is all about <code>dota</code>, <code>vi</code> and COVID-19 in 2020.</p><ul><li>DNA, static replacement, is designed to translate templates</li><li>RNA, dynamic execution, support <code>for</code> and <code>if</code>, and <code>engine</code> extensions</li><li>The directive syntax is similar to<code>s/find/replace/g</code> in <code>vi</code></li><li>Meepo says case-sensitive, but in fact its directive is case-insensitve</li></ul><h2 id="_06-how-to-input-empty-and-quotes" tabindex="-1"><a class="header-anchor" href="#_06-how-to-input-empty-and-quotes"><span>06.How to Input Empty and Quotes</span></a></h2><p>There is special handling for quotes and blanks in the directive,</p><ul><li>Two double quotes <code>&quot;&quot;</code>, is the empty string</li><li>And quotes must escape, eg. <code>\\&quot;</code></li></ul><h2 id="_07-zebra-stripes-like-other-templates" tabindex="-1"><a class="header-anchor" href="#_07-zebra-stripes-like-other-templates"><span>07.Zebra Stripes Like Other Templates</span></a></h2><p>Meepo&#39;s starting point is that the template is only responsible for display, not for calculation, and the logical result should be predefined in the model. Therefore, creating a zebra style cell background in Meepo is complex, but can be achieved as follows,</p>`,15),u=e("li",null,"Create styles data in the model directly",-1),f=e("li",null,"Customize engine to compute the style",-1),y=e("code",null,"USE",-1),b={href:"https://github.com/trydofor/professional-meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i1.htm",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"WHEN",-1),_={href:"https://github.com/trydofor/professional-meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i2.htm",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"_08-literal-number-and-boolean",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_08-literal-number-and-boolean"},[e("span",null,"08.Literal Number and Boolean")])],-1),k=e("p",null,"In the engine, DNA is all static string replacement and RNA is all fetching data from context. Only the pipeline function chain needs data from the template and data lieral type.",-1),w=e("li",null,"Boolean - TRUE,FALSE, see above",-1),q=e("li",null,[t("The string type requires quotes, eg. "),e("code",null,'"TRUE"'),t(","),e("code",null,'"3.14"')],-1),T=e("li",null,[t("Otherwise, they are all "),e("code",null,"RefStr"),t(". get value from the environment first, or this string if null")],-1);function S(M,P){const a=s("ExternalLinkIcon"),o=s("RouteLink");return r(),d("div",null,[h,e("p",null,[t("Run MeepoAsyncProfile by main, then use "),e("a",m,[t("async-profiler"),n(a)])]),g,e("ul",null,[u,f,e("li",null,[t("By "),y,t(" it._count|mod, eg. "),e("a",b,[t("each-c7s1f7-i1.htm"),n(a)])]),e("li",null,[t("By "),x,t(" it._count|mod, eg. "),e("a",_,[t("each-c7s1f7-i2.htm"),n(a)])])]),v,k,e("ul",null,[e("li",null,[t("Number - see "),n(o,{to:"/b-meepo/b4.engine.html#pipelined-functions-chained-processing"},{default:c(()=>[t("Pipelined Functions")]),_:1})]),w,q,T])])}const A=i(p,[["render",S],["__file","b6.question.html.vue"]]),D=JSON.parse('{"path":"/b-meepo/b6.question.html","title":"B6.Frequently Asked Questions","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"palette","category":["Meepo","Template"],"description":"B6.Frequently Asked Questions 01.How to Debug, eg. Parsing Debugging is mainly focused on Parse and RnaEngine execution, so logger only exists in these 2 places. In the testing ...","GIT_REPO_HEAD":"2024-05-04 5f8d5046d9ba71ea39889145bdfcb0cec1b14a03","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/b-meepo/b6.question.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/b-meepo/b6.question.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"B6.Frequently Asked Questions"}],["meta",{"property":"og:description","content":"B6.Frequently Asked Questions 01.How to Debug, eg. Parsing Debugging is mainly focused on Parse and RnaEngine execution, so logger only exists in these 2 places. In the testing ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-11T04:24:49.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2023-12-11T04:24:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"B6.Frequently Asked Questions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-11T04:24:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"01.How to Debug, eg. Parsing","slug":"_01-how-to-debug-eg-parsing","link":"#_01-how-to-debug-eg-parsing","children":[]},{"level":2,"title":"02.Performance and Thread Safety","slug":"_02-performance-and-thread-safety","link":"#_02-performance-and-thread-safety","children":[]},{"level":2,"title":"03.How to Tune Performance","slug":"_03-how-to-tune-performance","link":"#_03-how-to-tune-performance","children":[]},{"level":2,"title":"04.Meepo Syntax can Not Lexer","slug":"_04-meepo-syntax-can-not-lexer","link":"#_04-meepo-syntax-can-not-lexer","children":[]},{"level":2,"title":"05.How to Remember Meepo Syntax","slug":"_05-how-to-remember-meepo-syntax","link":"#_05-how-to-remember-meepo-syntax","children":[]},{"level":2,"title":"06.How to Input Empty and Quotes","slug":"_06-how-to-input-empty-and-quotes","link":"#_06-how-to-input-empty-and-quotes","children":[]},{"level":2,"title":"07.Zebra Stripes Like Other Templates","slug":"_07-zebra-stripes-like-other-templates","link":"#_07-zebra-stripes-like-other-templates","children":[]},{"level":2,"title":"08.Literal Number and Boolean","slug":"_08-literal-number-and-boolean","link":"#_08-literal-number-and-boolean","children":[]}],"git":{"createdTime":1680228107000,"updatedTime":1702268689000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":4}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"b-meepo/b6.question.md","localizedDate":"March 31, 2023","autoDesc":true}');export{A as comp,D as data};
