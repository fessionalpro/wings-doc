import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,g as l,o as e}from"./app-BkDpWcXQ.js";const n={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="_0b-resthalf规范" tabindex="-1"><a class="header-anchor" href="#_0b-resthalf规范"><span>0B.RestHalf规范</span></a></h1><p>场景化业务的URL命名规范，参考了RESTFul和GraphQL，适用于无法资源化的业务，故取名叫<code>RestHalf</code>。</p><h2 id="_0b-1-业务场景化" tabindex="-1"><a class="header-anchor" href="#_0b-1-业务场景化"><span>0B.1.业务场景化</span></a></h2><p>在<code>RestHalf</code>实践中，业务的复杂性主要来自于 ①业务自身在演化 ②人员认知在涌现。</p><ul><li>做着做着，东西就变了，从轮子做到了自行车，这是演化</li><li>写着写着，思路清晰了，从摸象到最后摸全了，这是涌现</li></ul><p>在技术领域，没有银弹。wings实践注重场景化，任一方案都必须在具体场景中讨论。</p><ul><li>RESTFul的不够用在于其简单，而资源仅是业务的参与者之一</li><li>GraphQL的不好用在于其万能，问题尚未分解，只是多一种QL</li></ul><p>对于复杂的东西，唯有分解，对于变化的东西，唯有适应。 所谓场景化，就是把变化切片，固定上下文和寻找确定性，通常从以下方面入手。</p><ul><li>资源 - 数据流，任何资源都有唯一id，即便是从属关系</li><li>事件 - 业务流，事件触发数据的产生，变化和消失</li><li>功能 - 场景框，输入了什么，输出了什么，限定了界限</li></ul><p>场景化应遵循以下原则，以便容易跟上变化，容易分解和理解。</p><ul><li>能简单，就不要复杂。不要创造概念，持续奥卡姆&quot;剃头&quot;</li><li>能强关联，就不要弱关联。多路径时使用关键/强路径</li><li>能明示，就不要暗示。限定边界/输入/输出/异常</li></ul><h2 id="_0b-2-请求能post-就别get" tabindex="-1"><a class="header-anchor" href="#_0b-2-请求能post-就别get"><span>0B.2.请求能POST，就别GET</span></a></h2><p>除了资源类型，及特定场景用GET外，全部使用POST</p><ul><li>无POST环境的，如邮件中的下载 <code>/label/res-id-{tk}.pdf</code></li><li>约定重定向的，如SSO/OAuth登录，需要多次302</li><li>静态资源，如图片，样式等。</li></ul><p>此外，因GET请求全部信息都在URL中（cookie外），可被历史及缓存， 所以，任何敏感的请求，都必须有token防护，如次数，期限，权限等。</p><p>抽象化及资源化，容易有歧义，且与场景化原则略有冲突，因此建议全POST。</p><h2 id="_0b-3-传参能head-body-就别path-query" tabindex="-1"><a class="header-anchor" href="#_0b-3-传参能head-body-就别path-query"><span>0B.3.传参能Head/Body，就别path/query</span></a></h2><p>考虑到网关/切面处理，排错分析等，保持path及query参数简洁。</p><ul><li>path参数，最好没有或只有1个，超过1个时，需要考虑必要性</li><li>query string，应仅限功能参数，如分页及简单搜索</li><li>业务参数，应封装在Http body中，如Json</li><li>会话参数，应封装在Http Header中，如Token</li></ul><p>一个参数的Post请求，推荐直接传递。server端常见类型举例，</p><ul><li>Boolean:boolean - <code>true</code></li><li>Long/Integer:number/string - <code>123</code> / <code>&quot;123&quot;</code></li><li>BigDecimal/Double/Float:string - <code>&quot;3.14159&quot;</code></li><li>String:string - <code>&quot;string&quot;</code></li><li>LocalDateTime:string - <code>&quot;2023-04-05 06:07:08&quot;</code></li><li>ZonedDateTime:string - <code>&quot;2023-04-05 06:07:08 Asia/Shanghai&quot;</code></li><li>OffsetDateTime:string - <code>&quot;2023-04-05 06:07:08 +08:00&quot;</code></li><li>LogLevel.TRACE:string - <code>&quot;TRACE&quot;</code></li></ul><p>其中的boolean和number，输入时可接受字符串形式（带双引号）</p><ul><li>bool 布尔 - 输入 <code>&quot;true&quot;</code>/<code>true</code>, 输出 <code>true</code></li><li>number 整型 - 输入 <code>&quot;123&quot;</code>/<code>123</code>, 输出 <code>123</code>/<code>&quot;123&quot;</code> (溢出)</li><li>number 浮点型 - 输入 <code>&quot;3.14&quot;</code>/<code>3.14</code>, 输出 <code>&quot;3.14&quot;</code> (精度)</li></ul><p>client端的常见类型举例，</p><ul><li>JSON.stringify(&quot;string&quot;) - <code>&quot;string&quot;</code></li><li>JSON.stringify(123) - <code>123</code></li><li>JSON.stringify(true) - <code>true</code></li><li>JSON.stringify({str:&quot;string&quot;,dec:123,bol:true}) - <code>{&quot;str&quot;:&quot;string&quot;,&quot;dec&quot;:123,&quot;bol&quot;:true}</code></li></ul><h2 id="_0b-4-网址要明确身份-有前缀和后缀" tabindex="-1"><a class="header-anchor" href="#_0b-4-网址要明确身份-有前缀和后缀"><span>0B.4.网址要明确身份，有前缀和后缀</span></a></h2><p>场景化中，每个URL都是具体的角色，有其家族和职业。</p><ul><li>前缀如，业务类别<code>admin</code>，版本号<code>v1</code>等</li><li>后缀如，应答内容扩展名<code>.pdf</code></li><li>从后往前做时，建议与项目分包一致</li><li>从前往后做时，建议与页面功能一致</li></ul><h2 id="_0b-5-请求数据叫body-应答数据叫data" tabindex="-1"><a class="header-anchor" href="#_0b-5-请求数据叫body-应答数据叫data"><span>0B.5.请求数据叫Body，应答数据叫Data</span></a></h2><p>考虑到类型自动合并，在ts中，使用interface而不是type定义数据类型。 为了标识为网络请求和应答，采用<code>Api</code>前置和<code>Body</code>和<code>Data</code>后缀，</p><ul><li>Request - interface ApiXxxBody</li><li>Response - interface ApiXxxData</li></ul><p>在Response时，业务Data由三个层级的状态表示，</p><ul><li>网络层的status - 网络请求是否成功</li><li>业务层的errors - 是否因error终止（一定没有data）</li><li>业务层的success - 业务结果是否成功（可能存在data）</li></ul><p>在网络层，以下http状态外，视为Error，由errorHandler统一处理，</p><ul><li>200 - 网络请求成功</li><li>301,302 - 自动跟随</li></ul><p>业务层的结果，为便于说明，约定以下数据结构表示，</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> I18nMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  message</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认多国语信息或模板</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  i18nCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 多国语模板代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  i18nArgs</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//多国语模板参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> I18nNotice</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> I18nMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 消息类型, &#39;Validation&#39;, &#39;IllegalArgument&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  target</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输入项名字, &#39;city&#39;, &#39;tab1.zipcode&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ActionResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  success</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 是否成功，默认false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  code</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 给调用者的业务码或错误码，空时应该设置null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ErrorResult</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ActionResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">I18nMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  errors</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> I18nNotice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//  导致业务失败的错误，空时应该设置null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ActionResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">I18nMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  data</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 给调用者的业务数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ErrorResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiResultError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> falseResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> errorResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ErrorResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // constructor(result: ApiResult) ....</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里用ApiResult表示应答数据，根据是否存在<code>errors</code>分为两种，</p><ul><li><code>ErrorResult</code> 有 <code>errors</code> - 服务异常终止，未完成。 <ul><li><code>success</code> - 必须为 <code>false</code></li><li>若有 <code>message</code> - 应该是第一个错误的 <code>message</code></li><li>若有 <code>code</code> - 错误代码，用来明确详细错误。</li></ul></li><li><code>DataResult</code> 没有 <code>errors</code> - 服务正常结束，已完成。 <ul><li><code>success</code> - 可以是 <code>true</code> 或 <code>false</code></li><li>若有 <code>message</code> - 为使用者提供更多信息。</li><li>若有 <code>code</code> - 业务代码，用来明确详细数据。</li><li>若有 <code>data</code> - 业务数据，不过<code>success</code>与否。</li></ul></li></ul><p>当简单<code>message</code>或<code>code</code>不能满足复杂业务时，应该在<code>data</code>中包含他们，比如，</p><ul><li>多条业务消息，需要分步，或非常规处理</li><li>多个业务代码，需要执行不同的业务逻辑</li></ul><p>综合以上，在前端处理应答的流程应该为，</p><ul><li>统一的fetchApi，拦截response，解析ApiResult并处理 <ul><li>当存在<code>errors</code>时，throw <code>ApiResultError(errorResult)</code></li><li>当<code>success=false</code>时，throw <code>ApiResultError(falseResult)</code></li><li>当存在<code>message</code>时，默认emit全局的i18n消息</li><li>存在<code>options</code>，可<strong>事前</strong>处理以上行为</li></ul></li><li>统一的errorHandler，在<strong>事后</strong>处理<code>ApiResultError</code></li><li>正常的业务代码，<code>try fetchApi(body,opts)</code></li><li>一定是<code>success=true</code>，进行<code>data</code>正常的业务逻辑</li><li>若自行处理<code>ApiResultError</code>，若catch, 不能处理的throw</li><li>中断业务逻辑，可以throw error，交给 errorHandler 统一处理</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> dataResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetchLoginApi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">loginBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 正常的业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 抛给全局errorHandler处理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiResultError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">errorResult</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理 errors</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理 success=false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const r=s(n,[["render",t],["__file","0b-rest-half.html.vue"]]),d=JSON.parse('{"path":"/zh/0-wings/0b-rest-half.html","title":"0B.RestHalf规范","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"brush","category":["神翼","规范"],"description":"0B.RestHalf规范 场景化业务的URL命名规范，参考了RESTFul和GraphQL，适用于无法资源化的业务，故取名叫RestHalf。 0B.1.业务场景化 在RestHalf实践中，业务的复杂性主要来自于 ①业务自身在演化 ②人员认知在涌现。 做着做着，东西就变了，从轮子做到了自行车，这是演化 写着写着，思路清晰了，从摸象到最后摸全了，这是...","GIT_REPO_HEAD":"2025-03-19 e70b762ba982770a7e8c5503035bb9caa61ba629","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/0-wings/0b-rest-half.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/0-wings/0b-rest-half.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"0B.RestHalf规范"}],["meta",{"property":"og:description","content":"0B.RestHalf规范 场景化业务的URL命名规范，参考了RESTFul和GraphQL，适用于无法资源化的业务，故取名叫RestHalf。 0B.1.业务场景化 在RestHalf实践中，业务的复杂性主要来自于 ①业务自身在演化 ②人员认知在涌现。 做着做着，东西就变了，从轮子做到了自行车，这是演化 写着写着，思路清晰了，从摸象到最后摸全了，这是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-03T05:37:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-03T05:37:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0B.RestHalf规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-03T05:37:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"git":{"createdTime":1655901635000,"updatedTime":1738561041000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":13,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":5.35,"words":1605},"filePathRelative":"zh/0-wings/0b-rest-half.md","localizedDate":"2022年6月22日","autoDesc":true}');export{r as comp,d as data};
