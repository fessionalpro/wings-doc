import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as n,c as s,b as e,e as i,d as r,f as l}from"./app-b67efd75.js";const c={},d=l(`<h1 id="_4c-customize-security" tabindex="-1"><a class="header-anchor" href="#_4c-customize-security" aria-hidden="true">#</a> 4C.Customize Security</h1><p>All Wings projects, features can be customized by configuring <code>*.properties</code> and declaring <code>@Bean</code>. However, there may be complex dependencies between features that require users to take care of, even to read the code.</p><h2 id="_4c-1-customize-login" tabindex="-1"><a class="header-anchor" href="#_4c-1-customize-login" aria-hidden="true">#</a> 4C.1.Customize Login</h2><p>The difference between the login page <code>login-page*</code> (with <code>page</code>) and the processing interface <code>*login*</code>, is as follows</p><ul><li>login-page - the login page displayed to the user, typically an automatic 302 redirect at 401</li><li>login - for the processing or callback interface after submitting credentials, executed by filter</li></ul><p>The default login page and returned results provided by Warlock can be modified in the following 4 ways</p><ul><li>expose ComboWingsAuthPageHandler.Combo to add processing details</li><li>expose WingsAuthPageHandler to replace the processing details</li><li>expose wings.warlock.security.login-page to redirect to a custom page</li><li>expose AuthenticationSuccessHandler, AuthenticationFailureHandler to handle login events</li><li>expose LogoutSuccessHandler to handle logout events</li></ul><p>In the default implementation, the sessionId is placed in the cookie and header when login, and the session is deleted when logout.</p><p>Note that the http protocol has case issues with header and cookies, so all lowercase is recommended.</p><ul><li>header RFC2616 <em>not</em> case-sensitive, some agents or tools will automatically convert to all-lowercase</li><li>cookie RFC2019 case sensitive, generally preserved as it is</li><li>Known header is automatically lowercase by default swagger-ui and webpack-dev-server (node http)</li></ul><p>NonceLoginSuccessHandler with NonceTokenSessionHelper implements the function of oauth one-time token for session. So if you need this feature, you must implement your own AuthenticationSuccessHandler to inherit NonceLoginSuccessHandler.</p><p>Oauth can redirect customization by host and state parameters, see AuthStateBuilder for details.</p><ul><li>Redirects - 302, starting with <code>http</code> or <code>/</code></li><li>Write-back - non-empty content, write back directly to response</li><li>For security reasons, the above must be preset in the configuration, see <code>wings.warlock.just-auth.safe-*</code></li></ul><p>Note that <code>safe-host</code> has restrictions on the following features.</p><ul><li>check the <code>{host}</code> of redirect-uri if request with host parameter, and construct uri if it passes</li><li>When redirect in state starts with http, check for host, and if it not pass, write back directly instead of redirecting.</li></ul><h2 id="_4c-2-customize-authz" tabindex="-1"><a class="header-anchor" href="#_4c-2-customize-authz" aria-hidden="true">#</a> 4C.2.Customize Authz</h2><ul><li>expose ComboWingsAuthDetailsSource.Combo to add processing details</li><li>expose WingsAuthDetailsSource to replace the processing details</li><li>expose ComboWingsUserDetailsService.Combo to add loading details</li><li>expose WingsUserDetailsService to replace the user loading</li></ul><h2 id="_4c-3-customize-authn" tabindex="-1"><a class="header-anchor" href="#_4c-3-customize-authn" aria-hidden="true">#</a> 4C.3.Customize Authn</h2><p>In addition to the default implementation of the User, Role, and Perm system, Warlock supports the following fine-grained customization of users and permissions</p><ul><li>NonceUserDetailsCombo - one-time login</li><li>MemoryUserDetailsCombo - Mount users and perm by uid, login name, login method</li><li>NonceTokenSessionHelper - out of oauth2 process, get SessionId by one-time state</li></ul><h2 id="_4c-4-verify-perm-at-login" tabindex="-1"><a class="header-anchor" href="#_4c-4-verify-perm-at-login" aria-hidden="true">#</a> 4C.4.Verify Perm at Login</h2><p>Wings users and permissions are managed in a single database. If different apps need different permissions, For example, in admin page, you must have ROLE_ADMIN to access, otherwise after successful login, all features are 403, which is not friendly.</p><p>So when logging in, use authType prefix, you can directly check ROLE_ADMIN permissions, if not, the login will fail.</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">wings.warlock.security.zone-perm.admin</span><span class="token punctuation">=</span><span class="token value attr-value">ROLE_ADMIN</span>
<span class="token comment">## Support \`authType\` and \`authZone\`, via param or path (PathPattern)</span>
<span class="token key attr-name">wings.warlock.security.login-proc-url</span><span class="token punctuation">=</span><span class="token value attr-value">/auth/{authType}-{authZone}/login.json</span>
<span class="token comment">## Better compatibility, supports both authType and authZone via path</span>
<span class="token comment">#/auth/{authType:[^-]+}{splitter:-?}{authZone:[^-]*}/login.json</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following URLs can all pass authZone, QueryString is recommended, and PathVariable is used when QueryString NOT supported.</p><ul><li>QueryString - /auth/username/login.json?authZone=admin</li><li>PathVariable - /auth/username-admin/login.json</li></ul><p>In addition, it is also possible to use authedPerm to authenticate permissions after a successful login, which also has automatic logout functionality, with the difference that</p><ul><li>authZone returns as login failure, no session is written, it is a general login action, i.e. loading information and verification.</li><li>authedPerm first login successfully, writes session, and then logout if there is no permission, which is two actions of login + logout.</li></ul><h2 id="_4c-5-authn-by-appname" tabindex="-1"><a class="header-anchor" href="#_4c-5-authn-by-appname" aria-hidden="true">#</a> 4C.5.Authn by AppName</h2><p>This feature is not implemented by default, and the following basic principles must be followed when enabling it to prevent misuse.</p><ul><li>Security viewpoint, the authorization should not be expanded, and should be minimized.</li><li>Usage viewpoint, the data structure of the permission should be simple, each app should be independent, mixed use leads to complex.</li></ul>`,31),u={href:"http://spring.application.name",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"_4c-6-authn-by-ip",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4c-6-authn-by-ip","aria-hidden":"true"},"#"),i(" 4C.6.Authn by Ip")],-1),p=e("p",null,"Login or perms can be controlled via remote ip. However, dynamic ip, such as proxies and mobile networks should be considered.",-1);function m(g,f){const t=o("ExternalLinkIcon");return n(),s("div",null,[d,e("p",null,[i("ComboWarlockAuthzService.Combo should be customized to adjust permissions according to "),e("a",u,[i("spring.application.name"),r(t)]),i(".")]),h,p])}const w=a(c,[["render",m],["__file","4c-security.html.vue"]]);export{w as default};
