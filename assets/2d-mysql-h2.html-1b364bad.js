import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,b as n,e as s,d as e,f as c}from"./app-bf064653.js";const p={},r=n("h1",{id:"_2d-mysql-compatible-database",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2d-mysql-compatible-database","aria-hidden":"true"},"#"),s(" 2D.Mysql-Compatible Database")],-1),d=n("p",null,"MySql serial refers to mysql and its branches (Percona, MariaDB) or a protocol compatible database, wings use mysql8 (5.7 has been fully tested).",-1),u={href:"https://dev.mysql.com/doc/refman/8.0/en/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"_2d-1-mysql-in-docker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2d-1-mysql-in-docker","aria-hidden":"true"},"#"),s(" 2D.1.Mysql in Docker")],-1),m={href:"https://dev.mysql.com/doc/refman/8.0/en/fulltext-boolean.html",target:"_blank",rel:"noopener noreferrer"},v=c(`<p>The following configuration is suitable for mysql5.7, mysql8, native, cloud,</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">tee</span> /data/docker/mysql/conf/moilioncircle.cnf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
[mysqld]
max_allowed_packet          = 16777216
max_connections             = 1024
group_concat_max_len        = 16777216
## table store lowercase compare case-sensitive
lower_case_table_names      = 1
## FULLTEXT indexes by MeCab parser and ngram parser
innodb_ft_min_token_size    = 2
ft_min_word_len             = 2
ngram_token_size            = 2
## default charset and timezone
character_set_server        = utf8mb4
default-time-zone           = +00:00
## binary log
log_bin_trust_function_creators = 1
binlog-format               = MIXED
## local
innodb_file_per_table       = 1
innodb_strict_mode          = 0
#skip_grant_tables
EOF</span>

<span class="token comment"># start docker</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
 <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class="token operator">=</span>yes <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> /data/docker/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> /data/docker/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
mysql:8.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create high privilege users with the following sql. It is recommended to use wings-mysql-user.sh to manage users with different privileges</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;moilioncircle&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>  <span class="token keyword">TO</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- usually syntax</span>
<span class="token comment">-- GRANT ALL  ON \`%\`.*  TO &#39;trydofor&#39;@&#39;%&#39;; -- when above error</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- DROP USER &#39;trydofor&#39;@&#39;%&#39;;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Wings isolates databases for project and requires the following named databases,</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- DROP DATABASE IF EXISTS wings;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> wings <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4<span class="token punctuation">;</span>

<span class="token comment">-- wings /* auto codegen */</span>
<span class="token comment">-- wings_shard_0 /* sharding test */</span>
<span class="token comment">-- wings_shard_1 /* sharding test */</span>
<span class="token comment">-- wings_faceless /* faceless */</span>
<span class="token comment">-- wings_warlock /* warlock */</span>
<span class="token comment">-- wings_example /* winx example */</span>
<span class="token comment">-- wings_tiny /* winx tiny component */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2d-2-high-quality-sql" tabindex="-1"><a class="header-anchor" href="#_2d-2-high-quality-sql" aria-hidden="true">#</a> 2D.2.High Quality SQL</h2><p>In wings, the database is only used to persist data, and should avoid using function and business logic in DB/SQL.</p><ul><li>Must know the indexing of where condition</li><li>Change field comparison to fixed value comparison after equation transformation</li><li>Avoid complex SQL and encourage single table query.</li><li>When paging, set the paged data first, then select the related data directly.</li><li>Avoid circular and N+1 queries</li></ul><h2 id="_2d-2-mysql-unusual-usage" tabindex="-1"><a class="header-anchor" href="#_2d-2-mysql-unusual-usage" aria-hidden="true">#</a> 2D.2.MySql Unusual Usage</h2><p>Not recommended, but sometimes works great.</p><h3 id="_01-find-in-set" tabindex="-1"><a class="header-anchor" href="#_01-find-in-set" aria-hidden="true">#</a> 01.FIND_IN_SET</h3><p>FIND_IN_SET(str,strlist), more precise find than like and match, strlist is comma separated, no comma in str. Returns the coordinates of 1-base in strlist. 0 means not found or strlist is empty. NULL if str or strlist is NULL.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a,b,c,d&#39;</span><span class="token punctuation">)</span>
<span class="token comment">-- 2, most scenarios as where condition, as follows</span>
<span class="token keyword">WHERE</span> FIND_IN_SET<span class="token punctuation">(</span>role<span class="token punctuation">,</span> role_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_02-group-concat" tabindex="-1"><a class="header-anchor" href="#_02-group-concat" aria-hidden="true">#</a> 02.GROUP_CONCAT</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span>expr <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {unsigned_integer <span class="token operator">|</span> col_name <span class="token operator">|</span> expr}
        <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>col_name <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SEPARATOR str_val<span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> 
    GROUP_CONCAT<span class="token punctuation">(</span>CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span> contactLastName<span class="token punctuation">,</span> contactFirstName<span class="token punctuation">)</span>
        SEPARATOR <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03-match-against" tabindex="-1"><a class="header-anchor" href="#_03-match-against" aria-hidden="true">#</a> 03.MATCH AGAINST</h3><p>Need to build full text index. Note: for the Chinese chars, it better to use plug-ins or seg word in java.</p><h3 id="_04-replace-ignore" tabindex="-1"><a class="header-anchor" href="#_04-replace-ignore" aria-hidden="true">#</a> 04.REPLACE IGNORE</h3><p><code>replace into</code> and <code>insert ignore</code></p><h3 id="_05-caution-with-json-type" tabindex="-1"><a class="header-anchor" href="#_05-caution-with-json-type" aria-hidden="true">#</a> 05.Caution with Json Type</h3><p>Starting with 5.7.8, MySQL supports a native JSON data type defined by RFC 7159</p><p>The new operators <code>-&gt;</code> and <code>-&gt;&gt;</code> may be incompatible with the lexical analysis framework, so they are more appropriately handled in java.</p><h3 id="_06-explain-and-benchmark" tabindex="-1"><a class="header-anchor" href="#_06-explain-and-benchmark" aria-hidden="true">#</a> 06.Explain and BENCHMARK</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Repeated execution of a single express, note that select can only return unique values</span>
<span class="token keyword">SELECT</span> BENCHMARK<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>author_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> git_log_jetplus
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- Show Index Usage</span>
<span class="token keyword">explain</span> 
    <span class="token keyword">SELECT</span> author_name <span class="token keyword">FROM</span> git_log_jetplus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-limit-and-found-rows" tabindex="-1"><a class="header-anchor" href="#_07-limit-and-found-rows" aria-hidden="true">#</a> 07.Limit and FOUND_ROWS()</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- add SQL_CALC_FOUND_ROWS option first</span>
<span class="token keyword">SELECT</span> SQL_CALC_FOUND_ROWS <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl_name <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- then fetch</span>
<span class="token keyword">SELECT</span> FOUND_ROWS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08-auto-increment-and-last-insert-id" tabindex="-1"><a class="header-anchor" href="#_08-auto-increment-and-last-insert-id" aria-hidden="true">#</a> 08.AUTO_INCREMENT and LAST_INSERT_ID()</h3><p>Avoid using auto-incrementing primary keys in projects. and use the method in title for special cases. Note that when multiple values are inserted, only the first one is returned.</p><h3 id="_09-concat-and-concat-ws" tabindex="-1"><a class="header-anchor" href="#_09-concat-and-concat-ws" aria-hidden="true">#</a> 09.CONCAT and CONCAT_WS</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Note the handling of null</span>
<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;My&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;QL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- NULL, returns NULL if any argument is NULL.</span>
<span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;First name&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;Last Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;First name,Last Name&#39;, skip any NULL values</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-convert-tz" tabindex="-1"><a class="header-anchor" href="#_10-convert-tz" aria-hidden="true">#</a> 10.CONVERT_TZ</h3><p>A conversion operation should be performed on writes, and this method should be used on temporary reads. Note that leap seconds <code>:59:60</code> or <code>:59:61</code> are returned as <code>:59:59</code>.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>  CONVERT_TZ<span class="token punctuation">(</span><span class="token string">&#39;2007-03-11 2:00:00&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;America/New_york&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Asia/Shanghai&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> time_cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_11-format-and-date-format" tabindex="-1"><a class="header-anchor" href="#_11-format-and-date-format" aria-hidden="true">#</a> 11.FORMAT and DATE_FORMAT</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- &#39;#,###,###.##&#39;</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.123456</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;12,332.1235&#39;</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;12,332.1000&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-global-get-lock" tabindex="-1"><a class="header-anchor" href="#_12-global-get-lock" aria-hidden="true">#</a> 12.Global GET_LOCK</h3><p>This function can do global pessimistic locking across jvm.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- A statement that gets a lock without blocking</span>
<span class="token keyword">SELECT</span> <span class="token keyword">IF</span><span class="token punctuation">(</span>IS_FREE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> GET_LOCK<span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- detect lock, 1 if the lock is free</span>
<span class="token keyword">SELECT</span> IS_FREE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- block 10 seconds, 1 if successfully, 0 timed out</span>
<span class="token keyword">SELECT</span> GET_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- release lock, or session break</span>
<span class="token keyword">SELECT</span> RELEASE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- RELEASE_ALL_LOCKS()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-regexp-and-rlike" tabindex="-1"><a class="header-anchor" href="#_13-regexp-and-rlike" aria-hidden="true">#</a> 13.REGEXP and RLIKE</h3><p>Note that mysql is byte-based, not char-based, so it is possible that multi-byte characters may not work properly.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1 for matching, 0 for not matching</span>
<span class="token keyword">SELECT</span> <span class="token string">&#39;Michael!&#39;</span> <span class="token operator">NOT</span> <span class="token operator">REGEXP</span> <span class="token string">&#39;.*&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-varchar-and-text" tabindex="-1"><a class="header-anchor" href="#_14-varchar-and-text" aria-hidden="true">#</a> 14.VarChar and Text</h3><ul><li>VarChar has a limit length and with default value, consistent with the Wings NotNull convention</li><li>TEXT can be considered unlimited and without default value, inconsistent with the Wings convention</li><li>MySQL has hard limit of 4096 columns</li><li>Maximum row size limit of 65535 bytes</li></ul><h3 id="_15-only-full-group-by-and-nonaggregated" tabindex="-1"><a class="header-anchor" href="#_15-only-full-group-by-and-nonaggregated" aria-hidden="true">#</a> 15.ONLY_FULL_GROUP_BY and nonaggregated</h3><blockquote><p>is not in GROUP BY clause and contains nonaggregated column which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</p></blockquote><p>As of MySQL 5.7.5, the default SQL mode includes ONLY_FULL_GROUP_BY.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- ① disable ONLY_FULL_GROUP_BY in current session</span>
<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_drop<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">&#39;ONLY_FULL_GROUP_BY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- </span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>
<span class="token comment">-- enable </span>
<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_add<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">&#39;ONLY_FULL_GROUP_BY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- ②, use ANY_VALUE</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ANY_VALUE<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2d-3-local-memory-h2" tabindex="-1"><a class="header-anchor" href="#_2d-3-local-memory-h2" aria-hidden="true">#</a> 2D.3.Local/Memory H2</h2><p>If it is not convenient to get a mysql database, such as a demo or local application, you can use H2 with the following configuration.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jdbc:h2:~/wings-init
;USER=trydofor;PASSWORD=moilioncircle
;MODE=MySQL;CASE_INSENSITIVE_IDENTIFIERS=TRUE;IGNORECASE=TRUE
;AUTO_RECONNECT=TRUE;AUTO_SERVER=TRUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),h={href:"http://h2database.com/html/features.html",target:"_blank",rel:"noopener noreferrer"};function b(g,_){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,d,n("p",null,[s("In principle, DB should not encapsulate business logic (custom function or procedure), but can use the functions provided by db to simplify the work to achieve business goals. "),n("a",u,[s("Mysql 8.0 Official Documentation"),e(a)])]),k,n("p",null,[s("Wings requires the following key settings in mysqld, including lowercase names, language, timezone, user privilege, "),n("a",m,[s("wordseg for full-text search"),e(a)])]),v,n("p",null,[s("H2 is most compatible with mysql, eg. splitting and sharding work well, but trigger is not supported. "),n("a",h,[s("H2 Official Documentation"),e(a)])])])}const E=t(p,[["render",b],["__file","2d-mysql-h2.html.vue"]]);export{E as default};
