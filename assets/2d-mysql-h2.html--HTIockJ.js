import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as p,b as n,e as s,d as e,f as o}from"./app-DlsMUbL7.js";const c={},r=n("h1",{id:"_2d-mysql体系的知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2d-mysql体系的知识","aria-hidden":"true"},"#"),s(" 2D.Mysql体系的知识")],-1),d=n("p",null,"MySql体系指其分支(Percona,MariaDB)或兼容协议的数据库，wings使用mysql8（5.7已充分测试）",-1),u={href:"https://dev.mysql.com/doc/refman/8.0/en/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"_2d-1-创建mysql-docker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2d-1-创建mysql-docker","aria-hidden":"true"},"#"),s(" 2D.1.创建Mysql Docker")],-1),m={href:"https://dev.mysql.com/doc/refman/8.0/en/fulltext-boolean.html",target:"_blank",rel:"noopener noreferrer"},v=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">tee</span> /data/docker/mysql/conf/moilioncircle.cnf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
[mysqld]
max_allowed_packet          = 16777216
max_connections             = 1024
group_concat_max_len        = 16777216
## table store lowercase compare case-sensitive
lower_case_table_names      = 1
## FULLTEXT indexes by MeCab parser and ngram parser
innodb_ft_min_token_size    = 2
ft_min_word_len             = 2
ngram_token_size            = 2
## default charset and timezone
character_set_server        = utf8mb4
default-time-zone           = +00:00
## binary log
log_bin_trust_function_creators = 1
binlog-format               = MIXED
## local
innodb_file_per_table       = 1
innodb_strict_mode          = 0
#skip_grant_tables
EOF</span>

<span class="token comment"># 启动docker</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
 <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class="token operator">=</span>yes <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> /data/docker/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> /data/docker/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
mysql:8.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以下sql创建高权限用户，建议使用wings-mysql-user.sh管理不同权限的用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;moilioncircle&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>  <span class="token keyword">TO</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 通常写法</span>
<span class="token comment">-- GRANT ALL  ON \`%\`.*  TO &#39;trydofor&#39;@&#39;%&#39;; -- 上述有语法错误时</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;trydofor&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- DROP USER &#39;trydofor&#39;@&#39;%&#39;;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Wings工程区分数据库，需要以下命名的数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- DROP DATABASE IF EXISTS wings;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> wings <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4<span class="token punctuation">;</span>

<span class="token comment">-- wings /* auto codegen */</span>
<span class="token comment">-- wings_shard_0 /* sharding test */</span>
<span class="token comment">-- wings_shard_1 /* sharding test */</span>
<span class="token comment">-- wings_faceless /* faceless */</span>
<span class="token comment">-- wings_warlock /* warlock */</span>
<span class="token comment">-- wings_example /* winx example */</span>
<span class="token comment">-- wings_tiny /* winx tiny component */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2d-2-写高质量的sql" tabindex="-1"><a class="header-anchor" href="#_2d-2-写高质量的sql" aria-hidden="true">#</a> 2D.2.写高质量的SQL</h2><p>wings中，数据库仅用持久化功能，估应避免SQL含有运算和业务逻辑。</p><ul><li>必须知道where条件的索引情况</li><li>把字段运算比较，做等式变换后，变为定值比较</li><li>避免复杂SQL，鼓励单表查询</li><li>分页时，先定分页数据，再定向补充关联数据</li><li>避免循环查询和N+1查询</li></ul><h2 id="_2d-2-mysql非通常用法" tabindex="-1"><a class="header-anchor" href="#_2d-2-mysql非通常用法" aria-hidden="true">#</a> 2D.2.MySql非通常用法</h2><p>不推荐使用，但有时非常好用。</p><h3 id="_01-find-in-set" tabindex="-1"><a class="header-anchor" href="#_01-find-in-set" aria-hidden="true">#</a> 01.FIND_IN_SET</h3><p>FIND_IN_SET(str,strlist)，比like和match更精准的查找，strlist以逗号分隔，str中不能有逗号。 返回strlist中1-base的坐标。0表示没找到或strlist为空。NULL如果str或strlist为NULL。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a,b,c,d&#39;</span><span class="token punctuation">)</span>
<span class="token comment">-- 2，多数场景还是作为where条件，如下</span>
<span class="token keyword">WHERE</span> FIND_IN_SET<span class="token punctuation">(</span>role<span class="token punctuation">,</span> role_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_02-group-concat" tabindex="-1"><a class="header-anchor" href="#_02-group-concat" aria-hidden="true">#</a> 02.GROUP_CONCAT</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span>expr <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {unsigned_integer <span class="token operator">|</span> col_name <span class="token operator">|</span> expr}
        <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>col_name <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SEPARATOR str_val<span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> 
    GROUP_CONCAT<span class="token punctuation">(</span>CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span> contactLastName<span class="token punctuation">,</span> contactFirstName<span class="token punctuation">)</span>
        SEPARATOR <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03-全文检索-match-against" tabindex="-1"><a class="header-anchor" href="#_03-全文检索-match-against" aria-hidden="true">#</a> 03.全文检索，MATCH AGAINST</h3><p>需要建立full text index，注意汉字分词，用插件或在java中分比较好</p><h3 id="_04-替换和忽略-replace-ignore" tabindex="-1"><a class="header-anchor" href="#_04-替换和忽略-replace-ignore" aria-hidden="true">#</a> 04.替换和忽略 REPLACE IGNORE</h3><p><code>replace into</code>和<code>insert ignore</code></p><h3 id="_05-慎用json数据类型" tabindex="-1"><a class="header-anchor" href="#_05-慎用json数据类型" aria-hidden="true">#</a> 05.慎用Json数据类型</h3><p>As of MySQL 5.7.8, MySQL supports a native JSON data type defined by RFC 7159<br> 新的操作符<code>-&gt;</code>和<code>-&gt;&gt;</code>，需要注意词法分析框架的兼容性，所以在java中处理更为妥当。</p><h3 id="_06-性能分析explain和benchmark" tabindex="-1"><a class="header-anchor" href="#_06-性能分析explain和benchmark" aria-hidden="true">#</a> 06.性能分析explain和BENCHMARK</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 单个express重复执行，注意，select只能返回唯一值</span>
<span class="token keyword">SELECT</span> BENCHMARK<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>author_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> git_log_jetplus
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 查看索引使用情况</span>
<span class="token keyword">explain</span> 
    <span class="token keyword">SELECT</span> author_name <span class="token keyword">FROM</span> git_log_jetplus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07-分页limit和found-rows-记录总数" tabindex="-1"><a class="header-anchor" href="#_07-分页limit和found-rows-记录总数" aria-hidden="true">#</a> 07.分页limit和FOUND_ROWS()记录总数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 先增加SQL_CALC_FOUND_ROWS选项，</span>
<span class="token keyword">SELECT</span> SQL_CALC_FOUND_ROWS <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl_name <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- 然后获取</span>
<span class="token keyword">SELECT</span> FOUND_ROWS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08-自增主键auto-increment和last-insert-id" tabindex="-1"><a class="header-anchor" href="#_08-自增主键auto-increment和last-insert-id" aria-hidden="true">#</a> 08.自增主键AUTO_INCREMENT和LAST_INSERT_ID()</h3><p>项目中避免使用自增主键，特事特办的时候，可以采用标题的写法。 注意value多值插入时，只返回第一个。</p><h3 id="_09-字符串-字段链接-concat和concat-ws" tabindex="-1"><a class="header-anchor" href="#_09-字符串-字段链接-concat和concat-ws" aria-hidden="true">#</a> 09.字符串/字段链接 CONCAT和CONCAT_WS</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 注意对null的处理</span>
<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;My&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;QL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- NULL, returns NULL if any argument is NULL.</span>
<span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;First name&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;Last Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;First name,Last Name&#39;, skip any NULL values</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-时区转换convert-tz" tabindex="-1"><a class="header-anchor" href="#_10-时区转换convert-tz" aria-hidden="true">#</a> 10.时区转换CONVERT_TZ</h3><p>应该在write时执行转换类操作，此方法应在临时性读取时使用。 注意闰秒(leap second) <code>:59:60</code>或<code>:59:61</code>都以<code>:59:59</code>返回</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>  CONVERT_TZ<span class="token punctuation">(</span><span class="token string">&#39;2007-03-11 2:00:00&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;America/New_york&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Asia/Shanghai&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> time_cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_11-格式化输出format-date-format" tabindex="-1"><a class="header-anchor" href="#_11-格式化输出format-date-format" aria-hidden="true">#</a> 11.格式化输出FORMAT,DATE_FORMAT</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- &#39;#,###,###.##&#39;</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.123456</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;12,332.1235&#39;</span>
<span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &#39;12,332.1000&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-全局悲观锁get-lock" tabindex="-1"><a class="header-anchor" href="#_12-全局悲观锁get-lock" aria-hidden="true">#</a> 12.全局悲观锁GET_LOCK</h3><p>此功能在做跨jvm全局悲观锁时可用。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 一条语句，无阻塞获得锁</span>
<span class="token keyword">SELECT</span> <span class="token keyword">IF</span><span class="token punctuation">(</span>IS_FREE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> GET_LOCK<span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 检测锁，1 if the lock is free</span>
<span class="token keyword">SELECT</span> IS_FREE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 阻塞10秒，1 if successfully, 0 timed out</span>
<span class="token keyword">SELECT</span> GET_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 释放锁，或session中断</span>
<span class="token keyword">SELECT</span> RELEASE_LOCK<span class="token punctuation">(</span><span class="token string">&#39;lock1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- RELEASE_ALL_LOCKS()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-正则匹配regexp和rlike" tabindex="-1"><a class="header-anchor" href="#_13-正则匹配regexp和rlike" aria-hidden="true">#</a> 13.正则匹配REGEXP和RLIKE</h3><p>注意，mysql是基于byte-wise的，不是char，所以多字节字符有可能不正常。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1为匹配，0为不匹配</span>
<span class="token keyword">SELECT</span> <span class="token string">&#39;Michael!&#39;</span> <span class="token operator">NOT</span> <span class="token operator">REGEXP</span> <span class="token string">&#39;.*&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-varchar和text类型" tabindex="-1"><a class="header-anchor" href="#_14-varchar和text类型" aria-hidden="true">#</a> 14.VarChar和Text类型</h3><ul><li>VarChar 有长度限制，能够设置默认值，这符合wings的NotNull约定</li><li>TEXT可认为无限制，不能设置默认值，不符合wings约定</li><li>MySQL has hard limit of 4096 columns</li><li>maximum row size limit of 65535 bytes</li></ul><h3 id="_15-only-full-group-by-和-nonaggregated" tabindex="-1"><a class="header-anchor" href="#_15-only-full-group-by-和-nonaggregated" aria-hidden="true">#</a> 15.ONLY_FULL_GROUP_BY 和 nonaggregated</h3><blockquote><p>is not in GROUP BY clause and contains nonaggregated column which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</p></blockquote><p>从MySQL 5.7.5起 ONLY_FULL_GROUP_BY 默认开启，可避免获取无用字段。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 方案①，临时关闭</span>
<span class="token comment">-- disable ONLY_FULL_GROUP_BY in current session</span>
<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_drop<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">&#39;ONLY_FULL_GROUP_BY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- </span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>
<span class="token comment">-- enable ONLY_FULL_GROUP_BY</span>
<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_add<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">&#39;ONLY_FULL_GROUP_BY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 方案②，使用ANY_VALUE</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ANY_VALUE<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2d-3-本地-内存h2" tabindex="-1"><a class="header-anchor" href="#_2d-3-本地-内存h2" aria-hidden="true">#</a> 2D.3.本地/内存H2</h2><p>在不方便提供mysql数据库的时候，如演示或本地数据库应用，可以使用H2，配置如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jdbc:h2:~/wings-init
;USER=trydofor;PASSWORD=moilioncircle
;MODE=MySQL;CASE_INSENSITIVE_IDENTIFIERS=TRUE;IGNORECASE=TRUE
;AUTO_RECONNECT=TRUE;AUTO_SERVER=TRUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),b={href:"http://h2database.com/html/features.html",target:"_blank",rel:"noopener noreferrer"};function _(h,g){const a=l("ExternalLinkIcon");return i(),p("div",null,[r,d,n("p",null,[s("原则上DB不应该封装（自定义function或procedure）业务逻辑，但可以使用db提供的功能，简化工作实现业务目标。 "),n("a",u,[s("mysql 8.0 官方文档"),e(a)])]),k,n("p",null,[s("wings需要mysqld中以下的重点设置项，包括命名小写，语言时区，用户权限，"),n("a",m,[s("全文检索的分词"),e(a)]),s(" 以下配置适应于mysql5.7, mysql8, native, cloud")]),v,n("p",null,[s("其中，H2对mysql做了部分兼容，分表分库可以，trigger不支持，参考配置， "),n("a",b,[s("H2官方文档"),e(a)])])])}const L=t(c,[["render",_],["__file","2d-mysql-h2.html.vue"]]);export{L as default};
