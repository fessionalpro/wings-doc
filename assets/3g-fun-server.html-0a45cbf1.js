import{_ as o,X as p,Y as l,$ as n,a1 as s,a0 as e,a3 as t,F as c}from"./framework-e2173353.js";const i={},u=t(`<h1 id="_3g-后端防护功能" tabindex="-1"><a class="header-anchor" href="#_3g-后端防护功能" aria-hidden="true">#</a> 3G.后端防护功能</h1><p>对后端服务，提供一定的保护和控制能力</p><h2 id="_3g-1-后端防抖" tabindex="-1"><a class="header-anchor" href="#_3g-1-后端防抖" aria-hidden="true">#</a> 3G.1.后端防抖</h2><p>与前端的Lodash相似，不同的是后端业务优先，只支持先调用后等待的leading防抖。 即在第一个请求时处理业务，有后续请求出现时，支持以下处理方式，</p><ul><li>不复用leading结果时，直接返回预设的response(默认208 Already Reported)。否则，</li><li>等待waiting毫秒数，或超时或被leading唤醒。然后，</li><li>若有leading有response，则复用；否则，返回预设response。</li></ul><p><code>@Debounce</code>基于HandlerInterceptor，request流复用和response流缓存。 作用于Controller层，是Session级，以URL特征及参数为判断重复的依据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test/debounce-body.json&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Debounce</span><span class="token punctuation">(</span>waiting <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> reuse <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">debounceBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> p<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Q</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">&quot;::&quot;</span> <span class="token operator">+</span> seq<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;::&quot;</span> <span class="token operator">+</span> q<span class="token punctuation">.</span><span class="token function">getQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多示例参考Debounce代码文档或测试代码<code>TestDebounceController.java</code></p><h2 id="_3g-2-防止连击" tabindex="-1"><a class="header-anchor" href="#_3g-2-防止连击" aria-hidden="true">#</a> 3G.2.防止连击</h2><p><code>@DoubleKill</code>与Debounce不同，是类似Cacheable的AOP，用于Service层防止同时计算。 底层基于业务锁，而非时间间隔，开始时获取锁，结束时释放锁，得不到锁的请求会被kill。</p><p>命名是Dota的，但意思不同，是杀死第二个，由Jvm全局锁和DoubleKillException实现。</p><p>能够但不建议用于Controller层，此时需要显式的通过Spel指定参数，如@RequestParam。 默认是session级别的控制，可使用@Bean进行处理。默认返回202 Accepted</p><p>DoubleKillException默认返回固定的json，注入DoubleKillExceptionResolver可替换， 需要注意ExceptionResolver或ExceptionHandler的Order，避免异常捕获的层级错误。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DoubleKill</span><span class="token punctuation">(</span>expression <span class="token operator">=</span> <span class="token string">&quot;#type + &#39;-&#39; + #p1 * 1000&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sleepSecondExp</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@DoubleKill</span><span class="token punctuation">(</span>expression <span class="token operator">=</span> <span class="token string">&quot;@httpSessionIdResolver.resolveSessionIds(#p0)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doubleKill</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;login page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细用法，参考DoubleKill源码文档，或参考测试代码</p>`,15),r={href:"https://github.com/trydofor/pro.fessional.wings/blob/master/wings/slardar/src/test/java/pro/fessional/wings/slardar/controller/TestDoubleKillController.java",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/trydofor/pro.fessional.wings/blob/master/wings/slardar/src/test/java/pro/fessional/wings/slardar/service/DoubleKillService.java",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_3g-3-验证码" tabindex="-1"><a class="header-anchor" href="#_3g-3-验证码" aria-hidden="true">#</a> 3G.3.验证码</h2><p>对于受保护的资源，使用验证码防扒，有时是为了延缓时间，有时是为了区分行为。 验证码的加载和验证，可以通过header或param进行（默认param）。</p><p>在SpringSecurity中，对401和403有以下约定，所以验证码使用406(Not Acceptable)</p><ul><li>401 - Unauthorized 身份未鉴别</li><li>403 - Forbidden/Access Denied 鉴权通过，授权不够</li></ul><p>slardar的验证码是基于图片的，现今的AI算法识别率可达90%以上，因此并不安全， 仅限于初防君子的初级资源保护上。默认支持中文，一个汉字+3个英数，可以在配置中关闭。 若是敏感信息或高级防护，建议采购第三方验证码服务。</p><p>使用方法如下，在MappingMethod上，放置<code>@FirstBlood</code> 即可，工作流程如下。</p><ul><li>客户端正常访问此URL，如/test/captcha.json（需要支持GET方法，以便返回图片）</li><li>服务器需要验证码时，以406(Not Acceptable)返回提示json</li><li>客户端在header和cookie中获得Client-Ticket的token，并每次都发送</li><li>客户端在URL后增加quest-captcha-image=\${vcode}获取验证码图片（可直接使用） <ul><li>以<code>accept</code>区分图片的返回形式，<code>base64</code>为base64格式的图，其他均为二进制流</li><li>当<code>vcode</code>为验证码，通过时，返回空body，否则返回新的验证图片</li></ul></li><li>客户端在URL后增加check-captcha-image=\${vcode}提交验证码</li><li>服务器端自动校验Client-Ticket和check-captcha-image，完成验证或放行</li></ul><p>若需集成其他验证码，如第三方服务或消息验证码，实现并注入FirstBloodHandler即可</p><h2 id="_3g-4-防止篡改" tabindex="-1"><a class="header-anchor" href="#_3g-4-防止篡改" aria-hidden="true">#</a> 3G.4.防止篡改</h2><p>通过http header中为要编辑的信息设置签名，防止客户端篡改。默认返回409(Conflict)。 详见 wings-righter-79.properties 和 RighterContext。实现原理和使用方法是，</p><ul><li>使用Righter注解编辑数据(false)和提交数据(true)的方法</li><li>获得编辑数据时，在RighterContext中设置签名的数据header</li><li>提交时需要提交此签名，并被校验，签名错误时直接409</li><li>签名通过后，通过RighterContext获取数据，程序自行检验数据项是否一致</li></ul><h2 id="_3g-5-终端信息" tabindex="-1"><a class="header-anchor" href="#_3g-5-终端信息" aria-hidden="true">#</a> 3G.5.终端信息</h2><p>通过HandlerInterceptor，在当前线程和request中设置Terminal信息，</p><p>TerminalContext主要包括ip，agent，locale和timezone等</p><h2 id="_3g-6-请求复用和应答缓存" tabindex="-1"><a class="header-anchor" href="#_3g-6-请求复用和应答缓存" aria-hidden="true">#</a> 3G.6.请求复用和应答缓存</h2><p>WingsReuseStreamFilter 实行了request流的循环读，和response的缓存。 在使用以下filter时，会出现bytes重复复制而浪费空间，建议自行Override。</p><ul><li>CommonsRequestLoggingFilter</li><li>ShallowEtagHeaderFilter</li></ul><p>ReuseStream的流仅提供了复用功能，默认不开启，不使用时无空间和性能损失。 仅在需要时，由filter，interceptor，advice等机制在使用其开启复用功能。</p><p>需要注意filter的order，以保证该filter在使用之前完成wrapper。</p><h2 id="_3g-7-请求及应答日志" tabindex="-1"><a class="header-anchor" href="#_3g-7-请求及应答日志" aria-hidden="true">#</a> 3G.7.请求及应答日志</h2><p>通过WingsReuseStreamFilter注入RequestResponseLogging可实现请求应答日志。 相比于CommonsRequestLoggingFilter，此功能按需复用，同时支持request和response。</p><p>实现AbstractRequestResponseLogging Bean即可，参考代码如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RequestResponseLogging</span> <span class="token function">requestResponseLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractRequestResponseLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">loggingConfig</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ReuseStreamRequestWrapper</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;/test/debounce&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

            <span class="token keyword">final</span> <span class="token class-name">Condition</span> cond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cond<span class="token punctuation">.</span><span class="token function">setRequestEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cond<span class="token punctuation">.</span><span class="token function">setRequestPayload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cond<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            cond<span class="token punctuation">.</span><span class="token function">setResponseEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cond<span class="token punctuation">.</span><span class="token function">setResponsePayload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> cond<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">logging</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其原理是，WingsReuseStreamFilter配置时，自动实现了以下步骤。</p><ul><li>@AutoConfigureBefore(SlardarRestreamConfiguration.class)</li><li>获取 WingsReuseStreamFilter，然后setRequestResponseLogging</li></ul><p>注意<code>POST</code>提交传统表单提交，以下2中类型，包括参数和文件，</p><ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li></ul><p>因底层的参数解析和获取流是二选一关系，即先解析则流读尽，获取流则参数为空。 所以，对应此两种请求需要记录Payload时，会存在以下差异</p><ul><li>form-urlencoded，因后置构造body，所以其中会包括query参数</li><li>form-data，body同上，文件需要实现buildRequestPayload获取parts记录</li></ul><h2 id="_3g-8-rest和client" tabindex="-1"><a class="header-anchor" href="#_3g-8-rest和client" aria-hidden="true">#</a> 3G.8.Rest和Client</h2><p>默认使用OkHttp作为restTemplate的实现。准数SpringBoot官方文档和源码约定。 可以Autowired OkHttpClient直接使用，默认<strong>信任所有ssl证书</strong>，如安全高，需要关闭。 如果需要按scope定制，使用RestTemplateBuilder，全局应用使用RestTemplateCustomizer。</p>`,31),g={href:"https://docs.spring.io/spring-boot/docs/3.0.2/reference/htmlsingle/#io.rest-client.resttemplate.customization",target:"_blank",rel:"noopener noreferrer"},v=t('<p>在springboot默认是3.x，而just-auth需要4.x，所以需要手动okhttp3.version属性</p><h2 id="_3g-9-负载过滤器" tabindex="-1"><a class="header-anchor" href="#_3g-9-负载过滤器" aria-hidden="true">#</a> 3G.9.负载过滤器</h2><p>OverloadFilter可限定请求并发，默认<code>spring.wings.slardar.enabled.overload=false</code></p><ul><li>自动或手动设置<code>最大同时进行请求数</code>，超过时，执行<code>fallback</code>。</li><li>不影响性能的情况下，记录慢响应URI和运行状态。</li><li>优雅停止服务器，阻断所有新请求。</li><li>相同IP请求过于频繁，执行fallback。</li></ul><p><code>最大同时进行请求数</code>，指已经由Controller处理，但未完成的请求。</p><p>其中，关闭<code>快请求</code>或<code>慢请求</code>功能，可以通过以下设置关闭，</p><ul><li><code>快请求</code> - <code>wings.slardar.overload.request-capacity=-1</code></li><li><code>慢请求</code> - <code>wings.slardar.overload.response-warn-slow=0</code></li></ul><h2 id="_3g-10-分页查询" tabindex="-1"><a class="header-anchor" href="#_3g-10-分页查询" aria-hidden="true">#</a> 3G.10.分页查询</h2><p>Wings中使用PageQuery和PageDefault取代了SpringData中的Pagable。</p><ul><li>PageQuery只能使用QueryString方式传递，不属于RequesBody部分。</li><li><code>@ParameterObject</code> PageQuery pq</li><li><code>@ParameterObject`` @PageDefault(size=30)</code> PageQuery pq</li></ul><p>使用@ParameterObject注解，是为了Swagger能自动识别为Param类型</p><p>同PageQuery一样，返回分页使用PageResult作为容器，Wings中有响应的工具类。</p>',12);function b(m,h){const a=c("ExternalLinkIcon");return p(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("TestDoubleKillController.java"),e(a)])]),n("li",null,[n("a",d,[s("DoubleKillService.java"),e(a)])])]),k,n("p",null,[n("a",g,[s("RestTemplate 定制"),e(a)]),s(" org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration")]),v])}const R=o(i,[["render",b],["__file","3g-fun-server.html.vue"]]);export{R as default};
