import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-B3mmVXA7.js";const l={};function t(r,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="_3a-jackson格式约定" tabindex="-1"><a class="header-anchor" href="#_3a-jackson格式约定"><span>3A.Jackson格式约定</span></a></h1><p>在Mvc对外服务时，约定常见数据类型的转换关系。</p><h2 id="_3a-1-常用类型约定" tabindex="-1"><a class="header-anchor" href="#_3a-1-常用类型约定"><span>3A.1.常用类型约定</span></a></h2><p>考虑到java和js的差异，数据传递和功能上，约定如下，</p><ul><li>浮点数值，以java.BigDecimal与js.string互传</li><li>java.null 不在Json中互传</li><li>java.整数，与js.number/string互传</li><li>java.日时，包括<code>util.Date</code>, <code>sql.Date</code>, <code>time.Local*|Zoned*|Instant</code></li><li>java.日时，以时间戳形式与js.number互传</li><li>java.日时，都以<code>yyyy-MM-dd HH:mm:ss</code>格式与js.string互传</li><li>java.时区，以ZoneId字符串格式与js.string互传</li><li>对象key，不可以是变量，<code>{steve:15}</code>为<code>{name:&#39;steve&#39;,age:15}</code></li></ul><h2 id="_3a-2-精度及特性丢失" tabindex="-1"><a class="header-anchor" href="#_3a-2-精度及特性丢失"><span>3A.2.精度及特性丢失</span></a></h2><p>因为js的特殊性，会出现精度和特性（类型，排序等）丢失问题，比如object的key可丢失原顺序。</p><ul><li>Json中最好只有2种基本数据类型：boolean,string</li><li>Js不处理有精度要求的数值计算，只应负责显示服务器端计算结果</li><li>因为时间的特殊性，还有时区和夏令时，在保证精度下可读性优先</li><li>53bits位的long，必须使用string，因为IEE754无法正确表示</li><li>integer和long，默认使用number，考虑typescript兼容性</li><li>确保jsr310格式兼容，如依赖<code>jackson-datatype-jsr310</code></li><li>ZoneId应首选<code>IANA TZDB</code>格式，如<code>America/New_York</code></li><li>带时区(<code>Z</code>)的序列化与反序列化过程，会丢失夏令时信息</li></ul><p>注意：属性名前缀不可以单字母，wings规范建议3字母以上。 因为<code>sCount</code>会导致解析错误，见测试 OkHttpClientHelperTest.testPostBad</p><h2 id="_3a-3-内容的国际化" tabindex="-1"><a class="header-anchor" href="#_3a-3-内容的国际化"><span>3A.3.内容的国际化</span></a></h2><p>通过注解和I18nAwarePropertyFilter自动对内应用语言。</p><ul><li><code>I18nString</code>类型会自动转换</li><li><code>@JsonI18nString</code>注解的<code>CharSequence</code>当做message_code转化</li><li><code>@JsonI18nString(false)</code>可以关闭自动转换</li><li><code>I18nMessage</code>自动根据locale设置message</li><li><code>I18nAware</code>自动根据locale自动转换</li></ul><h2 id="_3a-4-日期时间的格式" tabindex="-1"><a class="header-anchor" href="#_3a-4-日期时间的格式"><span>3A.4.日期时间的格式</span></a></h2><p>支持java.time中以下日期格式的定制，包括Json和Spring。</p><ul><li>LocalDate，LocalTime，LocalDateTime，多个输入格式，单个输出格式定制。</li><li>ZonedDateTime，同<code>Local*</code>功能。可支持自动切换到用户时区，默认关闭。</li><li>OffsetDateTime，同<code>Local*</code>功能，可支持自动切换到用户时区，默认打开</li></ul><p>例如，默认配置 wings-datetime-79.properties 中的LocalDate支持</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出时以 2021-01-30格式</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.datetime.date.format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">yyyy[-MM][-dd]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输入的时候，支持 2021-01-30 和 Jan/30/2021等多种</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.datetime.date.parser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">,yyyy[-][/][.][M][-][/][.][d]\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">,[MMMM][MMM][M][-][/][.][d][-][/][.][yyyy][yy]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 参考 SmartFormatter.java 测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3a-5-数字的格式" tabindex="-1"><a class="header-anchor" href="#_3a-5-数字的格式"><span>3A.5.数字的格式</span></a></h2><p>对Int,Long,Float,Double,BigDecimal支持（Json）输出时格式和舍入格式的定制 需要注意的是，实际项目中，应该避免使用Float和Double，应该使用BigDecimal。 在wings约定内，常用的Number类型，应该只有Int，Long和BigDecimal。</p><p>例如，默认配置 wings-number-79.properties 中的Decimal支持，</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 以Floor方式，保留2位小数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.number.decimal.format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#.00</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.number.decimal.round</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">FLOOR</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.number.decimal.separator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">,</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以设置，按中国人习惯，每4位用<code>_</code>分隔，增加CNY符号</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.number.decimal.format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">￥,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">####.00</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">wings.slardar.number.decimal.separator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">_</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 参考 DecimalFormatTest.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当JS场景数字value超越 Number.M##_SAFE_INTEGER时，<code>digital=auto</code>自动切换number和string。 默认配置中，仅对int32和int64使用了auto，需要谨慎使用，检查类型或关闭auto(false)</p><h2 id="_3a-6-空empty数据处理" tabindex="-1"><a class="header-anchor" href="#_3a-6-空empty数据处理"><span>3A.6.空Empty数据处理</span></a></h2><p>通过<code>configOverride</code> 和 <code>NON_EMPTY</code>，默认排除了以下类型的empty。</p><ul><li>util.Date/sql.Date</li><li>time.LocalDate</li><li>time.LocalDateTime</li><li>time.ZonedDateTime</li><li>time.OffsetDateTime</li></ul><h2 id="_3a-7-常用jackson注解" tabindex="-1"><a class="header-anchor" href="#_3a-7-常用jackson注解"><span>3A.7.常用Jackson注解</span></a></h2><ul><li>@JsonRawValue - number不变字符串，字符串不转义</li><li>@JsonFormat - 指定格式</li><li>@JsonIgnore/JsonProperty - 忽略该字段</li><li>@JsonProperty - 重命名</li><li>@JsonNaming - 命名规则</li><li>@JsonRootName(value = &quot;user&quot;) - 增加一个头key</li><li>@JsonUnwrapped - 干掉包装类</li><li>@JsonSerialize(as=BasicType.class) - 以别人的样子输出</li><li>@JsonView - 以不同视图过滤属性（可作用在RequestMapping）</li></ul><p>通常要避免全局类型的Filter和MixIn，推荐Session级的注解。</p><ul><li>同一pojo，不同场景的属性名不同，比如password和secret</li><li>同一pojo，不同场景的属性值不同，比如yyyy-MM-dd和MMM-dd,yyyy</li></ul><p>对于以上场景，仍然要遵循静态性和强类型原则，通常可以采用以下建议，</p><ul><li>自己的类，使用@JsonView + 不同的getter区分不同场景</li><li>第三方类，使用Override子类 + MapStruct复制属性</li><li>自定义JsonSerialize或Converter，不推荐</li><li>自定义 ResponseBodyAdvice，不推荐</li></ul><p>默认配置下，仅有@JsonView可作用于RequestMapping，其他注解要注到Pojo上。参考资料，</p><ul><li><a href="https://www.baeldung.com/jackson-annotations" target="_blank" rel="noopener noreferrer">baeldung 示例</a></li><li><a href="https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations" target="_blank" rel="noopener noreferrer">jackson注解</a></li><li><a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#howto.spring-mvc.customize-jackson-objectmapper" target="_blank" rel="noopener noreferrer">spring定制jackson</a></li></ul><h2 id="_3a-8-反序列化泛型" tabindex="-1"><a class="header-anchor" href="#_3a-8-反序列化泛型"><span>3A.8.反序列化泛型</span></a></h2><p>Jackson中涉及到泛型，参数类型，必备技能</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TypeReference</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TypeReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() { }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// TypeFactory 中有很丰富的类型构造</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">JavaType</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> type </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTypeFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">constructCollectionType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)])])}const p=s(l,[["render",t]]),d=JSON.parse('{"path":"/zh/3-slardar/3a-jackson.html","title":"3A.Jackson格式约定","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"feather","category":["鱼人","约定","Json"],"description":"3A.Jackson格式约定 在Mvc对外服务时，约定常见数据类型的转换关系。 3A.1.常用类型约定 考虑到java和js的差异，数据传递和功能上，约定如下， 浮点数值，以java.BigDecimal与js.string互传 java.null 不在Json中互传 java.整数，与js.number/string互传 java.日时，包括util...","GIT_REPO_HEAD":"2025-09-01 bf16720a95aa32d38b537cc338e086dd2483e52b\\n","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3A.Jackson格式约定\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-05T07:34:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/3-slardar/3a-jackson.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"3A.Jackson格式约定"}],["meta",{"property":"og:description","content":"3A.Jackson格式约定 在Mvc对外服务时，约定常见数据类型的转换关系。 3A.1.常用类型约定 考虑到java和js的差异，数据传递和功能上，约定如下， 浮点数值，以java.BigDecimal与js.string互传 java.null 不在Json中互传 java.整数，与js.number/string互传 java.日时，包括util..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:34:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:34:35.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/3-slardar/3a-jackson.html"}]]},"git":{"createdTime":1655901635000,"updatedTime":1738740875000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":13,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"zh/3-slardar/3a-jackson.md","autoDesc":true}');export{p as comp,d as data};
