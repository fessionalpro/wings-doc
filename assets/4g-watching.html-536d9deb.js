import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as l,b as e,e as a,d as s,f as r}from"./app-cb212eee.js";const d={},c=r(`<h1 id="_4g-time-watching" tabindex="-1"><a class="header-anchor" href="#_4g-time-watching" aria-hidden="true">#</a> 4G.Time Watching</h1><p>Out-of-the-box simple performance analysis, slow request logging, which is a debugging feature, disabled by default.</p><ul><li>Module switch - spring.wings.warlock.enabled.watching=false</li><li>Data layer - wings.warlock.watching.jooq-threshold=60</li><li>Service layer - wings.warlock.watching.service-threshold=200</li><li>Web layer - wings.warlock.watching.controller-threshold=2000</li></ul><p>With the above configuration file, set whether the module is on or off, and the threshold for slow response for each layer. <code>-1</code> means off, while <code>0</code> means all on, and the other formal values are thresholds for slow, milliseconds.</p><h2 id="_4g-1-underlying-principle" tabindex="-1"><a class="header-anchor" href="#_4g-1-underlying-principle" aria-hidden="true">#</a> 4G.1.Underlying Principle</h2><p>The <code>timing</code> functions at each level, placed in different project modules, and Warlock to auto config them.</p><ul><li>Controller layer, based on the Interceptor, works for all URLs by default</li><li>Service layer, based on AOP, requires @Watching annotations to mark methods manually</li><li>Database layer, based on Jooq&#39;s ExecuteListener, works for all jooq by default</li></ul><p><code>Timing</code> is automatically enabled in the Context of the Wings, based on the call count, and 0 is considered as finished. Whether it is running or finished, the following statistics will automatically output in the log at the end of call by default.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+--s--ms------ns-+---%-+---------------+---------------
|  1,426,497,039 | 100 | thread  | task and timing 
|    922,167,066 |  64 | XNIO-4  | /test/watching.json
|    504,329,973 |  35 | wings-1 | AsyncWatch.BadSelect
|    504,059,463 |  35 | wings-1 | ¦-AsyncWatch.sleep
|    663,100,505 |  46 | XNIO-4  | ¦-Service#normalFetch
|    128,767,339 |   9 | XNIO-4  | ¦-¦-JooqSlowSql:SelectQuery
|    213,964,147 |  14 | XNIO-4  | ¦-Service#errorFetch
|    199,774,730 |  14 | XNIO-4  | ¦-¦-JooqSlowSql:SelectQuery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Column 1 is the elapsed time, up to 999 seconds, accurate to ns</li><li>Column 2 is the percentage, based on the sum of the elapsed time of level 0.</li><li>Column 3 is the thread, where the time is spent</li><li>Column 4 is the <code>call relationship</code> and remark, used to analyze the call relationship</li></ul><p><code>timing</code> forms <code>call relations</code> according to <code>start time</code> to <code>end time</code>, and is displayed in a tree structure. In a linear call, the <code>call relationship</code> is also equal to the execution relationship. However, with multi-threading, it is necessary to sort by threads.</p><h2 id="_4g-2-usage" tabindex="-1"><a class="header-anchor" href="#_4g-2-usage" aria-hidden="true">#</a> 4G.2.Usage</h2><p>First of all, you should enable the Watching module so that Warlock can config it automatically, and then set each threshold to be on if it is not negative.</p><p>In the default WebMvc, <code>Controller</code>, <code>Service</code> and <code>Database</code> belong to the containing relationship. Therefore, a simple slow response analysis is on Controller and Database.</p><p>Suppose, in the Controller layer, we define 3 seconds as the threshold, and in the Database layer, we define 100ms as the threshold, and set the configuration directly.</p><p>If you need to count the Service layer, you need to manually add the <code>@Watching</code> annotation to the methods to be watched.</p><h2 id="_4g-3-caution" tabindex="-1"><a class="header-anchor" href="#_4g-3-caution" aria-hidden="true">#</a> 4G.3.Caution</h2><p>This feature is somewhat invasive and is mainly used for tuning during development, it is recommended to close it in the online products to avoid wasting unnecessary resources.</p>`,18),h={href:"https://github.com/alibaba/arthas",target:"_blank",rel:"noopener noreferrer"};function u(m,g){const t=n("ExternalLinkIcon");return o(),l("div",null,[c,e("p",null,[a("Non-invasive and dynamic program diagnosis, recommended to use "),e("a",h,[a("Arthas"),s(t)])])])}const b=i(d,[["render",u],["__file","4g-watching.html.vue"]]);export{b as default};
