import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as l,b as s,e as n,d as i,f as a}from"./app-D49wbIsR.js";const c={},d=a(`<h1 id="_9d3-读写分离dto" tabindex="-1"><a class="header-anchor" href="#_9d3-读写分离dto"><span>9D3.读写分离Dto</span></a></h1><p>在Wings中，出于数据保护和防方法泄露的目的，需要入参的Dto是只读状态。</p><h2 id="getter加builder" tabindex="-1"><a class="header-anchor" href="#getter加builder"><span>Getter加Builder</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span> <span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@ToString</span> <span class="token annotation punctuation">@EqualsAndHashCode</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RwsDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最简单的分离策略，有lombok加持，代码也非常简洁。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RwsDto</span> p <span class="token operator">=</span> <span class="token class-name">RwsDto</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="builder插件" tabindex="-1"><a class="header-anchor" href="#builder插件"><span>Builder插件</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@ToString</span> <span class="token annotation punctuation">@EqualsAndHashCode</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RwsDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// Alt + Insert &gt; Builder</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),r={href:"https://plugins.jetbrains.com/plugin/7354-innerbuilder",target:"_blank",rel:"noopener noreferrer"},u=a(`<ul><li>Generate builder methods for final fields</li><li>Generate static newBuilder()method</li><li>Rename newBuilder()to builder()</li><li>Generate builder copy constructor</li></ul><p>相比于lombok，可以在生成的builder方法中，自己动手加料。</p><h2 id="手工搞继承" tabindex="-1"><a class="header-anchor" href="#手工搞继承"><span>手工搞继承</span></a></h2><p>Builder模式，主要是final+同字段赋值的模式，以下是以继承方式的封装。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@ToString</span> <span class="token annotation punctuation">@EqualsAndHashCode</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RwsDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Builder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token keyword">extends</span> <span class="token class-name">RwsDto</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 初始化固定值</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">RwsDto</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function k(m,v){const e=o("ExternalLinkIcon");return p(),l("div",null,[d,s("p",null,[n("在IDEA中使用 "),s("a",r,[n("InnerBuilder"),i(e)]),n(" ，选中以下选项")]),u])}const g=t(c,[["render",k],["__file","9d3.dto-builder.html.vue"]]),y=JSON.parse('{"path":"/zh/9-example/9d.wings-boot/9d3.dto-builder.html","title":"9D3.读写分离Dto","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"read","category":["实战","手册"],"description":"9D3.读写分离Dto 在Wings中，出于数据保护和防方法泄露的目的，需要入参的Dto是只读状态。 Getter加Builder 最简单的分离策略，有lombok加持，代码也非常简洁。 Builder插件 在IDEA中使用 InnerBuilder ，选中以下选项 Generate builder methods for final fields G...","GIT_REPO_HEAD":"2024-05-14 c11179d9405d56bdce1d844167180312da5251a8","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/9-example/9d.wings-boot/9d3.dto-builder.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/9-example/9d.wings-boot/9d3.dto-builder.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"9D3.读写分离Dto"}],["meta",{"property":"og:description","content":"9D3.读写分离Dto 在Wings中，出于数据保护和防方法泄露的目的，需要入参的Dto是只读状态。 Getter加Builder 最简单的分离策略，有lombok加持，代码也非常简洁。 Builder插件 在IDEA中使用 InnerBuilder ，选中以下选项 Generate builder methods for final fields G..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T10:07:45.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-05-08T10:07:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9D3.读写分离Dto\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T10:07:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"Getter加Builder","slug":"getter加builder","link":"#getter加builder","children":[]},{"level":2,"title":"Builder插件","slug":"builder插件","link":"#builder插件","children":[]},{"level":2,"title":"手工搞继承","slug":"手工搞继承","link":"#手工搞继承","children":[]}],"git":{"createdTime":1687077446000,"updatedTime":1715162865000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":2}]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"zh/9-example/9d.wings-boot/9d3.dto-builder.md","localizedDate":"2023年6月18日","autoDesc":true}');export{g as comp,y as data};
