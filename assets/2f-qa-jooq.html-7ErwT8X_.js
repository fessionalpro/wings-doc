import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,b as n,e as s,d as a,w as u,f as e}from"./app-T2f1rYfd.js";const r={},d=n("h1",{id:"_2f-jooq使用话题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-jooq使用话题","aria-hidden":"true"},"#"),s(" 2F.Jooq使用话题")],-1),k=n("p",null,"Jooq有关的话题",-1),m=n("h2",{id:"_2f-01-jooq执行plain-sql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-01-jooq执行plain-sql","aria-hidden":"true"},"#"),s(" 2F.01.jooq执行plain sql")],-1),h=n("p",null,"在执行plain sql时，可以使用jdbcTemplate/SqlQuery/jooq，jooq的好处是，会进行parse（性能），进行兼容性调整（如果需要）。 所以，在运行时，不考虑兼容性，推荐用 jdbcTemplate，在需要语法分析或合并等场景，使用jooq。",-1),g={href:"https://www.jooq.org/doc/3.12/manual/sql-building/plain-sql/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jooq.org/doc/3.12/manual/sql-building/plain-sql-templating/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jooq.org/doc/3.12/manual/sql-building/queryparts/plain-sql-queryparts/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jooq.org/doc/3.12/manual/sql-building/bind-values/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.jooq.org/doc/3.12/manual/sql-building/sql-parser/sql-parser-grammar/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.jooq.org/2020/03/05/using-java-13-text-blocks-for-plain-sql-with-jooq/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.oracle.com/cd/E13157_01/wlevs/docs30/jdbc_drivers/sqlescape.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.spring.io/spring-framework/docs/6.0.x/reference/html/data-access.html",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SelectPlain</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// 其中的 {0}是，0-base的，直接字符串替换的。使用不当会构成sql注入</span>
<span class="token class-name">Field</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> count <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Field</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> string <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;replace(substr(quote(zeroblob(({0} + 1) / 2)), 3, {0}), &#39;0&#39;, {1})&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                                     ^                  ^          ^                   ^^^^^  ^^^^^^</span>
<span class="token comment">//                                     |                  |          |                     |       |</span>
<span class="token comment">// argument &quot;count&quot; is repeated twice: \\------------------+----------|---------------------/       |</span>
<span class="token comment">// argument &quot;string&quot; is used only once:                              \\-----------------------------/</span>

<span class="token comment">// Plain SQL using bind values. The value 5 is bound to the first variable, &quot;Animal Farm&quot; to the second variable:</span>
create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>
    <span class="token string">&quot;BOOK.ID = ? AND TITLE = ?&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// The SQL string containing bind value placeholders (&quot;?&quot;) </span>
    <span class="token number">5</span><span class="token punctuation">,</span>                               <span class="token comment">// The bind value at index 1</span>
    <span class="token string">&quot;Animal Farm&quot;</span>                    <span class="token comment">// The bind value at index 2</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Plain SQL using embeddable QueryPart placeholders (counting from zero).</span>
<span class="token comment">// The QueryPart &quot;index&quot; is substituted for the placeholder {0}, the QueryPart &quot;title&quot; for {1}</span>
<span class="token class-name">Field</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> id   <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Field</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> title <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token string">&quot;Animal Farm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>
    <span class="token string">&quot;BOOK.ID = {0} AND TITLE = {1}&quot;</span><span class="token punctuation">,</span> <span class="token comment">// The SQL string containing QueryPart placeholders (&quot;{N}&quot;)</span>
    id<span class="token punctuation">,</span>                              <span class="token comment">// The QueryPart at index 0</span>
    title                            <span class="token comment">// The QueryPart at index 1</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 模板中支持，java和sql注释，placeholder和variable-binding</span>
<span class="token function">query</span><span class="token punctuation">(</span>
  <span class="token string">&quot;SELECT /* In a comment, this is not a placeholder: {0}. And this is not a bind variable: ? */ title AS \`title {1} ?\` &quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;-- Another comment without placeholders: {2} nor bind variables: ?&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;FROM book &quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;WHERE title = &#39;In a string literal, this is not a placeholder: {3}. And this is not a bind variable: ?&#39;&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Plain SQL templating specification Templating with QueryPart placeholders (or bind value placeholders) requires a simple parsing logic to be applied to SQL strings. The jOOQ template parser behaves according to the following rules:</p><ul><li><p>Single-line comments (starting with <code>--</code> in all databases (or #) in MySQL) are rendered without modification. Any bind variable or QueryPart placeholders in such comments are ignored.</p></li><li><p>Multi-line comments (starting with <code>/*</code> and ending with <code>*/</code> in all databases) are rendered without modification. Any bind variable or QueryPart placeholders in such comments are ignored.</p></li><li><p>String literals (starting and ending with <code>&#39;</code> in all databases, where all databases support escaping of the quote character by duplication as such: <code>&#39;&#39;</code>, or in MySQL by escaping as such: <code>\\&#39;</code> (if Settings.backslashEscaping is turned on)) are rendered without modification. Any bind variable or QueryPart placeholders in such comments are ignored.</p></li><li><p>Quoted names (starting and ending with <code>&quot;</code> in most databases, with \` in MySQL, or with <code>[</code> and <code>]</code> in T-SQL databases) are rendered without modification. Any bind variable or QueryPart placeholders in such comments are ignored.</p></li><li><p>JDBC escape syntax (<code>{fn ...}</code>, <code>{d ...}</code>, <code>{t ...}</code>, <code>{ts ...}</code>) is rendered without modification. Any bind variable or QueryPart placeholders in such comments are ignored.</p></li><li><p>Bind variable placeholders (? or :name for named bind variables) are replaced by the matching bind value in case inlining is activated, e.g. through Settings.statementType == STATIC_STATEMENT.</p></li><li><p>QueryPart placeholders (<code>{number}</code>) are replaced by the matching QueryPart.</p></li><li><p>Keywords (<code>{identifier}</code>) are treated like keywords and rendered in the correct case according to Settings.renderKeywordStyle.</p></li></ul><h2 id="_2f-02-如何禁用jooq功能" tabindex="-1"><a class="header-anchor" href="#_2f-02-如何禁用jooq功能" aria-hidden="true">#</a> 2F.02.如何禁用Jooq功能</h2><p>禁用jooq没有任何影响，不影响flywave，lightid，enum, i18n的使用。</p><p>运行时禁用，设置 <code>wings.enabled.pro.fessional.wings.faceless.spring.conf.FacelessJooqAutoConfiguration=false</code> 但如果有jooq自动生成的代码，是带有<code>@Repository</code>，需要禁止spring注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> 
<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">WingsJooqDaoImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2f-03-常见的jooq查询操作" tabindex="-1"><a class="header-anchor" href="#_2f-03-常见的jooq查询操作" aria-hidden="true">#</a> 2F.03.常见的jooq查询操作</h2>`,8),y={href:"https://www.jooq.org/doc/latest/manual/sql-execution/fetching/",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"pro.fessional.wings.faceless.sample",-1),S=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SelectFetch</span> <span class="token punctuation">{</span>
<span class="token comment">// Fetching only book titles (the two calls are equivalent):</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> titles1 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> titles2 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     titles3 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Fetching only book IDs, converted to Long</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids1 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids2 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     ids3 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Fetching book IDs and mapping each ID to their records or titles</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">BookRecord</span><span class="token punctuation">&gt;</span></span> map1 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intoMap</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">BookRecord</span><span class="token punctuation">&gt;</span></span> map2 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchMap</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>     map3 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intoMap</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>     map4 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchMap</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Group by AUTHOR_ID and list all books written by any author:</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&lt;</span><span class="token class-name">BookRecord</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> group1 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intoGroups</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&lt;</span><span class="token class-name">BookRecord</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> group2 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchGroups</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>       group3 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intoGroups</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">,</span> <span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>       group4 <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchGroups</span><span class="token punctuation">(</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">,</span> <span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2f-04-分页查询jooq" tabindex="-1"><a class="header-anchor" href="#_2f-04-分页查询jooq" aria-hidden="true">#</a> 2F.04.分页查询jooq</h2><p>分页查询中，count结果根据需要，可以进行缓存，或业务侧不要求必须精确，这样可以避免每次执行。 通过WingsPageHelper工具类，可以构造2类分页查询，count+select 和 wrap select，参考</p>`,3),L=n("li",null,"JooqMostSelectSample #test6PageJooq, #test7PageJdbc",-1),Q={href:"https://blog.jooq.org/2019/09/19/whats-faster-count-or-count1/",target:"_blank",rel:"noopener noreferrer"},x=e('<p>在SpringMvc的<code>@RequestMapping</code>中构建<code>PageQuery</code>，可以把<code>@ModelAttribute</code>放在参数上，</p><ul><li>pageNumber，大于等于1的整数</li><li>pageSize，大于等于1的整数</li><li>sortBy，字符串</li></ul><p>参考Spring的<code>Pageable</code>和SQL的 order by，以下参数是效果相同的</p><ul><li>PageQuery - page=100&amp;page=3&amp;sortBy=id,-name</li><li>Pageable - size=100&amp;page=3&amp;sort=id,asc&amp;sort=name,desc</li><li>SQL - order by id asc, name desc</li></ul><h2 id="_2f-05-如何转换sql语法" tabindex="-1"><a class="header-anchor" href="#_2f-05-如何转换sql语法" aria-hidden="true">#</a> 2F.05.如何转换sql语法</h2>',5),B={href:"https://www.jooq.org/translate/",target:"_blank",rel:"noopener noreferrer"},I=n("li",null,"sql到jooq，可以使用any2dto插件，做了简单的select语法映射",-1),E=n("li",null,"jooq到sql，调用toSql方法，或开启debug，在日志中查看",-1),F=n("h2",{id:"_2f-06-tinyint映射boolean-byte-integer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-06-tinyint映射boolean-byte-integer","aria-hidden":"true"},"#"),s(" 2F.06.TINYINT映射Boolean,Byte,Integer")],-1),A=n("li",null,"在mysql中TINYINT是1byte空间，范围是-128到127，在jooq中，默认映射为Byte类型",-1),D={href:"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-type-conversions.html",target:"_blank",rel:"noopener noreferrer"},K=n("li",null,"而在jooq-codegen-faceless.xml中，TINYINT(1)为Boolean，其他为Integer",-1),M=e(`<p>若要调整，可以WingsCodeGenerator.forcedType()</p><h2 id="_2f-07-枚举类的映射" tabindex="-1"><a class="header-anchor" href="#_2f-07-枚举类的映射" aria-hidden="true">#</a> 2F.07.枚举类的映射</h2><p>在wings实践中，以强类型为基础，因此数据库中的类别类型，通常在service层使用<code>enum</code>类。 在jooq中，可以通过forcedType，使用converter自动映射类型，在MapStruct中也可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每个表，每个字段映射，变更数据类型</span>
<span class="token punctuation">.</span><span class="token function">forcedType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ForcedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withUserType</span><span class="token punctuation">(</span><span class="token string">&quot;pro.fessional.wings.faceless.enums.autogen.StandardLanguage&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withConverter</span><span class="token punctuation">(</span><span class="token string">&quot;pro.fessional.wings.faceless.database.jooq.StandardLanguageConverter&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withExpression</span><span class="token punctuation">(</span><span class="token string">&quot;tst_sharding.language&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但对于某些情况，并不能在code generate时做类型转换，全局或局部的ConverterProvider。 可以使用wings的配置约定，声明ConverterProvider或Converter的bean，即可完成全局注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 单select，局部类型转换</span>
<span class="token class-name">DataType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StandardLanguage</span><span class="token punctuation">&gt;</span></span> lang <span class="token operator">=</span> <span class="token class-name">SQLDataType</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">.</span><span class="token function">asConvertedDataType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardLanguageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dao<span class="token punctuation">.</span><span class="token function">ctx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>Id</span><span class="token punctuation">,</span> <span class="token constant">DSL</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>Language</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lang<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Record22EnumDto</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">&quot;languageConverter&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token class-name">StandardLanguage</span> <span class="token function">int2Enum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ConstantEnumUtil</span><span class="token punctuation">.</span><span class="token function">idOrNull</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">StandardLanguage</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),P={href:"https://blog.jooq.org/tag/converter/",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"_2f-08-h2database的兼容性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-08-h2database的兼容性","aria-hidden":"true"},"#"),s(" 2F.08.H2Database的兼容性")],-1),N=n("ul",null,[n("li",null,"手动指定 spring.jooq.sql-dialect=mysql"),n("li",null,"数据库指定 jdbc:h2:~/studies;MODE=MySQL")],-1),R=n("h2",{id:"_2f-09-oss版jooq的授权和注意点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-09-oss版jooq的授权和注意点","aria-hidden":"true"},"#"),s(" 2F.09.OSS版Jooq的授权和注意点")],-1),J={href:"https://www.jooq.org/download/",target:"_blank",rel:"noopener noreferrer"},G=n("blockquote",null,[n("p",null,"You can use the jOOQ Open Source Edition for anything you like, including for MySQL 5.7. There are no legal limitations to such usage, as it is all ASL 2.0 licensed. However, unlike the jOOQ Professional Edition, we do not integration test that edition with MySQL 5.7, so there are likely limitations that you will run into.")],-1),U=n("p",null,[s("以MySql为例，OSS版仅提供了最新版(8.0)的Dialect，而商业版提供了5.6, 5.7, 8.0三个版本。 而8.0的Dialect对于5.7存在一定的向后兼容，比如"),n("code",null,"FROM DUAL"),s("移除。详见一下issue")],-1),H={href:"https://github.com/jOOQ/jOOQ/issues/7421",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/jOOQ/jOOQ/issues/11827",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.jooq.org/legal/licensing",target:"_blank",rel:"noopener noreferrer"},z=n("ul",null,[n("li",null,"One for every developer workstation which is used to write jOOQ code."),n("li",null,"only charge for developer workstations, not server workstations."),n("li",null,"This does not affect your build, test, and production servers, however, which will be licensed for free forever, in any price plan.")],-1),W=n("h2",{id:"_2f-10-jooq的性能及线程安全",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2f-10-jooq的性能及线程安全","aria-hidden":"true"},"#"),s(" 2F.10.Jooq的性能及线程安全")],-1),X=n("p",null,"jOOQ's overhead compared to plain JDBC is typically less than 1ms per query. 以上与纯JDBC对比，而任何SqlMapping都具有动态性，离不开字符串解析和拼接，反射构造等损耗，估相差不大。",-1),Z=n("li",null,"Configuration 初始化后就不要动了。",-1),$=n("li",null,"DSLContext 在spring中Autowired和Dao中获取都可安全使用。",-1),nn={href:"https://www.jooq.org/doc/3.14/manual/sql-execution/performance-considerations/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://www.jooq.org/doc/3.14/manual/sql-building/dsl-context/thread-safety/",target:"_blank",rel:"noopener noreferrer"},an=e('<h2 id="_2f-11-jooq-3-16的jakarta-ee-9" tabindex="-1"><a class="header-anchor" href="#_2f-11-jooq-3-16的jakarta-ee-9" aria-hidden="true">#</a> 2F.11.Jooq 3.16的Jakarta EE 9+</h2><blockquote><p>@lukaseder commented on Dec 9, 2019 The Java EE <code>javax.*</code> namespace has not been donated to Jakarta EE</p></blockquote><p>以上原因，jooq先行以<code>jakarta.*</code>取代了<code>javax.*</code>，其与springboot的不兼容。 springboot 可能在3.0中停止支持jooq，摘要如下，详情看issue链接。</p><blockquote><p>@wilkinsona commented on Dec 1, 2021 Spring Boot 2.x is stuck on jOOQ 3.14 by default due to 3.15&#39;s move to Java 11 by default.</p><p>For Boot 2.x users that want to upgrade jOOQ&#39;s version, switching to the <code>jakarta.xml.bind.*</code> classes may cause problems if other parts of their app use <code>javax.xml.bind.*</code>. This is compounded by the fact that the jakarta.xml.bind:jakarta.xml.bind-api coordinates can provide either the <code>jakarta.*</code> classes or the <code>javax.xml.bind.*</code> classes depending on theversion you use. This makes it hard to have both on the classpath if that&#39;s something you can tolerate.</p></blockquote>',4),tn={href:"https://github.com/jOOQ/jOOQ/issues/9641",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/spring-projects/spring-boot/issues/28821",target:"_blank",rel:"noopener noreferrer"},on=e(`<h2 id="_2f-12-jooq-group-concat" tabindex="-1"><a class="header-anchor" href="#_2f-12-jooq-group-concat" aria-hidden="true">#</a> 2F.12.Jooq group_concat</h2><p>当使用mysql的group_concat时，若出现以下错误，</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to yourMySQL server version for the right syntax to use near &#39;set @@group_concat_max_len = 4294967295;</p></blockquote><p>是因为jooq在render时，会增加session级的变量设置，以避免超长，SQL大概如下，</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token variable">@T</span> <span class="token operator">=</span> @<span class="token variable">@GROUP_CONCAT_MAX_LEN</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> @<span class="token variable">@GROUP_CONCAT_MAX_LEN</span> <span class="token operator">=</span> <span class="token number">4294967295</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>TITLE SEPARATOR <span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> BOOK<span class="token punctuation">;</span>
<span class="token keyword">SET</span> @<span class="token variable">@GROUP_CONCAT_MAX_LEN</span> <span class="token operator">=</span> <span class="token variable">@T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>wings默认通过spring.wings.faceless.jooq.enabled.render-group-concat=false 关闭了次功能， 因为在推荐的mysqld配置中，以进行了global的设置。</p><p>千万不可使用 jdbc:mysql://localhost/test?allowMultiQueries=true，会有sql注入风险。 若不能设置mysql服务器变量，可使用 DataSourceInitializer 在获取Connection时设置。</p>`,7),pn={href:"https://github.com/jOOQ/jOOQ/issues/12092",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://www.jooq.org/doc/3.17/manual/sql-building/dsl-context/custom-settings/settings-group-concat/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://blog.jooq.org/mysqls-allowmultiqueries-flag-with-jdbc-and-jooq/",target:"_blank",rel:"noopener noreferrer"};function un(rn,dn){const t=o("ExternalLinkIcon"),p=o("Badge");return l(),i("div",null,[d,k,m,h,n("ul",null,[n("li",null,[n("a",g,[s("https://www.jooq.org/doc/3.12/manual/sql-building/plain-sql/"),a(t)])]),n("li",null,[n("a",v,[s("https://www.jooq.org/doc/3.12/manual/sql-building/plain-sql-templating/"),a(t)])]),n("li",null,[n("a",b,[s("https://www.jooq.org/doc/3.12/manual/sql-building/queryparts/plain-sql-queryparts/"),a(t)])]),n("li",null,[n("a",f,[s("https://www.jooq.org/doc/3.12/manual/sql-building/bind-values/"),a(t)])]),n("li",null,[n("a",q,[s("https://www.jooq.org/doc/3.12/manual/sql-building/sql-parser/sql-parser-grammar/"),a(t)])]),n("li",null,[n("a",_,[s("https://blog.jooq.org/2020/03/05/using-java-13-text-blocks-for-plain-sql-with-jooq/"),a(t)])]),n("li",null,[n("a",w,[s("https://docs.oracle.com/cd/E13157_01/wlevs/docs30/jdbc_drivers/sqlescape.html"),a(t)])]),n("li",null,[n("a",O,[s("https://docs.spring.io/spring-framework/docs/6.0.x/reference/html/data-access.html"),a(t)])])]),j,n("p",null,[s("更多信息，参考"),n("a",y,[s("官方文档"),a(t)]),s(" 和sample代码"),T]),n("p",null,[s("在wings中，"),a(p,{type:"tip",vertical:"top"},{default:u(()=>[s("推荐")]),_:1}),s("使用Dao做各种查询，避免使用静态表或注入DSL。")]),S,n("ul",null,[L,n("li",null,[n("a",Q,[s("count(*)和count(1)谁快"),a(t)])])]),x,n("ul",null,[n("li",null,[s("sql到sql，不同语法间转换，"),n("a",B,[s("https://www.jooq.org/translate/"),a(t)]),s(" (需要翻墙)")]),I,E]),F,n("ul",null,[A,n("li",null,[s("在"),n("a",D,[s("jdbc文档"),a(t)]),s(" 中其类型是Boolean，Integer")]),K]),M,n("p",null,[n("a",P,[s("https://blog.jooq.org/tag/converter/"),a(t)])]),C,N,R,n("p",null,[s("Jooq有"),n("a",J,[s("开源版和商业版"),a(t)]),s("，两者的区别在于功能多寡和强弱上。 如 Lukas Eder – Founder and CEO 在邮件中回复到，")]),G,U,n("ul",null,[n("li",null,[n("a",H,[s("https://github.com/jOOQ/jOOQ/issues/7421"),a(t)])]),n("li",null,[n("a",V,[s("https://github.com/jOOQ/jOOQ/issues/11827"),a(t)])])]),n("p",null,[s("因此，若开发中存在兼容问题，或需要更多功能或便利，推荐使用商业授权，从"),n("a",Y,[s("FAQ: Commercial Licensing"),a(t)]),s(" 中可见（本人仅做FAQ的部分节选，不对其正确性负任何责任）")]),z,W,X,n("ul",null,[Z,$,n("li",null,[n("a",nn,[s("https://www.jooq.org/doc/3.14/manual/sql-execution/performance-considerations/"),a(t)])]),n("li",null,[n("a",sn,[s("https://www.jooq.org/doc/3.14/manual/sql-building/dsl-context/thread-safety/"),a(t)])])]),an,n("ul",null,[n("li",null,[n("a",tn,[s("https://github.com/jOOQ/jOOQ/issues/9641"),a(t)])]),n("li",null,[n("a",en,[s("https://github.com/spring-projects/spring-boot/issues/28821"),a(t)])])]),on,n("ul",null,[n("li",null,[n("a",pn,[s("https://github.com/jOOQ/jOOQ/issues/12092"),a(t)])]),n("li",null,[n("a",cn,[s("https://www.jooq.org/doc/3.17/manual/sql-building/dsl-context/custom-settings/settings-group-concat/"),a(t)])]),n("li",null,[n("a",ln,[s("https://blog.jooq.org/mysqls-allowmultiqueries-flag-with-jdbc-and-jooq/"),a(t)])])])])}const hn=c(r,[["render",un],["__file","2f-qa-jooq.html.vue"]]);export{hn as default};
