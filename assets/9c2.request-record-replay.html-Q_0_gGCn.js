import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-CCOA2OJI.js";const l={};function r(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_9c2-记录和重放请求" tabindex="-1"><a class="header-anchor" href="#_9c2-记录和重放请求"><span>9C2.记录和重放请求</span></a></h1><p>在正式环境下，需求对某些http请求进行记录和重放。 简单易行的策略有，Nginx的mirror复制到GoReplay或wiremock。</p><p>参考资料如下，本手册以mirror微信请求到mocklab云服务和Gor本地服务为例</p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_mirror_module.html" target="_blank" rel="noopener noreferrer">Nginx/mirror</a></li><li><a href="https://wiremock.org/" target="_blank" rel="noopener noreferrer">wiremock/mocklab</a></li><li><a href="https://github.com/buger/goreplay/wiki" target="_blank" rel="noopener noreferrer">GoReplay/Gor</a></li></ul><h2 id="_9c2-1-mocklab服务" tabindex="-1"><a class="header-anchor" href="#_9c2-1-mocklab服务"><span>9C2.1.mocklab服务</span></a></h2><p>使用github申请free账号，获得Mock APIs的URL和Token，如 Settings/Usage examples中的curl例子中有相应字段，如下特征，</p><ul><li><a href="https://xxxx.mocklab.io/" target="_blank" rel="noopener noreferrer">https://xxxx.mocklab.io/</a></li><li>Token 14ef56fxxxx24fba5</li></ul><p>最后，可以在 Request Log 中获得所有请求，并Convert to stub以便测试使用。</p><h2 id="_9c2-2-gor本地服务" tabindex="-1"><a class="header-anchor" href="#_9c2-2-gor本地服务"><span>9C2.2.gor本地服务</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/buger/goreplay/releases/download/1.3.3/gor_1.3.3_x64.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xzf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gor_1.3.3_x64.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 开启并监听 18081，若是attach到其他服务端口，则不需要http-pprof</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gor.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;EOF&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gor_file=weixin-%Y%m%d.gor</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cur_file=$(date +$gor_file)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test -f &quot;$cur_file&quot; &amp;&amp; mv $cur_file $cur_file.$(date +%H%M%S)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./gor --http-pprof :18081 \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">--input-raw :18081 \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">--output-file $gor_file \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">--output-file-append</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gor.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./gor.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://127.0.0.1:18081/debug/pprof/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，gor 2.0目前还在rc阶段，1.3实测中存在一些问题，比如保存文件时 <a href="https://github.com/buger/goreplay/blob/master/output_file.go" target="_blank" rel="noopener noreferrer">https://github.com/buger/goreplay/blob/master/output_file.go</a></p><ul><li>output-file-append无效，重启gor时会覆盖gor文件，需要注意备份</li><li>output-file 不会自动flush，只能buff满或关闭gor</li><li>若需要实时观测，建议使用 output-stdout</li></ul><h2 id="_9c2-3-nginx的mirror" tabindex="-1"><a class="header-anchor" href="#_9c2-3-nginx的mirror"><span>9C2.3.nginx的mirror</span></a></h2><blockquote><p>The ngx_http_mirror_module module (1.13.4) implements mirroring of an original request by creating background mirror subrequests. Responses to mirror subrequests are ignored.</p></blockquote><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /weixin/gateway.api {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    mirror </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/__mirror_mock;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    mirror </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/__mirror_gor;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://xxxx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/__mirror_mock </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    resolver </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8.8.8.8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://xxx.mocklab.io$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Authorization </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Token 14exxxxxxxba5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Forwarded-Host $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/__mirror_gor </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1:18081$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Forwarded-Host $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9c2-4-使用建议" tabindex="-1"><a class="header-anchor" href="#_9c2-4-使用建议"><span>9C2.4.使用建议</span></a></h2><p>gor和mocklab设置其一即可，根据情况取舍，dev环境建议mocklab，便于生成test。</p><p>若mirror没有转发，可观测nginx error日志，上例中的<code>resolver 8.8.8.8</code>解决以下问题，</p><p>no resolver defined to resolve xxx.mocklab.io, request: &quot;POST ...&quot;</p>`,19)]))}const k=s(l,[["render",r],["__file","9c2.request-record-replay.html.vue"]]),o=JSON.parse('{"path":"/zh/9-example/9c.server-manual/9c2.request-record-replay.html","title":"9C2.记录和重放请求","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"fab fa-dev","category":["实战","copy"],"description":"9C2.记录和重放请求 在正式环境下，需求对某些http请求进行记录和重放。 简单易行的策略有，Nginx的mirror复制到GoReplay或wiremock。 参考资料如下，本手册以mirror微信请求到mocklab云服务和Gor本地服务为例 Nginx/mirror wiremock/mocklab GoReplay/Gor 9C2.1.moc...","GIT_REPO_HEAD":"2025-02-06 a8fb043a36c51604d1078076241b71fc4a4529a1","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/9-example/9c.server-manual/9c2.request-record-replay.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/9-example/9c.server-manual/9c2.request-record-replay.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"9C2.记录和重放请求"}],["meta",{"property":"og:description","content":"9C2.记录和重放请求 在正式环境下，需求对某些http请求进行记录和重放。 简单易行的策略有，Nginx的mirror复制到GoReplay或wiremock。 参考资料如下，本手册以mirror微信请求到mocklab云服务和Gor本地服务为例 Nginx/mirror wiremock/mocklab GoReplay/Gor 9C2.1.moc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9C2.记录和重放请求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"9C2.1.mocklab服务","slug":"_9c2-1-mocklab服务","link":"#_9c2-1-mocklab服务","children":[]},{"level":2,"title":"9C2.2.gor本地服务","slug":"_9c2-2-gor本地服务","link":"#_9c2-2-gor本地服务","children":[]},{"level":2,"title":"9C2.3.nginx的mirror","slug":"_9c2-3-nginx的mirror","link":"#_9c2-3-nginx的mirror","children":[]},{"level":2,"title":"9C2.4.使用建议","slug":"_9c2-4-使用建议","link":"#_9c2-4-使用建议","children":[]}],"git":{"createdTime":1656137116000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":9,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":1.53,"words":458},"filePathRelative":"zh/9-example/9c.server-manual/9c2.request-record-replay.md","localizedDate":"2022年6月25日","autoDesc":true}');export{k as comp,o as data};
