import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as t,c as r,b as e,e as a,d as n,f as i}from"./app-CiSIZGf5.js";const c={},d=i(`<h1 id="_9c4-use-docker-starter-sh" tabindex="-1"><a class="header-anchor" href="#_9c4-use-docker-starter-sh"><span>9C4.Use Docker/Starter.sh</span></a></h1><p>Wings provides two ways to publish and start the app.</p><ul><li>script - shell-based publishing and management</li><li>docker - docker-based publishing and management</li></ul><h2 id="_9c4-1-script-way" tabindex="-1"><a class="header-anchor" href="#_9c4-1-script-way"><span>9C4.1.Script Way</span></a></h2><ul><li>release.sh - script to pull, package and push</li><li>starter.sh - script to start, stop and monitor</li></ul><p>The scripts support the <code>&lt;same-name&gt;.env</code> to override the default config.</p><h3 id="_1a-release-sh" tabindex="-1"><a class="header-anchor" href="#_1a-release-sh"><span>1a.release.sh</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## soft link script with app name</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> wings-release.sh winx-admin.sh
<span class="token comment">## create the same name env file</span>
<span class="token function">vi</span> winx-admin.env
<span class="token comment">## pull source code from git</span>
./winx-admin.sh pull
<span class="token comment">## build by mvn or web pack</span>
./winx-admin.sh pack
<span class="token comment">## push the result to app server</span>
./winx-admin.sh push
<span class="token comment">## for more help</span>
./winx-admin.sh <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1b-starter-sh" tabindex="-1"><a class="header-anchor" href="#_1b-starter-sh"><span>1b.starter.sh</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## soft link script with app name</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> wings-starter.sh winx-admin.sh
<span class="token comment">## create the same name env file</span>
<span class="token function">vi</span> winx-admin.env
<span class="token comment">## safely start</span>
./winx-admin.sh start
<span class="token comment">## check status</span>
./winx-admin.sh status
<span class="token comment">## safely stop</span>
./winx-admin.sh stop
<span class="token comment">## for more help</span>
./winx-admin.sh <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9c4-2-docker-way" tabindex="-1"><a class="header-anchor" href="#_9c4-2-docker-way"><span>9C4.2.Docker Way</span></a></h2><p>Docker management is simple and consistent without relying on env and conf of host. The following features/libs are optional and can be removed before building.</p><ul><li><code>spring-boot-devtools-*.jar</code></li><li><code>spring-boot-docker-compose-*.jar</code></li><li><code>spring-boot-admin-*.jar</code></li><li>spring <code>-actuator*</code></li></ul><h3 id="_2a-layered-build" tabindex="-1"><a class="header-anchor" href="#_2a-layered-build"><span>2a. Layered Build</span></a></h3><p>SpringBoot project after repackage, usually be about 100+M, and the libs more than 95+%. Therefore, in practice, docker is splited into 2 layers, <code>dep</code> and <code>app</code>.</p><ul><li>docker-dep - all <code>*.jar</code> exlude <code>*-SNAPSHOT.jar</code></li><li>docker-app - <code>*-SNAPSHOT.jar</code> and project files (<code>classes/</code>,<code>resources/</code>)</li></ul><p>Equivalent to <code>java -Djarmode=layertools -jar target/*.jar extract</code>,</p><ul><li>dependencies - docker-dep</li><li>spring-boot-loader - ignored, main-class starts faster then JarLauncher</li><li>snapshot-dependencies - docker-app</li><li>application - docker-app</li></ul><p>This way, <code>docker-dep</code> compiles once and <code>docker-app</code> compiles every time with a small size.</p><h3 id="_2b-build-practices" tabindex="-1"><a class="header-anchor" href="#_2b-build-practices"><span>2b.Build Practices</span></a></h3><p>In order to build Docker, there are roughly three practices,</p><ul><li>docker.sh - Dockerfile based builds, more flexible</li><li>jib maven - OCI format, no Dockerfile, optional docker</li><li>buildpack maven - OCI format, no Dockerfile, requires docker</li></ul><h3 id="_2c-docker-sh-build" tabindex="-1"><a class="header-anchor" href="#_2c-docker-sh-build"><span>2c.docker.sh Build</span></a></h3><p>Use <code>wings-docker.sh</code>, keep springboot structure, start it with JarLauncher.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## spring repackage to fatjar</span>
mvn clean package
<span class="token comment">## unzip fatjar and build docker-dep</span>
wings-docker.sh <span class="token function">unzip</span> dep target/winx-admin-3.2.110-SNAPSHOT.jar
wings-docker.sh build dep target/winx-admin-3.2.110-SNAPSHOT.jar
<span class="token comment">## build docker-app from docker-dep</span>
wings-docker.sh <span class="token function">unzip</span> app target/winx-admin-3.2.110-SNAPSHOT.jar
wings-docker.sh build app target/winx-admin-3.2.110-SNAPSHOT.jar
<span class="token comment">## build docker-all in one step</span>
wings-docker.sh build all target/winx-admin-3.2.110-SNAPSHOT.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After build, the layout of <code>/app/</code> in docker is as follows,</p><ul><li><code>BOOT-INF/{classes,lib,...}</code> - code and deps</li><li><code>META-INF/{services,spring.components,...}</code> - Conf and Prop</li><li><code>org</code> - Spring JarLauncher</li><li><code>{conf,data,logs}</code> - VOLUME</li></ul><p>The springboot repackage is optimized for libs, for example</p><ul><li>Remove <code>spring-boot-autoconfigure-processor.jar</code><ul><li>gen spring-autoconfigure-metadata.properties when compile</li></ul></li><li>Remove <code>spring-boot-configuration-processor.jar</code><ul><li>gen spring-configuration-metadata.json when compile</li></ul></li><li>Remove <code>spring-boot-starter-*.jar</code><ul><li>empty package as springboot convention</li></ul></li><li>Add <code>spring-boot-jarmode-layertools.jar</code><ul><li>to unpack by <code>java -Djarmode=layertools</code></li></ul></li></ul><h3 id="_2d-docker-start" tabindex="-1"><a class="header-anchor" href="#_2d-docker-start"><span>2d.docker Start</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## bridge network</span>
<span class="token assign-left variable">WINGS_DOCKER_NET</span><span class="token operator">=</span>wings-app
<span class="token comment">## create directory and config</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token punctuation">{</span>data,conf,logs<span class="token punctuation">}</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span> conf/application.properties <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;
## mysql host
winx.database.host=host.docker.internal:51487
## boot admin host
spring.boot.admin.client.url=http://host.docker.internal:8093
## jdbc debug
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
EOF</span>
<span class="token comment">## docker options</span>
<span class="token assign-left variable">WINGS_DOCKER_OPTS</span><span class="token operator">=</span><span class="token punctuation">(</span>--network <span class="token variable">$WINGS_DOCKER_NET</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-v</span> ./data:/app/data <span class="token parameter variable">-v</span> ./conf:/app/conf <span class="token parameter variable">-v</span> ./logs:/app/logs <span class="token parameter variable">-p</span> <span class="token number">8091</span>:8080<span class="token punctuation">)</span>
<span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token variable">$WINGS_DOCKER_NET</span>
<span class="token comment">## run into docker</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token parameter variable">--user</span> root <span class="token parameter variable">--entrypoint</span> /bin/bash winx-admin:3.2.110-SNAPSHOT
<span class="token comment">## start springboot app</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> winx-admin:3.2.110-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above script takes <code>winx-admin</code> as an example and changes <code>8091</code> to <code>8093</code> if <code>winx-devops</code>. After starting the admin and devops docker containers separately, the following URLs can be accessed to test</p>`,32),p={href:"http://localhost:8091/swagger-ui/index.html",target:"_blank",rel:"noopener noreferrer"},u={href:"http://localhost:8093/login",target:"_blank",rel:"noopener noreferrer"},m=e("ul",null,[e("li",null,[a("The user is "),e("code",null,"boot-admin-server")]),e("li",null,[a("Password is "),e("code",null,"$DING_TALK_TOKEN"),a(",")]),e("li",null,[a("or "),e("code",null,"!!!YOU_MUST_USE_STRONG_PASSWORD_HERE!!!")])],-1),b=e("h3",{id:"_2e-jib-build-oci",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2e-jib-build-oci"},[e("span",null,"2e.Jib Build OCI")])],-1),k={href:"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart",target:"_blank",rel:"noopener noreferrer"},v=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## mvn compile the devops</span>
mvn clean <span class="token function">install</span>
<span class="token comment">## use docker daemon</span>
mvn -P<span class="token string">&#39;docker,docker-dep&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/
mvn -P<span class="token string">&#39;docker,docker-app&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/ <span class="token parameter variable">-Ddocker.from.prefix</span><span class="token operator">=</span>docker://fessional/
<span class="token comment">#mvn -P&#39;docker,docker-app&#39; jib:build -Ddocker.to.prefix=fessional/ -Ddocker.from.prefix=fessional/</span>
<span class="token comment">## use docker registry</span>
mvn -P<span class="token string">&#39;docker,docker-dep&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>docker.io/fessional/
mvn -P<span class="token string">&#39;docker,docker-app&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>docker.io/fessional/ <span class="token parameter variable">-Ddocker.from.prefix</span><span class="token operator">=</span>docker.io/fessional/
<span class="token comment">## build docker-all in one step</span>
mvn -P<span class="token string">&#39;docker&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, the two build methods differ in the following ways.</p><ul><li><code>jib:dockerBuild</code> - depends on Docker</li><li><code>jib:build</code> - no Docker required, pushes to docker hub by default.</li></ul><p>After build, the layout of <code>/app/</code> in docker is as follows,</p><ul><li><code>{classes,libs}</code> - code and deps</li><li><code>resources/META-INF/spring.components</code> - conf and prop</li><li><code>jib-classpath-file</code> - java classpath</li><li><code>jib-main-class-file</code> - java main</li><li><code>{conf,data,logs}</code> - VOLUME</li></ul><h3 id="_2f-jib-start" tabindex="-1"><a class="header-anchor" href="#_2f-jib-start"><span>2f.Jib Start</span></a></h3><p>Same as docker startup, but with <code>professional</code> prefix to diff.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## docker options</span>
<span class="token assign-left variable">WINGS_DOCKER_OPTS</span><span class="token operator">=</span><span class="token punctuation">(</span>--network <span class="token variable">$WINGS_DOCKER_NET</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-v</span> ./data:/app/data <span class="token parameter variable">-v</span> ./conf:/app/conf <span class="token parameter variable">-v</span> ./logs:/app/logs <span class="token parameter variable">-p</span> <span class="token number">8093</span>:8080<span class="token punctuation">)</span>
<span class="token comment">## run into docker</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token parameter variable">--user</span> root <span class="token parameter variable">--entrypoint</span> /bin/bash fessional/winx-devops:3.2.110-SNAPSHOT
<span class="token comment">## start springboot app</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> fessional/winx-devops:3.2.110-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2g-buildpack-build" tabindex="-1"><a class="header-anchor" href="#_2g-buildpack-build"><span>2g.buildpack Build</span></a></h3><p>It is necessary to customize the following properties of the CNB according to the actual needs of the project.</p><ul><li><code>builder</code> - default paketobuildpacks/builder-jammy-base:latest</li><li><code>runImage</code> - default unspecified</li><li><code>env</code> - build environment</li><li><code>buildpacks</code> - recommended customization</li></ul><p>The default build does not split into <code>dep</code> and <code>app</code>. it is only used as an example.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## mvn compile the devops</span>
mvn clean <span class="token function">install</span>
<span class="token comment">## use docker daemon</span>
mvn <span class="token parameter variable">-P</span> <span class="token string">&#39;image-paketo&#39;</span> spring-boot:build-image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After build, the layout of <code>/workspace/</code> (hard-code, how to change?) is same as fatjar,</p><ul><li><code>BOOT-INF/{classes,lib,...}</code> - code and deps</li><li><code>META-INF/{services,spring.components,...}</code> - Conf and Prop</li><li><code>org</code> - Spring JarLauncher</li><li><code>{conf,data,logs}</code> - VOLUME</li></ul>`,15);function h(g,f){const s=o("ExternalLinkIcon");return t(),r("div",null,[d,e("ul",null,[e("li",null,[a("admin swagger "),e("a",p,[a("http://localhost:8091/swagger-ui/index.html"),n(s)])]),e("li",null,[a("devops boot-admin "),e("a",u,[a("http://localhost:8093/login"),n(s)]),m])]),b,e("p",null,[e("a",k,[a("Jib"),n(s)]),a(" require docker optional, build OCI format by default")]),v])}const x=l(c,[["render",h],["__file","9c4.docker-starter.html.vue"]]),y=JSON.parse('{"path":"/9-example/9c.server-manual/9c4.docker-starter.html","title":"9C4.Use Docker/Starter.sh","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"shell","category":["Practice","Docker","Operation"],"description":"9C4.Use Docker/Starter.sh Wings provides two ways to publish and start the app. script - shell-based publishing and management docker - docker-based publishing and management 9C...","GIT_REPO_HEAD":"2024-05-29 52aa888e97c1eab5b33da6e559ac55010bcbf2fb","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/9-example/9c.server-manual/9c4.docker-starter.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/9-example/9c.server-manual/9c4.docker-starter.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"9C4.Use Docker/Starter.sh"}],["meta",{"property":"og:description","content":"9C4.Use Docker/Starter.sh Wings provides two ways to publish and start the app. script - shell-based publishing and management docker - docker-based publishing and management 9C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-02T07:47:24.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-03-02T07:47:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9C4.Use Docker/Starter.sh\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-02T07:47:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"9C4.1.Script Way","slug":"_9c4-1-script-way","link":"#_9c4-1-script-way","children":[{"level":3,"title":"1a.release.sh","slug":"_1a-release-sh","link":"#_1a-release-sh","children":[]},{"level":3,"title":"1b.starter.sh","slug":"_1b-starter-sh","link":"#_1b-starter-sh","children":[]}]},{"level":2,"title":"9C4.2.Docker Way","slug":"_9c4-2-docker-way","link":"#_9c4-2-docker-way","children":[{"level":3,"title":"2a. Layered Build","slug":"_2a-layered-build","link":"#_2a-layered-build","children":[]},{"level":3,"title":"2b.Build Practices","slug":"_2b-build-practices","link":"#_2b-build-practices","children":[]},{"level":3,"title":"2c.docker.sh Build","slug":"_2c-docker-sh-build","link":"#_2c-docker-sh-build","children":[]},{"level":3,"title":"2d.docker Start","slug":"_2d-docker-start","link":"#_2d-docker-start","children":[]},{"level":3,"title":"2e.Jib Build OCI","slug":"_2e-jib-build-oci","link":"#_2e-jib-build-oci","children":[]},{"level":3,"title":"2f.Jib Start","slug":"_2f-jib-start","link":"#_2f-jib-start","children":[]},{"level":3,"title":"2g.buildpack Build","slug":"_2g-buildpack-build","link":"#_2g-buildpack-build","children":[]}]}],"git":{"createdTime":1709342386000,"updatedTime":1709365644000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":2}]},"readingTime":{"minutes":3.24,"words":973},"filePathRelative":"9-example/9c.server-manual/9c4.docker-starter.md","localizedDate":"March 2, 2024","autoDesc":true}');export{x as comp,y as data};
