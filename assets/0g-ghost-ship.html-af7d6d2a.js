import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as n,c as h,b as e,e as a,d as t,w as r,f as s}from"./app-6c801206.js";const c={},l=s('<h1 id="_0g-幽灵船模型" tabindex="-1"><a class="header-anchor" href="#_0g-幽灵船模型" aria-hidden="true">#</a> 0G.幽灵船模型</h1><p>WingsBoot体系的基本架构思路是，纵向做模型，横向贴功能。 曾用代号【邮轮模型】，后在Dota系，改为GhostShip，更wings一点。</p><h2 id="_0g-1-上船下海-gosea" tabindex="-1"><a class="header-anchor" href="#_0g-1-上船下海-gosea" aria-hidden="true">#</a> 0G.1.上船下海 GoSea</h2><p>俗话说，<code>Go And Sea</code>，<code>Let&#39;s Me See Sea</code></p><p>在我所知的创业实践中，几乎什么都是短缺的，一切都是不确定的。 整个团队都在一条船上，要在海上生存和探寻，防止迷失和沉船。</p><h2 id="_0g-2-纵向模型-floor" tabindex="-1"><a class="header-anchor" href="#_0g-2-纵向模型-floor" aria-hidden="true">#</a> 0G.2.纵向模型 Floor</h2><p>业务架构，业务模型，程序架构，数据模型，有严格的边界和依赖要求。 通常，从下至上像楼层一样，分别称之为Floor-N（N为自然数）</p><h3 id="单向调用-避免跨层" tabindex="-1"><a class="header-anchor" href="#单向调用-避免跨层" aria-hidden="true">#</a> 单向调用，避免跨层</h3><p>通常，上层可以调用同层及下层，反之不可。如 Dao/Ser/Mvc的结构中，</p>',9),_=e("h3",{id:"单向流动-事件溯源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#单向流动-事件溯源","aria-hidden":"true"},"#"),a(" 单向流动，事件溯源")],-1),p=e("p",null,"数据流，业务流，要求单向流动。乱流时，以明确的Event传播和溯源。 如数据的从下向上构建，业务的从上到下传播。",-1),f=e("h2",{id:"_0g-3-横向功能-layer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_0g-3-横向功能-layer","aria-hidden":"true"},"#"),a(" 0G.3.横向功能 Layer")],-1),u=e("p",null,"功能或模块可以通过组合，继承，叠加或过滤后对外提供合适的服务。 通常，从内到外，分别称为Layer-N（N为自然数）",-1);function g(v,x){const o=i("Badge");return n(),h("div",null,[l,e("ul",null,[e("li",null,[a("Service中可以调用Dao和Service，反之则应避免。"),t(o,{type:"tip",vertical:"top"},{default:r(()=>[a("推荐")]),_:1})]),e("li",null,[a("Controller可以调用Service，反之则禁止。"),t(o,{type:"info",vertical:"top"},{default:r(()=>[a("必须")]),_:1})]),e("li",null,[a("Controller不可调用Dao。"),t(o,{type:"tip",vertical:"top"},{default:r(()=>[a("推荐")]),_:1})])]),_,p,f,u])}const G=d(c,[["render",g],["__file","0g-ghost-ship.html.vue"]]);export{G as default};
