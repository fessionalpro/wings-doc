import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,f as o}from"./app-371aab79.js";const c={},i=o('<h1 id="_4d-术士的属性" tabindex="-1"><a class="header-anchor" href="#_4d-术士的属性" aria-hidden="true">#</a> 4D.术士的属性</h1><p>有关Warlock登录授权的设置</p><h2 id="_4d-1-spring-wings-enabled-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-1-spring-wings-enabled-77-properties" aria-hidden="true">#</a> 4D.1.spring-wings-enabled-77.properties</h2><p>设置以下属性，</p><ul><li>spring.wings.faceless.enabled.enumi18n=true</li><li>spring.wings.faceless.flywave.enabled.module=true</li></ul><h3 id="spring-wings-warlock-enabled-autoconf" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-autoconf" aria-hidden="true">#</a> spring.wings.warlock.enabled.autoconf</h3><p><code>Boolean</code>=<code>true</code>，是否启动自动配置。</p><h3 id="spring-wings-warlock-enabled-security-auto" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-auto" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-auto</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security web and http配置</p><h3 id="spring-wings-warlock-enabled-security-web-autos" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-web-autos" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-web-autos</h3><p><code>Boolean</code>=<code>true</code>，是否支持 Web 自动配置，firewall，debug等</p><h3 id="spring-wings-warlock-enabled-security-http-bind" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-http-bind" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-http-bind</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security http wing bind</p><h3 id="spring-wings-warlock-enabled-security-http-auth" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-http-auth" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-http-auth</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security http wing auth</p><h3 id="spring-wings-warlock-enabled-security-http-base" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-http-base" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-http-base</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security http base 验证</p><h3 id="spring-wings-warlock-enabled-security-http-auto" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-http-auto" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-http-auto</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security http auto</p><h3 id="spring-wings-warlock-enabled-security-http-chain" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-http-chain" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-http-chain</h3><p><code>Boolean</code>=<code>true</code>，是否配置默认的 SecurityFilterChain</p><h3 id="spring-wings-warlock-enabled-security-bean" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-security-bean" aria-hidden="true">#</a> spring.wings.warlock.enabled.security-bean</h3><p><code>Boolean</code>=<code>true</code>，是否支持 warlock security Bean配置</p><h3 id="spring-wings-warlock-enabled-global-lock" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-global-lock" aria-hidden="true">#</a> spring.wings.warlock.enabled.global-lock</h3><p><code>Boolean</code>=<code>true</code>，是否注入 wings的全局锁</p><h3 id="spring-wings-warlock-enabled-jooq-autogen" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-jooq-autogen" aria-hidden="true">#</a> spring.wings.warlock.enabled.jooq-autogen</h3><p><code>Boolean</code>=<code>true</code>，是否注入 jooq dao</p><h3 id="spring-wings-warlock-enabled-combo-list-all-login-page" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-combo-list-all-login-page" aria-hidden="true">#</a> spring.wings.warlock.enabled.combo-list-all-login-page</h3><p><code>Boolean</code>=<code>true</code>，是否注入 ListAllLoginPageCombo</p><h3 id="spring-wings-warlock-enabled-combo-nonce-user-details" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-combo-nonce-user-details" aria-hidden="true">#</a> spring.wings.warlock.enabled.combo-nonce-user-details</h3><p><code>Boolean</code>=<code>true</code>，是否注入 NonceUserDetailsCombo</p><h3 id="spring-wings-warlock-enabled-just-auth" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-just-auth" aria-hidden="true">#</a> spring.wings.warlock.enabled.just-auth</h3><p><code>Boolean</code>=<code>true</code>，是否支持 just auth</p><h3 id="spring-wings-warlock-enabled-combo-just-auth-login-page" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-combo-just-auth-login-page" aria-hidden="true">#</a> spring.wings.warlock.enabled.combo-just-auth-login-page</h3><p><code>Boolean</code>=<code>true</code>，是否注入 JustAuthLoginPageCombo</p><h3 id="spring-wings-warlock-enabled-combo-just-auth-user-details" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-combo-just-auth-user-details" aria-hidden="true">#</a> spring.wings.warlock.enabled.combo-just-auth-user-details</h3><p><code>Boolean</code>=<code>true</code>，是否注入 JustAuthUserDetailsCombo</p><h3 id="spring-wings-warlock-enabled-combo-just-auth-autoreg" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-combo-just-auth-autoreg" aria-hidden="true">#</a> spring.wings.warlock.enabled.combo-just-auth-autoreg</h3><p><code>Boolean</code>=<code>true</code>，是否注入 JustAuthUserAuthnAutoReg</p><h3 id="spring-wings-warlock-enabled-zone-perm-check" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-zone-perm-check" aria-hidden="true">#</a> spring.wings.warlock.enabled.zone-perm-check</h3><p><code>Boolean</code>=<code>false</code>，是否支持 AuthZonePermChecker</p><h3 id="spring-wings-warlock-enabled-app-perm-check" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-app-perm-check" aria-hidden="true">#</a> spring.wings.warlock.enabled.app-perm-check</h3><p><code>Boolean</code>=<code>true</code>，是否支持 AuthAppPermChecker</p><h3 id="spring-wings-warlock-enabled-default-exception-handler" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-default-exception-handler" aria-hidden="true">#</a> spring.wings.warlock.enabled.default-exception-handler</h3><p><code>Boolean</code>=<code>true</code>，是否注入 DefaultExceptionResolver</p><h3 id="spring-wings-warlock-enabled-bind-exception-advice" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-bind-exception-advice" aria-hidden="true">#</a> spring.wings.warlock.enabled.bind-exception-advice</h3><p><code>Boolean</code>=<code>true</code>，是否注入 BindExceptionAdvice</p><h3 id="spring-wings-warlock-enabled-check-database" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-check-database" aria-hidden="true">#</a> spring.wings.warlock.enabled.check-database</h3><p><code>Boolean</code>=<code>true</code>，是否检查mysql和本机timezone兼容性</p><h3 id="spring-wings-warlock-enabled-swagger-rule" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-swagger-rule" aria-hidden="true">#</a> spring.wings.warlock.enabled.swagger-rule</h3><p><code>Boolean</code>=<code>true</code>，是否支持为Docket全局注入AlternateTypeRule</p><h3 id="spring-wings-warlock-enabled-swagger-jsr310" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-swagger-jsr310" aria-hidden="true">#</a> spring.wings.warlock.enabled.swagger-jsr310</h3><p><code>Boolean</code>=<code>true</code>，是否支持为Docket全局注入&quot;java.time.Local*&quot;</p><h3 id="spring-wings-warlock-enabled-table-change" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-table-change" aria-hidden="true">#</a> spring.wings.warlock.enabled.table-change</h3><p><code>Boolean</code>=<code>true</code>，是否开启table CUD 监听</p><h3 id="spring-wings-warlock-enabled-controller-auth" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-auth" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-auth</h3><p><code>Boolean</code>=<code>true</code>，是否开启默认的auth Controller</p><h3 id="spring-wings-warlock-enabled-controller-proc" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-proc" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-proc</h3><p><code>Boolean</code>=<code>true</code>，是否开启由filter处理仅做文档的login/out proc</p><h3 id="spring-wings-warlock-enabled-controller-user" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-user" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-user</h3><p><code>Boolean</code>=<code>true</code>，是否开启默认的user Controller</p><h3 id="spring-wings-warlock-enabled-controller-mock" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-mock" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-mock</h3><p><code>Boolean</code>=<code>true</code>，是否开启默认的mock Controller</p><h3 id="spring-wings-warlock-enabled-controller-test" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-test" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-test</h3><p><code>Boolean</code>=<code>true</code>，是否开启默认的test Controller</p><h3 id="spring-wings-warlock-enabled-controller-tweak" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-tweak" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-tweak</h3><p><code>Boolean</code>=<code>false</code>，是否开启默认的TweakController</p><h3 id="spring-wings-warlock-enabled-controller-oauth" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-controller-oauth" aria-hidden="true">#</a> spring.wings.warlock.enabled.controller-oauth</h3><p><code>Boolean</code>=<code>true</code>，是否开启默认的OauthController</p><h3 id="spring-wings-warlock-enabled-watching" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-watching" aria-hidden="true">#</a> spring.wings.warlock.enabled.watching</h3><p><code>Boolean</code>=<code>false</code>，是否支持计时分析</p><h3 id="spring-wings-warlock-enabled-uniauth" tabindex="-1"><a class="header-anchor" href="#spring-wings-warlock-enabled-uniauth" aria-hidden="true">#</a> spring.wings.warlock.enabled.uniauth</h3><p><code>Boolean</code>=<code>false</code>，是否支持联合登录</p><h2 id="_4d-2-wings-flywave-fit-79-properties" tabindex="-1"><a class="header-anchor" href="#_4d-2-wings-flywave-fit-79-properties" aria-hidden="true">#</a> 4D.2.wings-flywave-fit-79.properties</h2><h3 id="wings-faceless-flywave-fit-warlock-enum-i18n" tabindex="-1"><a class="header-anchor" href="#wings-faceless-flywave-fit-warlock-enum-i18n" aria-hidden="true">#</a> wings.faceless.flywave.fit.warlock-enum-i18n</h3><p>检查并自动安装，warlock-enum-i18n的数据库依赖</p><ul><li><code>path</code>=<code>classpath*:/wings-flywave/branch/feature/01-enum-i18n/*.sql</code></li><li><code>revi</code>=<code>2019_0521_01L</code></li><li><code>lost</code>=<code>WARN</code></li></ul><h3 id="wings-faceless-flywave-fit-warlock-user-auth" tabindex="-1"><a class="header-anchor" href="#wings-faceless-flywave-fit-warlock-user-auth" aria-hidden="true">#</a> wings.faceless.flywave.fit.warlock-user-auth</h3><p>检查并自动安装，warlock-user-auth的数据库依赖</p><ul><li><code>path</code>=<code>classpath*:/wings-flywave/master/04-auth/*.sql</code></li><li><code>revi</code>=<code>2020_1024_01L, 2020_1024_02L</code></li><li><code>lost</code>=<code>WARN</code></li></ul><h3 id="wings-faceless-flywave-fit-warlock-conf-mode" tabindex="-1"><a class="header-anchor" href="#wings-faceless-flywave-fit-warlock-conf-mode" aria-hidden="true">#</a> wings.faceless.flywave.fit.warlock-conf-mode</h3><p>检查并自动安装，warlock-conf-mode的数据库依赖</p><ul><li><code>path</code>=<code>classpath*:/wings-flywave/master/05-conf/*.sql</code></li><li><code>revi</code>=<code>2020_1025_01L</code></li><li><code>lost</code>=<code>WARN</code></li></ul><h2 id="_4d-3-wings-warlock-justauth-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-3-wings-warlock-justauth-77-properties" aria-hidden="true">#</a> 4D.3.wings-warlock-justauth-77.properties</h2><p>Oauth登录支持，使用just-auth</p><h3 id="wings-warlock-just-auth-cache-size" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-cache-size" aria-hidden="true">#</a> wings.warlock.just-auth.cache-size</h3><p><code>Integer</code>=<code>5000</code>，缓存capacity数量</p><h3 id="wings-warlock-just-auth-cache-live" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-cache-live" aria-hidden="true">#</a> wings.warlock.just-auth.cache-live</h3><p><code>Integer</code>=<code>300</code>，ttl秒数，expireAfterWrite</p><h3 id="wings-warlock-just-auth-safe-state" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-safe-state" aria-hidden="true">#</a> wings.warlock.just-auth.safe-state</h3><p><code>Map&lt;String, String&gt;</code>，默认，<code>/login</code>=<code>{1}/#{0}{2}</code></p><p>设定安全的state，通过key获取内容，执行重定向(<code>http</code>或<code>/</code>开头)或回写。 内容支持<code>MessageFormat</code>格式的占位符模板，<code>{0}</code>为key， 若是http开头，则检测是否为safe-host</p><h3 id="wings-warlock-just-auth-safe-host" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-safe-host" aria-hidden="true">#</a> wings.warlock.just-auth.safe-host</h3><p><code>Set&lt;String&gt;</code>=<code>localhost:8080,localhost:8081</code></p><p>设定安全的host，减少dev时的跨域，可引发<code>redirect_uri_mismatch</code>错误</p><h3 id="wings-warlock-just-auth-auth-type" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-auth-type" aria-hidden="true">#</a> wings.warlock.just-auth.auth-type</h3><p><code>Map&lt;String, AuthConfig&gt;</code>，key同<code>wings.warlock.security.auth-type.*</code>， 支持<code>{host}</code>,<code>{scheme}</code>,<code>{authType}</code>,<code>{authZone}</code>变量，根据request的参数。</p><ul><li><code>github.client-id</code>=<code>Iv1.561a1b1940c77d3a</code></li><li><code>github.client-secret</code>=<code>${GITHUB_OAUTH_SECRET}</code></li><li><code>github.redirect-uri</code>=<code>{scheme}://{host}/auth/github/login.json</code></li></ul><h3 id="wings-warlock-just-auth-http-conf" tabindex="-1"><a class="header-anchor" href="#wings-warlock-just-auth-http-conf" aria-hidden="true">#</a> wings.warlock.just-auth.http-conf</h3><p><code>Map&lt;String, Http&gt;</code>，如果不需要代理，设置proxy-type=DIRECT或host=空即可</p><ul><li><code>github.timeout</code>=<code>10</code>，此处为秒，与just-auth的毫秒不同。</li><li><code>github.proxy-type</code>=<code>SOCKS</code></li><li><code>github.proxy-host</code>=<code>127.0.0.1</code></li><li><code>github.proxy-port</code>=<code>1081</code></li></ul><h2 id="_4d-4-wings-warlock-check-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-4-wings-warlock-check-77-properties" aria-hidden="true">#</a> 4D.4.wings-warlock-check-77.properties</h2><p>是否做时区的检查</p><h3 id="wings-warlock-check-tz-offset" tabindex="-1"><a class="header-anchor" href="#wings-warlock-check-tz-offset" aria-hidden="true">#</a> wings.warlock.check.tz-offset</h3><p><code>Integer</code>=<code>5</code>，秒，数据库和jvm时间差，绝对值的最大值</p><h3 id="wings-warlock-check-tz-fail" tabindex="-1"><a class="header-anchor" href="#wings-warlock-check-tz-fail" aria-hidden="true">#</a> wings.warlock.check.tz-fail</h3><p><code>Boolean</code>=<code>true</code>，时间差异过大时，是终止还是log</p><h2 id="_4d-5-wings-warlock-cud-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-5-wings-warlock-cud-77-properties" aria-hidden="true">#</a> 4D.5.wings-warlock-cud-77.properties</h2><p>Jooq对配置和授权表的CUD监听，<code>empty</code>表示不记录字段，<code>-</code>表示忽略此表。</p><ul><li><code>wings.faceless.jooq.cud.table[win_perm_entry]=</code></li><li><code>wings.faceless.jooq.cud.table[win_role_entry]=</code></li><li><code>wings.faceless.jooq.cud.table[win_conf_runtime]</code>=<code>key,current,handler</code></li></ul><h2 id="_4d-6-wings-warlock-error-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-6-wings-warlock-error-77-properties" aria-hidden="true">#</a> 4D.6.wings-warlock-error-77.properties</h2><p>全局异常控制。default为默认配置，兜底处理所以异常并为其他同类型提供默认值。</p><h3 id="wings-warlock-error-default-exception" tabindex="-1"><a class="header-anchor" href="#wings-warlock-error-default-exception" aria-hidden="true">#</a> wings.warlock.error.default-exception</h3><ul><li><code>http-status</code>=<code>200</code></li><li><code>content-type</code>=<code>application/json;charset=UTF-8</code></li><li><code>response-body</code>=<code>{&quot;success&quot;:false,&quot;message&quot;:&quot;unknown error&quot;}</code></li></ul><h2 id="_4d-7-wings-warlock-i18n-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-7-wings-warlock-i18n-77-properties" aria-hidden="true">#</a> 4D.7.wings-warlock-i18n-77.properties</h2><h3 id="wings-warlock-i18n-zoneid-enum" tabindex="-1"><a class="header-anchor" href="#wings-warlock-i18n-zoneid-enum" aria-hidden="true">#</a> wings.warlock.i18n.zoneid-enum</h3><p><code>Set&lt;String&gt;</code>=<code>pro.fessional.wings.faceless.enums.autogen.StandardTimezone</code></p><p>初始化的ZoneId的StandardTimezoneEnum类</p><h3 id="wings-warlock-i18n-locale-enum" tabindex="-1"><a class="header-anchor" href="#wings-warlock-i18n-locale-enum" aria-hidden="true">#</a> wings.warlock.i18n.locale-enum</h3><p><code>Set&lt;String&gt;</code>=<code>pro.fessional.wings.faceless.enums.autogen.StandardLanguage</code></p><p>初始化的Locale的StandardLanguageEnum类</p><h2 id="_4d-8-wings-warlock-security-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-8-wings-warlock-security-77-properties" aria-hidden="true">#</a> 4D.8.wings-warlock-security-77.properties</h2><p>Spring Security设置</p><h3 id="wings-warlock-security-web-debug" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-web-debug" aria-hidden="true">#</a> wings.warlock.security.web-debug</h3><p><code>Boolean</code>=<code>false</code>，WebSecurity.debug</p><h3 id="wings-warlock-security-authority-role" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-authority-role" aria-hidden="true">#</a> wings.warlock.security.authority-role</h3><p><code>Boolean</code>=<code>true</code>，权限是否使用Role</p><h3 id="wings-warlock-security-authority-perm" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-authority-perm" aria-hidden="true">#</a> wings.warlock.security.authority-perm</h3><p><code>Boolean</code>=<code>true</code>，权限是否使用Perm</p><h3 id="wings-warlock-security-login-forward" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-forward" aria-hidden="true">#</a> wings.warlock.security.login-forward</h3><p><code>Boolean</code>=<code>true</code>，true以servlet的forward进行，否则redirect(302)跳转</p><h3 id="wings-warlock-security-login-page" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-page" aria-hidden="true">#</a> wings.warlock.security.login-page</h3><p><code>String</code>=<code>/auth/login-page.json</code>，未登录时跳转的页面，需要有controller处理</p><h3 id="wings-warlock-security-login-proc-url" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-proc-url" aria-hidden="true">#</a> wings.warlock.security.login-proc-url</h3><p><code>String</code>=<code>/auth/{authType}/login.json</code></p><p>loginProcessingUrl，处理登录的Ant格式URL，由filter处理，不需要controller。 支持变量<code>authType</code>和<code>authZone</code>，可以通过param或path获得（PathPattern）</p><h3 id="wings-warlock-security-login-proc-method" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-proc-method" aria-hidden="true">#</a> wings.warlock.security.login-proc-method</h3><p><code>Set&lt;String&gt;</code>=<code>POST,GET</code>，spring默认仅POST，以更好的RESTful，但Oauth有Get</p><h3 id="wings-warlock-security-logout-url" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-logout-url" aria-hidden="true">#</a> wings.warlock.security.logout-url</h3><p><code>String</code>=<code>/auth/logout.json</code></p><p>登出地址，由filter处理，不需要controller</p><h3 id="wings-warlock-security-login-success-redirect" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-success-redirect" aria-hidden="true">#</a> wings.warlock.security.login-success-redirect</h3><p><code>Boolean</code>=<code>false</code>，登录成功后是否重定向</p><h3 id="wings-warlock-security-login-success-redirect-param" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-success-redirect-param" aria-hidden="true">#</a> wings.warlock.security.login-success-redirect-param</h3><p><code>String</code>=<code>redirectTo</code>，登录成功的重定向参数</p><h3 id="wings-warlock-security-login-success-redirect-default" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-success-redirect-default" aria-hidden="true">#</a> wings.warlock.security.login-success-redirect-default</h3><p><code>String</code>=<code>/</code>，登录成功的重定向默认地址</p><h3 id="wings-warlock-security-login-success-body" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-success-body" aria-hidden="true">#</a> wings.warlock.security.login-success-body</h3><p><code>String</code>=<code>{&quot;success&quot;:true,&quot;message&quot;:&quot;login success&quot;}</code>，登录成功返回的body，非重定向时</p><h3 id="wings-warlock-security-login-failure-body" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-login-failure-body" aria-hidden="true">#</a> wings.warlock.security.login-failure-body</h3><p><code>String</code>=<code>{&quot;success&quot;:false,&quot;message&quot;:&quot;{message}&quot;}</code>，登录失败返回的body</p><h3 id="wings-warlock-security-logout-success-body" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-logout-success-body" aria-hidden="true">#</a> wings.warlock.security.logout-success-body</h3><p><code>String</code>=<code>{&quot;success&quot;:true,&quot;message&quot;:&quot;logout success&quot;}</code>，登出成功返回的body，空时不注入handler</p><h3 id="wings-warlock-security-session-maximum" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-session-maximum" aria-hidden="true">#</a> wings.warlock.security.session-maximum</h3><p><code>Integer</code>=<code>-1</code>，同时登陆的maximumSessions。<code>-1</code>为不限制</p><h3 id="wings-warlock-security-session-expired-body" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-session-expired-body" aria-hidden="true">#</a> wings.warlock.security.session-expired-body</h3><p><code>String</code>=<code>{&quot;success&quot;:false,&quot;message&quot;:&quot;session has been expired, possibly due to multiple logins&quot;}</code>，过期时返回的内容</p><h3 id="wings-warlock-security-username-para" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-username-para" aria-hidden="true">#</a> wings.warlock.security.username-para</h3><p><code>String</code>=<code>username</code>，Username Parameter，用户名参数</p><h3 id="wings-warlock-security-password-para" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-password-para" aria-hidden="true">#</a> wings.warlock.security.password-para</h3><p><code>String</code>=<code>password</code>，Password Parameter，密码参数</p><h3 id="wings-warlock-security-role-prefix" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-role-prefix" aria-hidden="true">#</a> wings.warlock.security.role-prefix</h3><p><code>String</code>=<code>ROLE_</code>，GrantedAuthorityDefaults建议和spring一致，不用动</p><h3 id="wings-warlock-security-web-ignore" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-web-ignore" aria-hidden="true">#</a> wings.warlock.security.web-ignore</h3><p>配置顺序由宽松到严格的顺序，<code>webIgnore</code> &gt; <code>PermitAll</code> &gt; <code>Authenticated</code> &gt; <code>Authority</code> &gt; <code>AnyRequest</code>收尾。value是<code>-</code>或<code>空</code>，表示忽略此key。</p><p>①忽略项，<code>Map&lt;String, String&gt;</code>，antMatcher，无SecurityFilter流程及功能，如静态资源。</p><ul><li><code>assets</code>=<code>/assets/**</code></li><li><code>webjars</code>=<code>/webjars/**</code></li><li><code>swagger-ui</code>=<code>/swagger-ui/**</code></li><li><code>swagger-api</code>=<code>/v3/api-docs/**</code></li></ul><h3 id="wings-warlock-security-permit-all" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-permit-all" aria-hidden="true">#</a> wings.warlock.security.permit-all</h3><p>②都允许，<code>Map&lt;String, String&gt;</code>，antMatcher。</p><ul><li><code>error</code>=<code>/error</code></li><li><code>auth</code>=<code>/auth/**</code></li><li><code>test</code>=<code>/test/**</code></li></ul><h3 id="wings-warlock-security-authenticated" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-authenticated" aria-hidden="true">#</a> wings.warlock.security.authenticated</h3><p>③仅登录，<code>Map&lt;String, String&gt;</code>，antMatcher。</p><ul><li><code>user</code>=<code>/user/**</code></li></ul><h3 id="wings-warlock-security-authority" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-authority" aria-hidden="true">#</a> wings.warlock.security.authority</h3><p>④有权限，<code>Map&lt;String, String&gt;</code>，antMatcher。 按URL分组合并权限，最后以URL的ascii倒序设置，即英数先于<code>*</code>，宽松规则在后。</p><ul><li><code>ROLE_ACTUATOR</code>=<code>/actuator/**</code></li></ul><h3 id="wings-warlock-security-any-request" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-any-request" aria-hidden="true">#</a> wings.warlock.security.any-request</h3><p>⑤默认项，<code>String</code>，支持以下。</p><ul><li><code>permitAll</code>|<code>authenticated</code>|<code>anonymous</code>|<code>fullyAuthenticated</code></li><li>任意非空，非以上字符串，认为是<code>Authority</code>，<code>逗号</code>或<code>空白</code>分割多个。</li></ul><h3 id="wings-warlock-security-auth-type-default" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-auth-type-default" aria-hidden="true">#</a> wings.warlock.security.auth-type-default</h3><p><code>String</code>=<code>pro.fessional.wings.warlock.service.auth.WarlockAuthType#USERNAME</code></p><p>支持的验证类型，enum全路径，一对一，否则反向解析有问题； 不含<code>-</code>，<code>default</code>是特殊值，表示没有匹配时使用。</p><h3 id="wings-warlock-security-auth-type" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-auth-type" aria-hidden="true">#</a> wings.warlock.security.auth-type</h3><p><code>Map&lt;String, String&gt;</code>，登录方式枚举映射，必须一对一映射。</p><ul><li><code>username</code>=<code>pro.fessional.wings.warlock.service.auth.WarlockAuthType#USERNAME</code></li><li><code>mobile</code>=<code>pro.fessional.wings.warlock.service.auth.WarlockAuthType#MOBILE</code></li><li><code>email</code>=<code>pro.fessional.wings.warlock.service.auth.WarlockAuthType#EMAIL</code></li><li><code>github</code>=<code>me.zhyd.oauth.config.AuthDefaultSource#GITHUB</code></li><li><code>weibo</code>=<code>me.zhyd.oauth.config.AuthDefaultSource#WEIBO</code></li></ul><h3 id="wings-warlock-security-zone-perm" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-zone-perm" aria-hidden="true">#</a> wings.warlock.security.zone-perm</h3><p><code>Map&lt;String, Set&lt;String&gt;&gt;</code>=<code>admin=ROLE_ADMIN</code></p><p>设置authZone对应的权限，若有任一权限则可登录，否则，以用户名密码错误返回</p><h3 id="wings-warlock-security-app-perm" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-app-perm" aria-hidden="true">#</a> wings.warlock.security.app-perm</h3><p><code>Map&lt;String, Set&lt;String&gt;&gt;</code>=<code>wings-warlock=ROLE_ADMIN</code></p><p>设置spring.application.name对应的权限，若有任一权限则可登录，否则，以用户名密码错误返回。 支持AntPath，如<code>wings-*</code>，合并所有匹配的权限设置项，wings默认程序为<code>wings-default</code></p><h3 id="wings-warlock-security-nonce-auth-type" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-nonce-auth-type" aria-hidden="true">#</a> wings.warlock.security.nonce-auth-type</h3><p><code>Set&lt;String&gt;</code>=<code>username,mobile,email</code>，支持Nonce的验证类型</p><h3 id="wings-warlock-security-nonce-cache-manager" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-nonce-cache-manager" aria-hidden="true">#</a> wings.warlock.security.nonce-cache-manager</h3><p><code>String</code>=<code>MemoryCacheManager</code></p><p>cache-manager的bean name，同<code>wings.slardar.cache.primary</code></p><h3 id="wings-warlock-security-nonce-cache-level" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-nonce-cache-level" aria-hidden="true">#</a> wings.warlock.security.nonce-cache-level</h3><p><code>String</code>=<code>service</code>，缓存level，参考<code>wings.slardar.cache.level.</code></p><h3 id="wings-warlock-security-autoreg-auth-type" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-autoreg-auth-type" aria-hidden="true">#</a> wings.warlock.security.autoreg-auth-type</h3><p><code>Set&lt;String&gt;=</code>，支持自动注册用户的验证类型，如<code>github,weibo</code></p><h3 id="wings-warlock-security-autoreg-max-failed" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-autoreg-max-failed" aria-hidden="true">#</a> wings.warlock.security.autoreg-max-failed</h3><p><code>Integer</code>=<code>5</code>，自动注册用户时，最大连续失败次数，到达后锁账户</p><h3 id="wings-warlock-security-autoreg-expired" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-autoreg-expired" aria-hidden="true">#</a> wings.warlock.security.autoreg-expired</h3><p><code>Duration</code>=<code>3652D</code>，自动注册用户时，凭证过期时间，默认3652天（10年）</p><h3 id="wings-warlock-security-mem-user" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-mem-user" aria-hidden="true">#</a> wings.warlock.security.mem-user</h3><p><code>Map&lt;String, Mu&gt;</code>，配置内存用户，一般用于特殊用户登录。</p><ul><li>key为用户说明，重复时覆盖，建议为<code>username</code>+(<code>/</code>+<code>auth-type</code>)?</li><li><code>auth-type=</code>时，为匹配全部auth-type。</li><li>其他设置，参考WarlockAuthnService.Details 的类型及默认值。</li></ul><p>以root举例，注意，仅是举例，并非真实默认值。</p><ul><li><code>root.auth-type=</code></li><li><code>root.username=</code></li><li><code>root.password=</code></li><li><code>root.user-id=</code></li><li><code>root.status=</code> 默认ACTIVE</li><li><code>root.nickname=</code> 默认使用username</li><li><code>root.locale=</code> 默认使用Locale.getDefault()</li><li><code>root.zone-id=</code> 默认使用ZoneId.systemDefault()</li><li><code>root.passsalt=</code> 默认空</li><li><code>root.expired=</code> 默认使用LocalDateTime.MAX</li></ul><h3 id="wings-warlock-security-mem-auth" tabindex="-1"><a class="header-anchor" href="#wings-warlock-security-mem-auth" aria-hidden="true">#</a> wings.warlock.security.mem-auth</h3><p><code>Map&lt;String, Ma&gt;</code>，内存用户权限，key授权说明，重复时覆盖，建议以类型和用途命名。</p><p>以boot-admin举例，注意，仅是举例，并非真实默认值。</p><ul><li><code>boot-admin.user-id=</code></li><li><code>boot-admin.username=</code></li><li><code>boot-admin.auth-type=</code></li><li><code>boot-admin.auth-role=</code></li><li><code>boot-admin.auth-perm=</code></li></ul><h2 id="_4d-9-wings-warlock-urlmap-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-9-wings-warlock-urlmap-77-properties" aria-hidden="true">#</a> 4D.9.wings-warlock-urlmap-77.properties</h2><p>Controller中RequestMapping的URL常量</p><h3 id="wings-warlock-urlmap-auth-login-list" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-auth-login-list" aria-hidden="true">#</a> wings.warlock.urlmap.auth-login-list</h3><p><code>String</code>=<code>/auth/login-list.{extName}</code>，集成登录默认页，默认返回支持的type列表，需要PathVar <code>{extName}</code></p><h3 id="wings-warlock-urlmap-auth-login-page" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-auth-login-page" aria-hidden="true">#</a> wings.warlock.urlmap.auth-login-page</h3><p><code>String</code>=<code>/auth/{authType}/login-page.{extName}</code>，具体验证登录默认页，根据content-type自动返回，需要PathVar <code>{extName}</code> <code>{authType}</code></p><h3 id="wings-warlock-urlmap-auth-login-page2" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-auth-login-page2" aria-hidden="true">#</a> wings.warlock.urlmap.auth-login-page2</h3><p><code>String</code>=<code>/auth/login-page.{extName}</code>，具体验证登录默认页，把authType变成RequestParam</p><h3 id="wings-warlock-urlmap-auth-nonce-check" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-auth-nonce-check" aria-hidden="true">#</a> wings.warlock.urlmap.auth-nonce-check</h3><p><code>String</code>=<code>/auth/nonce-check.json</code>，验证一次性token是否有效，oauth2使用state作为token</p><h3 id="wings-warlock-urlmap-oauth-authorize" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-oauth-authorize" aria-hidden="true">#</a> wings.warlock.urlmap.oauth-authorize</h3><p><code>String</code>=<code>/oauth/authorize</code>，简单的authorization code授权类型</p><h3 id="wings-warlock-urlmap-oauth-access-token" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-oauth-access-token" aria-hidden="true">#</a> wings.warlock.urlmap.oauth-access-token</h3><p><code>String</code>=<code>/oauth/access-token</code>，简单的获取access-token</p><h3 id="wings-warlock-urlmap-oauth-revoke-token" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-oauth-revoke-token" aria-hidden="true">#</a> wings.warlock.urlmap.oauth-revoke-token</h3><p><code>String</code>=<code>/oauth/revoke-token</code>，吊销authorize或access-token</p><h3 id="wings-warlock-urlmap-user-authed-user" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-user-authed-user" aria-hidden="true">#</a> wings.warlock.urlmap.user-authed-user</h3><p><code>String</code>=<code>/user/authed-user.json</code>，获得登录用户的自身基本信息</p><h3 id="wings-warlock-urlmap-user-authed-perm" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-user-authed-perm" aria-hidden="true">#</a> wings.warlock.urlmap.user-authed-perm</h3><p><code>String</code>=<code>/user/authed-perm.json</code>，检查登录用户的权限，不区分大小写比较</p><h3 id="wings-warlock-urlmap-user-list-session" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-user-list-session" aria-hidden="true">#</a> wings.warlock.urlmap.user-list-session</h3><p><code>String</code>=<code>/user/list-session.json</code>，列出用户所有登录session</p><h3 id="wings-warlock-urlmap-user-drop-session" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-user-drop-session" aria-hidden="true">#</a> wings.warlock.urlmap.user-drop-session</h3><p><code>String</code>=<code>/user/drop-session.json</code>，踢出用户登录session</p><h3 id="wings-warlock-urlmap-mock-captcha" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-mock-captcha" aria-hidden="true">#</a> wings.warlock.urlmap.mock-captcha</h3><p><code>String</code>=<code>/mock/captcha.json</code>，直接返回验证码</p><h3 id="wings-warlock-urlmap-mock-doubler" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-mock-doubler" aria-hidden="true">#</a> wings.warlock.urlmap.mock-doubler</h3><p><code>String</code>=<code>/mock/doubler.json</code>，30秒内防连击</p><h3 id="wings-warlock-urlmap-mock-righter" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-mock-righter" aria-hidden="true">#</a> wings.warlock.urlmap.mock-righter</h3><p><code>String</code>=<code>/mock/righter.json</code>，防篡改</p><h3 id="wings-warlock-urlmap-mock-echo0o0" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-mock-echo0o0" aria-hidden="true">#</a> wings.warlock.urlmap.mock-echo0o0</h3><p><code>String</code>=<code>/mock/echo0o0.json</code>，按输入返回</p><h3 id="wings-warlock-urlmap-test-run-mode" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-test-run-mode" aria-hidden="true">#</a> wings.warlock.urlmap.test-run-mode</h3><p><code>String</code>=<code>/test/envs/run-mode.json</code>，查询运行模式，返回 Product, Test, Develop, Local</p><h3 id="wings-warlock-urlmap-test-system-mills" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-test-system-mills" aria-hidden="true">#</a> wings.warlock.urlmap.test-system-mills</h3><p><code>String</code>=<code>/test/envs/test-system-mills.json</code>，查询服务器系统时间，1970毫秒</p><h3 id="wings-warlock-urlmap-test-thread-mills" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-test-thread-mills" aria-hidden="true">#</a> wings.warlock.urlmap.test-thread-mills</h3><p><code>String</code>=<code>/test/envs/test-thread-mills.json</code>，查询服务器线程时间，1970毫秒</p><h3 id="wings-warlock-urlmap-admin-tweak-logger" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-admin-tweak-logger" aria-hidden="true">#</a> wings.warlock.urlmap.admin-tweak-logger</h3><p><code>String</code>=<code>/admin/tweak/logger.json</code>，线程级设置用户的日志级别</p><h3 id="wings-warlock-urlmap-admin-tweak-stack" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-admin-tweak-stack" aria-hidden="true">#</a> wings.warlock.urlmap.admin-tweak-stack</h3><p><code>String</code>=<code>/admin/tweak/stack.json</code>，线程级设置用户的异常栈有无</p><h3 id="wings-warlock-urlmap-admin-tweak-clock" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-admin-tweak-clock" aria-hidden="true">#</a> wings.warlock.urlmap.admin-tweak-clock</h3><p><code>String</code>=<code>/admin/tweak/clock.json</code>，线程级设置用户的时钟</p><h3 id="wings-warlock-urlmap-admin-authn-danger" tabindex="-1"><a class="header-anchor" href="#wings-warlock-urlmap-admin-authn-danger" aria-hidden="true">#</a> wings.warlock.urlmap.admin-authn-danger</h3><p><code>String</code>=<code>/admin/authn/danger.json</code>, 切换用户danger状态，可重置failed计数</p><h2 id="_4d-a-wings-warlock-ticket-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-a-wings-warlock-ticket-77-properties" aria-hidden="true">#</a> 4D.A.wings-warlock-ticket-77.properties</h2><h3 id="wings-warlock-ticket-pub-mod" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-pub-mod" aria-hidden="true">#</a> wings.warlock.ticket.pub-mod</h3><p><code>String</code>=<code>win</code>，ticket的PubMod</p><h3 id="wings-warlock-ticket-code-ttl" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-code-ttl" aria-hidden="true">#</a> wings.warlock.ticket.code-ttl</h3><p><code>Duration</code>=<code>60s</code>，authorization code 过期时间，默认60秒</p><h3 id="wings-warlock-ticket-code-max" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-code-max" aria-hidden="true">#</a> wings.warlock.ticket.code-max</h3><p><code>Integer</code>=<code>3</code>，有效authorization code的最大数量，默认3</p><h3 id="wings-warlock-ticket-token-ttl" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-token-ttl" aria-hidden="true">#</a> wings.warlock.ticket.token-ttl</h3><p><code>Duration</code>=<code>1H</code>，access token的过期时间，默认1小时</p><h3 id="wings-warlock-ticket-token-max" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-token-max" aria-hidden="true">#</a> wings.warlock.ticket.token-max</h3><p><code>Integer</code>=<code>5</code>，有效access token的最大数量，默认5</p><h3 id="wings-warlock-ticket-client" tabindex="-1"><a class="header-anchor" href="#wings-warlock-ticket-client" aria-hidden="true">#</a> wings.warlock.ticket.client</h3><p><code>Map&lt;String, Pass&gt;</code>，静态配置 client 登录信息。</p><ul><li>测试 <code>wings-trydofor.user-id</code>=<code>79</code></li><li>测试 <code>wings-trydofor.secret</code>=<code>wings-trydofor-secret</code></li><li>测试 <code>wings-trydofor.hosts</code>=<code>localhost</code> 302的主机名，不要使用ipv6</li><li>测试 <code>wings-trydofor.scopes</code>=<code>api</code> 区分大小写，逗号分隔</li></ul><h2 id="_4d-b-wings-warlock-apiauth-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-b-wings-warlock-apiauth-77-properties" aria-hidden="true">#</a> 4D.B.wings-warlock-apiauth-77.properties</h2><h3 id="wings-warlock-apiauth-client-header" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-client-header" aria-hidden="true">#</a> wings.warlock.apiauth.client-header</h3><p><code>String</code>=<code>Auth-Client</code>，Header name of Client Id</p><h3 id="wings-warlock-apiauth-signature-header" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-signature-header" aria-hidden="true">#</a> wings.warlock.apiauth.signature-header</h3><p><code>String</code>=<code>Auth-Signature</code>，Header name of Message Signature</p><h3 id="wings-warlock-apiauth-timestamp-header" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-timestamp-header" aria-hidden="true">#</a> wings.warlock.apiauth.timestamp-header</h3><p><code>String</code>=<code>Auth-Timestamp</code>，Header name of Request Timestamp</p><h3 id="wings-warlock-apiauth-digest-header" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-digest-header" aria-hidden="true">#</a> wings.warlock.apiauth.digest-header</h3><p><code>String</code>=<code>Auth-Digest</code>，Header name of Response Body Digest</p><h3 id="wings-warlock-apiauth-digest-max" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-digest-max" aria-hidden="true">#</a> wings.warlock.apiauth.digest-max</h3><p><code>DataSize</code>=<code>5MB</code>，超过此size不做digest，默认5M</p><h3 id="wings-warlock-apiauth-must-signature" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-must-signature" aria-hidden="true">#</a> wings.warlock.apiauth.must-signature</h3><p><code>Boolean</code>=<code>true</code>，是否一定要签名，可兼容旧api</p><h3 id="wings-warlock-apiauth-file-json-body" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-file-json-body" aria-hidden="true">#</a> wings.warlock.apiauth.file-json-body</h3><p><code>String</code>=<code>FILE_JSON_BODY</code>，既又文件又有json的时候，以此命名json body作为File提交</p><h3 id="wings-warlock-apiauth-error-client" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-error-client" aria-hidden="true">#</a> wings.warlock.apiauth.error-client</h3><p>Client错误时的应答，</p><ul><li><code>http-status</code>=<code>401</code></li><li><code>response-body</code>=<code>{&quot;success&quot;:false,&quot;code&quot;:&quot;Client&quot;,&quot;message&quot;:&quot;client error&quot;}</code></li></ul><h3 id="wings-warlock-apiauth-error-signature" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-error-signature" aria-hidden="true">#</a> wings.warlock.apiauth.error-signature</h3><p>签名错误时的应答，支持<code>{code}</code>占位符。</p><ul><li><code>http-status</code>=<code>403</code></li><li><code>response-body</code>=<code>{&quot;success&quot;:false,&quot;code&quot;:&quot;{code}&quot;,&quot;message&quot;:&quot;{code} error&quot;}</code></li></ul><h3 id="wings-warlock-apiauth-error-unhandled" tabindex="-1"><a class="header-anchor" href="#wings-warlock-apiauth-error-unhandled" aria-hidden="true">#</a> wings.warlock.apiauth.error-unhandled</h3><p>未知错误时的应答，</p><ul><li><code>http-status</code>=<code>200</code></li><li><code>response-body</code>=<code>{&quot;success&quot;:false,&quot;code&quot;:&quot;Unknown&quot;,&quot;message&quot;:&quot;unknown error&quot;}</code></li></ul><h2 id="_4d-c-wings-warlock-watching-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-c-wings-warlock-watching-77-properties" aria-hidden="true">#</a> 4D.C.wings-warlock-watching-77.properties</h2><p>对代码进行跟踪，默认<code>-1</code>，表示关闭；<code>0</code>为全开启</p><ul><li>controller层由Interceptor实现</li><li>service依赖注解 @Watching</li><li>jooq层，依赖于listener</li></ul><h3 id="wings-warlock-watching-jooq-threshold" tabindex="-1"><a class="header-anchor" href="#wings-warlock-watching-jooq-threshold" aria-hidden="true">#</a> wings.warlock.watching.jooq-threshold</h3><p><code>Long</code>=<code>-1</code>，jooq执行的阈值毫秒</p><h3 id="wings-warlock-watching-service-threshold" tabindex="-1"><a class="header-anchor" href="#wings-warlock-watching-service-threshold" aria-hidden="true">#</a> wings.warlock.watching.service-threshold</h3><p><code>Long</code>=<code>-1</code>，Watching注解的阈值毫秒</p><h3 id="wings-warlock-watching-controller-threshold" tabindex="-1"><a class="header-anchor" href="#wings-warlock-watching-controller-threshold" aria-hidden="true">#</a> wings.warlock.watching.controller-threshold</h3><p><code>Long</code>=<code>-1</code>，Controller的阈值毫秒</p><h2 id="_4d-d-wings-warlock-danger-77-properties" tabindex="-1"><a class="header-anchor" href="#_4d-d-wings-warlock-danger-77-properties" aria-hidden="true">#</a> 4D.D.wings-warlock-danger-77.properties</h2><h3 id="wings-warlock-danger-max-failure-true" tabindex="-1"><a class="header-anchor" href="#wings-warlock-danger-max-failure-true" aria-hidden="true">#</a> wings.warlock.danger.max-failure=true</h3><p><code>Boolean</code>=<code>true</code>, 在达到最大错误次数时，是否切换账户为危险状态.</p><h3 id="wings-warlock-danger-retry-step" tabindex="-1"><a class="header-anchor" href="#wings-warlock-danger-retry-step" aria-hidden="true">#</a> wings.warlock.danger.retry-step</h3><p><code>Duration</code>=<code>5s</code>, 密码错误时的重试间隔.</p><h3 id="wings-warlock-danger-block-size" tabindex="-1"><a class="header-anchor" href="#wings-warlock-danger-block-size" aria-hidden="true">#</a> wings.warlock.danger.block-size</h3><p><code>Integer</code>=<code>10000</code>, 缓存大小.</p><h3 id="wings-warlock-danger-block-ttl" tabindex="-1"><a class="header-anchor" href="#wings-warlock-danger-block-ttl" aria-hidden="true">#</a> wings.warlock.danger.block-ttl</h3><p><code>Duration</code>=<code>300s</code>, 缓存存活时长.</p>',315),d=[i];function n(t,s){return a(),r("div",null,d)}const u=e(c,[["render",n],["__file","4d-prop-warlock.html.vue"]]);export{u as default};
