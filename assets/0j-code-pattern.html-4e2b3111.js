import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as n,e,d as r,w as l,f as a}from"./app-7d38ae22.js";const d={},p=a('<h1 id="_0j-code-pattern" tabindex="-1"><a class="header-anchor" href="#_0j-code-pattern" aria-hidden="true">#</a> 0J.Code Pattern</h1><p>Collection of common code patterns in Wings coding practices.</p><h2 id="_0j01-comments-in-config-script" tabindex="-1"><a class="header-anchor" href="#_0j01-comments-in-config-script" aria-hidden="true">#</a> 0J01.Comments in Config/Script</h2><p>There are 2 types of comment in Config (<code>*.properties</code>) and Script (<code>*.sh</code>) according to their purpose.</p><ul><li>Toggle code, related to functionality. Use single comments like <code>#</code>.</li><li>Just doc, unrelated to functionality. Use double comments, like <code>##</code>.</li></ul><p>The benefits of this rule are,</p><ul><li>Clearly identifies the purpose of the comments</li><li>Functional code can be toggled quickly, e.g, shortcuts or column editing</li><li>Avoid double comments to be turned on by mistake</li></ul><h2 id="_0j02-swagger-api-doc" tabindex="-1"><a class="header-anchor" href="#_0j02-swagger-api-doc" aria-hidden="true">#</a> 0J02.Swagger Api Doc</h2>',8),u=n("code",null,"jsdoc",-1),m=n("code",null,"markdown",-1),h=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;UastIncorrectHttpHeaderInspection&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">&quot;Verify that the one-time token is valid&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
        # Usage
        Use Oauth2 state as the token and require the same ip, agent and other header as the original client.
        After successful verification, the session and cookie are in the header as a normal login
        ## Params
        * @param token - RequestHeader Oauth2 state as token
        ## Returns
        * @return {401} token is not-found, expired, or failed
        * @return {200 | Result(false, message=&#39;authing&#39;)} in verifying
        * @return {200 | Result(true, data=sessionId)} success
        &quot;&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${&quot;</span> <span class="token operator">+</span> <span class="token class-name">WarlockUrlmapProp<span class="token punctuation">.</span>Key</span>$authNonceCheck <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function v(g,k){const s=o("RouterLink");return i(),c("div",null,[p,n("p",null,[e("Refer to "),r(s,{to:"/0-wings/0a-code-style.html#0a9api-testing-and-docs-convention"},{default:l(()=>[e("0A.9.Api Testing and Docs Convention")]),_:1}),e(", Write documents in "),u,e(" and "),m,e(" formats.")]),h])}const b=t(d,[["render",v],["__file","0j-code-pattern.html.vue"]]);export{b as default};
