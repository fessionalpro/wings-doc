import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,c as p,b as e,d as i,f as a,w as l,e as n,o as h}from"./app-DEdToB0k.js";const r={},o=n('<h1 id="_0a-编码风格" tabindex="-1"><a class="header-anchor" href="#_0a-编码风格"><span>0A.编码风格</span></a></h1><p>Wings项目实践中，主张防御式编程，秉承以下价值观和哲学，</p><ul><li>静态优于动态 - 能编码的，就不要反射</li><li>强类型优于弱类型 - 能class或enum，就不要map或const</li><li>编译时优于运行时 - 能编译时解决的，就不要到运行时处理</li><li>IDE优于Editor - 有上下文语法的，就不要字符串查找</li><li>奥卡姆剃刀 - 能简单的就不要复杂，能明示的就不要暗示</li><li>命名必须明确 - 明确业务语义，可读性优先，不怕长，不怕怪</li><li>边界外参数不可信 - 边界层做验证和转换，边界内则都可信</li></ul><p>防御式编程，处处考虑边界和异常，May The <code>false</code> Be With You !</p><h2 id="_0a-1-java代码可读性优先" tabindex="-1"><a class="header-anchor" href="#_0a-1-java代码可读性优先"><span>0A.1.Java代码可读性优先</span></a></h2><p>遵循标准的java规范（Idea提示即可），但可读性优先。</p><ul><li><code>static final</code> 不必全大写。如<code>log</code>比<code>LOG</code>可读性好</li><li><code>BIG_SNAKE</code>可使用<code>PascalNaming</code>，因为大写单词不如小写易读</li><li>全大写名词（缩写或专有）只首字母大写驼峰法。<code>Json</code>,<code>Html</code>,<code>Id</code></li><li>前缀，后缀及缩写，必须2个字母起，建议3个字母（驼峰法）</li><li>英文无法明确的行业黑话，可使用中文，但不建议用拼音。</li><li>要求4-8字母的单词都记住，命名采用动宾或副词结构。</li><li>以Empty消除null，Set/List/Array/Map用empty</li><li>显示标注@NotNull，@Nullable，@Contract，声明null约束</li><li>正向的业务语义，使用正向的词汇，参数等，如true</li><li>使用<code>@Param.InOut/Out</code>及相应的后缀注解可被修改参数</li></ul><p>提高编码质量，升级编程技能，请左转至<a href="https://java-code-review.moilioncircle.com" target="_blank" rel="noopener noreferrer">攻城狮的Java代码审查</a></p><h2 id="_0a-2-sql命名snake-case" tabindex="-1"><a class="header-anchor" href="#_0a-2-sql命名snake-case"><span>0A.2.Sql命名snake_case</span></a></h2><p>即全小写，下划线分割。因实践中发现，小写词比大写容易识别。</p><ul><li>数据库，表名，字段名，全小写。</li><li>SQL关键词，内置词等建议<code>大写</code>，以区别。</li><li><code>index</code>以<code>ix_</code>,<code>uq_</code>,<code>ft_</code>,<code>pk_</code>区分索引类型。</li><li><code>trigger</code>以<code>(ai|au|db)__</code>表示触发的时机。</li></ul><p>wings主张业务表SQL化，即使用SQL管理表及数据，而GUI或对象映射都是辅助功能。 SQL脚本可以很好的编辑，比较，文档化，包括业务表的分层，编号及注释格式。</p><ul><li>表<code>编号/名字:解释</code> - 105/常量枚举:自动生成enum类</li><li>字段<code>注释/解释:选项1|选项2</code> - 验证账号/身份辨识:邮箱|手机|union_id|api_key</li></ul><p>编号由业务层规划，如10x为系统，11x为应用，12x为用户，13x为权限，2xx为商品，3xx为订单等。</p><h2 id="_0a-3-配置类properties优先" tabindex="-1"><a class="header-anchor" href="#_0a-3-配置类properties优先"><span>0A.3.配置类properties优先</span></a></h2><p>尽量使用<code>properties</code>格式，因<code>yml</code>的缩进在局部编辑时，容易出现困扰。</p><ul><li>一组有关联的属性，放在一个<code>properties</code>，分成文件便于版本管理</li><li><code>wings-enabled.properties</code>用于ConditionalOnProperty配置 <ul><li>统一使用<code>wings.enabled.xxx=true|false</code>格式</li><li><code>xxx</code> 可以是 Class/Method 命名规则</li></ul></li><li><code>spring-*</code>放置spring官方配置key</li><li><code>wings-*</code>放置wings配置key， <ul><li>带有工程或模块代号，如<code>wings.slardar.*</code></li><li>提供默认配置，使用<code>-79</code>序号</li></ul></li><li>推荐<code>kebab-case</code>命名，即<code>key</code>全小写，使用<code>-</code>分割</li><li>说明类型的注释，使用两个单号注释，如Properties中<code>##</code></li><li>功能关闭类的注释，使用单个单行注释，如Properties中<code>#</code></li></ul><h2 id="_0a-4-spring注入注意事项" tabindex="-1"><a class="header-anchor" href="#_0a-4-spring注入注意事项"><span>0A.4.spring注入注意事项</span></a></h2><ul><li>优先使用<code>constructor</code>注入，用<code>lombok</code>的<code>@RequiredArgsConstructor</code></li><li>次之使用<code>setter</code>注入，用<code>lombok</code>的<code>@Setter(onMethod_ = {@Autowired})</code> 或<code>kotlin</code>的<code>@Autowired lateinit var</code></li><li>尽量避免使用<code>Field</code>注入，坏处自己搜一搜</li><li>通常required时constructor注入，optional时setter注入</li><li>但注入过多，使参数列表过长，影响理解和使用时， 使用setter注入，加上<code>afterPropertiesSet</code>检查</li></ul><p>使用<code>@Resource</code>，<code>@Inject</code>和<code>@Autowired</code>，有细微差别，</p><ul><li>Resource由CommonAnnotationBeanPostProcessor处理， 查找顺序为①BeanName ②BeanType ③Qualifier</li><li>Autowired和Inject由AutowiredAnnotationBeanPostProcessor处理， 查找顺序为①BeanType ②Qualifier ③BeanName</li><li>type优先用Autowired和Inject，name优先用Resource(细粒度，难控制)</li><li>在spring体系下推荐<code>@Autowired</code>，考虑兼容性用<code>@Inject</code></li></ul><p>继承父类时的注入规定（类无法得知是否被继承）</p><ul><li>父类中有@Setter注入时，字段以protected替代private</li><li>不希望子类覆盖时，需要final setter，避免父类无法注入</li><li>继承时，一旦父类有setter，请不要override，除非确保DI无碍</li><li>继承时，不希望父类DI，可子类override，并自行注入</li></ul><h2 id="_0a-5-requestmapping风格" tabindex="-1"><a class="header-anchor" href="#_0a-5-requestmapping风格"><span>0A.5.RequestMapping风格</span></a></h2>',24),c=n(`<ul><li>在方法上写全路径<code>@RequestMapping(&quot;/a/b/c.html&quot;)</code></li><li>在controller上写版本号<code>@RequestMapping(&quot;/v1&quot;)</code></li><li>不要相写相对路径，这样才可以通过URL直接搜索匹配</li><li>不要使用prefix拼接路径(view，url)，避免无意义的碎片</li><li>不管REST还是其他，url必须有扩展名，用来标识MIME和过滤</li></ul><h2 id="_0a-6-service和dto约定" tabindex="-1"><a class="header-anchor" href="#_0a-6-service和dto约定"><span>0A.6.Service和Dto约定</span></a></h2><p>interface上使用annotation时，遵循以下规则，</p><ul><li><code>@Component</code>类注解，不要放在接口上，放在具体实现上</li><li>功能约定类，放在接口上，如<code>@Transactional</code></li></ul><p>Service定义为接口，Service中的Dto，定义为内类，作为锲约。 Dto间的转换和复制，使用工具类生成Helper静态对拷属性。 禁止使用反射，不仅是因为性能损失，主要是动态性，脱离了编译时检查。</p><p>直接单向输出的model对象，可以使用map，否则一定强类型的class。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TradeService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Getter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequiredArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Err</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CodeEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        RateFailed</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fedex.rate.unknown&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Fedex查询价格错误&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Data</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TradeInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> orderId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> amountOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // others</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* docs */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">NotNull</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MoneyInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ai</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">NotNull</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TradeInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">NotNull</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Journal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> journal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0a-7-枚举类和code-const值" tabindex="-1"><a class="header-anchor" href="#_0a-7-枚举类和code-const值"><span>0A.7.枚举类和code/const值</span></a></h2><p>因强类型原则，所有code和const都应该变成enum，在业务层传递。</p><ul><li>在service层，通过自动java模板生成enum，通过<code>*EnumUtil</code>，转换</li><li>在db层，以基本类型(int,varchar)读取和写入</li><li>在用户层，以多国语形式显示枚举内容</li><li>不能enum的魔法值，使用@MagicConstant标注</li></ul><h2 id="_0a-8-maven管理的约定" tabindex="-1"><a class="header-anchor" href="#_0a-8-maven管理的约定"><span>0A.8.maven管理的约定</span></a></h2><ul><li>多模块有主工程（parent|packaging=pom）和子工程（module|packaging=jar）</li><li>主工程在dependencyManagement定义lib，不管理具体dependency</li><li>子工程自己管理dependency，不可以重新定义版本号</li><li>依赖冲突时，maven遵循路径最短原则，所以在就近工程重新定义</li></ul><h2 id="_0a-9-api测试及文档约定" tabindex="-1"><a class="header-anchor" href="#_0a-9-api测试及文档约定"><span>0A.9.Api测试及文档约定</span></a></h2><p>wings默认开启swagger，访问路径为<code>/swagger-ui/index.html</code></p><p>因swagger注解容易使doc部分冗长，且SpringDoc做了比较智能的推导， 所以在能够表述清楚时，建议简化注解，参考以下注解。</p><ul><li>@Operation，以tag,summary,description等表述清楚</li><li>@Schema，输入或输出对象</li><li>@Parameter， 输入参数</li><li>@ApiResponse，必要时使用</li></ul><p>在description中，支持Markdown，辅助jsdoc，可使文档更加清晰。</p><ul><li>参考param <a href="https://jsdoc.app/tags-param.html" target="_blank" rel="noopener noreferrer">https://jsdoc.app/tags-param.html</a></li><li>参考returns <a href="https://jsdoc.app/tags-returns.html" target="_blank" rel="noopener noreferrer">https://jsdoc.app/tags-returns.html</a></li><li><code>@param [name=trydofor] - Somebody&#39;s name.</code></li><li><code>@return {200|Result(Dto)} 正常返回对象，status=200</code> - 小括号表示泛型(避免转义)。</li><li><code>@return {200|Result(false)} 错误时返回，status=200</code> - 小括号表示简单约定参数。</li></ul><p>使用swagger时，不可使用弱口令，在正式服上可通过以下属性关闭。</p><ul><li>springdoc.api-docs.enabled=true</li><li>springdoc.swagger-ui.enabled=true</li></ul><h2 id="_0a-a-resource结构" tabindex="-1"><a class="header-anchor" href="#_0a-a-resource结构"><span>0A.A.resource结构</span></a></h2><p>文件或包，一般以wings或项目代号为前缀。前缀表示统一服务，项目代号为项目特有。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>src/main/resources</span></span>
<span class="line"><span>├── META-INF - spring 自动配置入口等</span></span>
<span class="line"><span>│   └── spring.factories - EnableAutoConfiguration入口</span></span>
<span class="line"><span>├── extra-conf/ - 非自动加载的其他配置</span></span>
<span class="line"><span>├── wings-conf/ - wings自动加载配置 xml|yml|yaml|properties</span></span>
<span class="line"><span>├── wings-flywave/ - flywave数据库版本管理，</span></span>
<span class="line"><span>│   ├── branch/* - 分支脚本，如维护，功能</span></span>
<span class="line"><span>│   └── master/* - 主线脚本，上线中</span></span>
<span class="line"><span>└── wings-i18n/ - wings自动加载 bundle</span></span>
<span class="line"><span>│   ├── base-validator_en.properties - 英文版</span></span>
<span class="line"><span>│   └── base-validator_ja.properties - 日文版</span></span>
<span class="line"><span>└── application.properties - spring 默认配置，用于覆盖wings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0a-b-自动配置结构" tabindex="-1"><a class="header-anchor" href="#_0a-b-自动配置结构"><span>0A.B.自动配置结构</span></a></h2><p>wings对<code>spring/bean</code>包有特殊处理，可以自动 @ComponentScan</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>src/**/spring - spring有个配置</span></span>
<span class="line"><span>├── bean/ - 自动扫描，产生可被Autowired的Bean</span></span>
<span class="line"><span>│   └── WingsLightIdConfiguration.java - 内部用项目前缀，对外使用Wings前缀</span></span>
<span class="line"><span>├── boot/ - spring boot 配置用，不产生Bean</span></span>
<span class="line"><span>│   └── WingsAutoConfiguration.java - 兼容IDE和starter的配置入口</span></span>
<span class="line"><span>├── conf/ - 配置辅助类Configurer, AutoConfiguration</span></span>
<span class="line"><span>├── help/ - 工具辅助类</span></span>
<span class="line"><span>└── prop/ - 属性类，自动生成spring-configuration-metadata.json</span></span>
<span class="line"><span>    └── FacelessEnabledProp.java - 开关类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>@Configuration</code>类中配置<code>@Bean</code>时，对其依赖的注入，遵循以下原则，</p><ul><li>优先使用Constructor+final形式</li><li>使用Bean声明方法的参数</li><li>可使用Config的Field注入</li><li>避免使用Config的Setter注入，因为不能及时暴露依赖错误</li><li>一般方法的Autowired用于工具类初始化</li></ul><h2 id="_0a-c-常见的命名约定" tabindex="-1"><a class="header-anchor" href="#_0a-c-常见的命名约定"><span>0A.C.常见的命名约定</span></a></h2><ul><li>接口默认实现为<code>Default*</code></li><li>适配器类为<code>*Adapter</code></li></ul><p>常用命名组合，单词顺序和词义尽量保持一致，可读性优先。</p><ul><li>Ins/Out</li><li>Query/Reply</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Service中Journal 枚举类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Jane</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 新建</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Modify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 修改</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 逻辑删除</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 物理删除</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0a-d-event同步内部优先" tabindex="-1"><a class="header-anchor" href="#_0a-d-event同步内部优先"><span>0A.D.Event同步内部优先</span></a></h2><ul><li>内部Event，内部Publish，内部Listen</li><li>能内部Listen的，就不用外部的Subscribe</li><li>能同步的，就不用异步</li></ul><h2 id="_0a-e-有关过度设计和技术债务" tabindex="-1"><a class="header-anchor" href="#_0a-e-有关过度设计和技术债务"><span>0A.E.有关过度设计和技术债务</span></a></h2><p>因为需求的渐进明细，外部的环境变化，几乎所有业务系统的开发都是演进式。 基于以上事实，在实际交付中，力求完美很容易误人误事，应该遵循以下规则：</p><ul><li>仅做高出能力的10%的挑战，小于20%的远见</li><li>任何技术或方案的妥协都不得牺牲质量，做事不可糊弄</li><li>每次迭代，偿还10%-20%的技术债务</li></ul><h2 id="_0a-f-时间是神奇的类型" tabindex="-1"><a class="header-anchor" href="#_0a-f-时间是神奇的类型"><span>0A.F.时间是神奇的类型</span></a></h2><p>系统内有2种时间<code>系统时间</code>和<code>本地时间</code>，数据库和java类型映射上，</p><ul><li><code>日期时间</code>，以<code>DATETIME</code>或<code>DATETIME(3)</code>和<code>LocalDateTime</code>存储</li><li><code>日期</code>，以<code>DATE</code>和<code>LocalDate</code>存储</li><li><code>时间</code>，以<code>TIME</code>或<code>TIME(3)</code>和<code>LocalTime</code>存储</li><li><code>时区</code>，以<code>VARCHAR(40)</code>或<code>INT</code>存储</li><li>特别场景，以<code>BIGINT</code>或<code>VARCHAR(20)</code>存储</li></ul><p>字段命名规则，存在以下后缀约定，</p><ul><li><code>_ldt</code> - <code>LocalDateTime</code>，如 <code>order_ldt</code></li><li><code>_odt</code> - <code>OffsetDateTime</code>，如 <code>order_odt</code></li><li><code>_zdt</code> - <code>ZonedDateTime</code>，如 <code>order_zdt</code></li><li><code>_zid</code> - <code>ZoneId</code>，如 <code>order_zid</code>为<code>order_*</code>的时区</li></ul><p>以跨境电商场景为例，服务器群采用<code>UTC</code>时区（系统时间），中国用户<code>Asia/Shanghai</code>（用户时间）, 纽约NY商家<code>America/New_York</code>（数据时间），洛杉矶LA商家<code>America/Los_Angeles</code>（数据时间）。</p><p>本地日时，必须有<code>时区</code>配合，又分为<code>用户时间</code>和<code>数据时间</code>，命名后缀如下，</p><ul><li><code>时区</code> - 以<code>_tz</code>或<code>_zid</code>为后缀，内容为<code>ZoneId</code>的字符串名字</li><li><code>日时</code> - 系统/用户/数据，分别以<code>_dt</code>/<code>_udt</code>/<code>_ldt</code>结尾</li><li><code>日期</code> - 系统/用户/数据，分别以<code>_dd</code>/<code>_udd</code>/<code>_ldd</code>结尾</li><li><code>时间</code> - 系统/用户/数据，分别以<code>_tm</code>/<code>_utm</code>/<code>_ltm</code>结尾</li></ul><p>举例，北京时间<code>2020-08-09 01:00:00</code>，中国用户C1，分别在NY和LA商家下单。</p><ul><li>Sys_dt(UTC) = <code>2020-08-08 17:00:00</code></li><li>C1_udt(Asia/Shanghai, UTC+8) = <code>2020-08-09 01:00:00</code></li><li>NY_ldt(America/New_York, UTC-4) = <code>2020-08-08 13:00:00</code></li><li>LA_ldt(America/Los_Angeles, UTC-7) = <code>2020-08-08 10:00:00</code></li></ul><p>哎，不对啊，记得纽约是<code>西五区</code>啊，应该<code>UTC-5</code>啊，怎么时间不对呢？ 系统中不要使用<code>UTC-5</code>，所以需要city标志<code>zoneid</code>， 因为同一经线上国家很多，并且时区本非按经线换分，有些区域存在<code>夏令时</code>。</p><p>系统时区，推荐为核心用户所在时区，要考虑UTC是否为最优解。</p><p>于是，以下场景时，我们会用到不同的时间，</p><ul><li>当跟踪系统日志时，我们使用<code>Sys_dt</code>，可以保证统一的时间线</li><li>当统计北美商家<code>上午</code>的营运报表时，我们使用<code>*_ldt</code></li><li>当追求用户体验，用户不关心时区时，用户看到的所有时间都是<code>C1_udt</code></li><li>有些行业惯例（航空，物流）使用本地时间，我们使用<code>*_ldt</code></li></ul><p>按数据的读写比例，在时间存储时，要考虑，</p><ul><li>统计类业务，通常写入时转化，存入用户本地时间（和时区），读取时不转换</li><li>协作类业务，通常写入时，使用系统时间，读取时转换</li></ul><p>如果需要转换时间，需要在用户界面统一（如controller）处理。</p><p>对应java7过来的选手，参考以下替代关系。</p><ul><li>Instant 代替 Date</li><li>LocalDateTime 代替 Calendar</li><li>DateTimeFormatter 代替 SimpleDateFormat</li></ul><h2 id="_0a-g-非科学家别用浮点型" tabindex="-1"><a class="header-anchor" href="#_0a-g-非科学家别用浮点型"><span>0A.G.非科学家别用浮点型</span></a></h2><p>wings中不应该有浮点类型float/double，而只有整数(int/long)，小数用BigDecimal， 他们对应的数据库类型分别为 INT/BIGINT/DECIMAL。</p><p>但在实践过程中，因科普不到位，一些外部惯性未被消除而污染wings代码，尤其在js体系中更为明显。</p><ul><li><code>0.1</code> + <code>0.2</code> = <code>0.30000000000000004</code></li><li><code>0.12</code> - <code>0.02</code> = <code>0.099999999999999</code></li></ul><p>其根本原因在于IEEE754格式，浮点型不适合非科学计算场景，除科学家外普通人慎用。 <code>Effective Java</code>是java从业人员必备知识，在此不做赘述，参考以下章节： &quot;Avoid Float and Double If Exact Answers Are Required&quot;</p><h2 id="_0a-h-业务数据类型" tabindex="-1"><a class="header-anchor" href="#_0a-h-业务数据类型"><span>0A.H.业务数据类型</span></a></h2><p>Wings中推荐使用以下类型，主要考虑了sql和json的兼容性，sql主要是mysql和h2database</p><table><thead><tr><th>JAVA</th><th>MYSQL/H2</th><th>JS/JSON</th></tr></thead><tbody><tr><td>Boolean/boolean</td><td>BOOLEAN</td><td>boolean</td></tr><tr><td>Integer/int</td><td>INT</td><td>number</td></tr><tr><td>Long/long</td><td>BIGINT</td><td>BigInt/bigint</td></tr><tr><td>BigDecimal</td><td>DECIMAL(M,D)</td><td>string</td></tr><tr><td>String</td><td>CHAR(N)/VARCHAR(N)/TEXT</td><td>string</td></tr><tr><td>LocalDateTime</td><td>DATETIME(3)</td><td>string</td></tr><tr><td>LocalDate</td><td>DATE</td><td>string</td></tr><tr><td>LocalTime</td><td>TIME(3)</td><td>string</td></tr><tr><td>byte[]</td><td>BLOB</td><td>string(base64_urlsafe)</td></tr></tbody></table><h2 id="_0a-i-实际中如何优雅的消除null" tabindex="-1"><a class="header-anchor" href="#_0a-i-实际中如何优雅的消除null"><span>0A.I.实际中如何优雅的消除null</span></a></h2><p>如同【攻城狮朋友圈】代码的坏味道所讲，wings工程实际，基本上以empty取代了null。</p><ul><li>若null是业务有效值，需要首先做业务判断。</li><li>若null是业务无效值，应该采用PreCheck或以@NotNull及empty取代</li><li>业务方法，一般提供get()和get(boolean)两类方法 <ul><li>get()用于获取NotNull的业务对象，等同于get(true)，肯定语义</li><li>get(false)用于获取可以为null的业务对象，即否定语义</li></ul></li></ul><p>分情况讲，尽管我们都主张避免使null变成业务有效值，但有时系统外的因素不可控。 常见的数据库，API，JNI，都可能导致null进入数据流。此时，应该在进入业务流之前拦截， 或显示的做null判断，比如 <code>Objects.equals</code>，<code>foo == null</code>等。</p><p>需要注意的是，业界流传一种『高级』秘籍，流行到被视为高级程序猿标配。</p><ul><li><code>!&quot;foo&quot;.equals(bar)</code> 可以安全的处理，bar是null的情况</li><li><code>null != foo</code>，null前置，变成左值。</li></ul><p>这两个小技巧在工程中很容易挖坑，应当引起警觉或避免，大概的不好之处如下。</p><ul><li>equals和hashCode的实现，有基本要求的，并非equals都对null友好。</li><li>混淆了逻辑，容易搞丢逻辑分支，<code>!=null</code>和<code>!=foo</code>是两个分支。 <ul><li>若null是业务值，应该采用<code>Objects.equals</code>显示的合并分支；</li><li>否则应assert或PreCheck，null进入业务逻辑，就意味着沦陷了。</li></ul></li><li>null变左值，破坏一致性，好比Junit中expected和actual互换，攻城狮应该维护一致性。</li></ul><p>理论归理论，实际中都有取舍和无奈，要尊重历史，遵守团队约定。在wings中，这样做，</p><ul><li><code>EmptyValue</code>和<code>EmptySugar</code>，在业务中确立了empty值及工具类</li><li>Collection，Map，Array等集合或容器类型，都需要以Empty返回</li><li><code>Null</code>类，定义了用来代替null的类型和检查方法，包括enum等</li><li>方法签名尽量使用<code>@NotNull</code>注解，是IDE辅助检查，编译时解决</li><li><code>AssertArgs</code>和<code>AssertState</code>进行业务assert，支持多国语</li></ul><h2 id="_0a-j-类型系统的逆变-协变-pecs" tabindex="-1"><a class="header-anchor" href="#_0a-j-类型系统的逆变-协变-pecs"><span>0A.J.类型系统的逆变/协变/PECS</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// ① 字段使用具体类型，还是抽象类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> field1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> field2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// ② 方法返回值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provide1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeMap</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provide2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// ③ 方法输入参数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> consume1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> consume2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Collection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> extends CharSequence</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// ④ Map的方法签名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replaceAll</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BiFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> K</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> extends V</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> function)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Wings在编码中鼓励，在保证兼容性（主要是行为特性）的情况下，接口（以嘴做比喻）</p><ul><li>吃的时候 - 输入项尽量抽象，尽量吃的更广</li><li>吐的时候 - 输出项尽量具体，尽量嚼的更碎</li><li>内部东西 - 保持原样，用的人知道特征</li></ul><p>以Map举例来说，输入时，使用Map+superK+extendsV来， 输出时，不要抹杀特征，比如是否SortedMap及RandomAccess</p><ul><li>TreeMap是字典序</li><li>LinkedHashMap是插入序</li><li>HashMap是乱序等</li></ul><h2 id="_0a-k-类和方法的泄露-副作用" tabindex="-1"><a class="header-anchor" href="#_0a-k-类和方法的泄露-副作用"><span>0A.K.类和方法的泄露（副作用）</span></a></h2><p>Wings把非以下特征的方法，统称为泄露或者副作用</p><ul><li>Pure functions（纯函数）</li><li>referential transparency（透明引用）</li><li>Side Effects(副作用）</li></ul><p>编程中，尽量避免方法泄露，规避隐式变量</p><h2 id="_0a-l-增强后的自注入-thislazy" tabindex="-1"><a class="header-anchor" href="#_0a-l-增强后的自注入-thislazy"><span>0A.L.增强后的自注入 ThisLazy</span></a></h2><p>ThisLazy模式，在Bean内，可调用被Spring增强方法，如<code>@Transactional</code>, <code>@Cacheable</code>, <code>@Async</code></p><p>以下方式，使用<code>thisLazyAwarePostProcessor</code> 完成了自动注，</p><ul><li><code>extends ThisLazy&lt;T&gt;</code> - 子类中直接使用 <code>thisLazy</code></li><li><code>implements ThisLazyAware&lt;T&gt;</code> - 实现接口</li></ul><p>以下代码，为手动设置初始化和注入<code>thisLazy</code>，</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Setter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">onMethod_</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Lazy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RuntimeConfService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thisLazy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下情况之外，都有运行时的类型异常，其中<code>M</code>为thisLazy使用的增强方法</p><ul><li><code>T</code>为接口，且<code>M</code>都来自<code>T</code>（最佳实践）</li><li><code>T</code>为类，且<code>M</code>由Cglib增强（proxyTargetClass=true）</li><li>无<code>M</code>，此时<code>T</code>为自身（不应使用此模式）</li></ul><h2 id="_0a-m-pojo的setter命名和transient约定" tabindex="-1"><a class="header-anchor" href="#_0a-m-pojo的setter命名和transient约定"><span>0A.M.Pojo的Setter命名和Transient约定</span></a></h2><p>在Pojo的Setter命名，考虑到通常的序列化工具的兼容性，约定如下。</p><ul><li>非序列化字段，使用 <code>transient</code> 关键词</li><li>非序列化Setter，不可使用<code>setXxx</code>，使用 <code>setXxxBy</code></li><li>非序列化Setter，建议使用<code>@Transient</code></li><li>条件Setter，使用<code>setXxxIf</code>形式</li></ul><p>其中，非序列化Setter指同名但不同参数的多态Setter。尤其是单个参数，容易影响pojo的真正Setter的序列化。</p>`,97);function k(g,u){const s=d("RouteLink");return h(),p("div",null,[o,e("p",null,[i("Url命名主要是场景化的前缀，参考"),a(s,{to:"/zh/0-wings/0b-rest-half.html"},{default:l(()=>[i("RestHalf")]),_:1}),i("。")]),c,e("p",null,[i("jackson和fastjson的差异，可参考 "),a(s,{to:"/zh/0-wings/0d-qa-devops.html#0d03"},{default:l(()=>[i("0D.03.jackson和fastjson")]),_:1})])])}const v=t(r,[["render",k],["__file","0a-code-style.html.vue"]]),m=JSON.parse('{"path":"/zh/0-wings/0a-code-style.html","title":"0A.编码风格","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"brush","category":["神翼","规范"],"description":"0A.编码风格 Wings项目实践中，主张防御式编程，秉承以下价值观和哲学， 静态优于动态 - 能编码的，就不要反射 强类型优于弱类型 - 能class或enum，就不要map或const 编译时优于运行时 - 能编译时解决的，就不要到运行时处理 IDE优于Editor - 有上下文语法的，就不要字符串查找 奥卡姆剃刀 - 能简单的就不要复杂，能明示的...","GIT_REPO_HEAD":"2025-01-17 e638e7035dc7958e3f145793e37c871eb02f12d5","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/0-wings/0a-code-style.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/0-wings/0a-code-style.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"0A.编码风格"}],["meta",{"property":"og:description","content":"0A.编码风格 Wings项目实践中，主张防御式编程，秉承以下价值观和哲学， 静态优于动态 - 能编码的，就不要反射 强类型优于弱类型 - 能class或enum，就不要map或const 编译时优于运行时 - 能编译时解决的，就不要到运行时处理 IDE优于Editor - 有上下文语法的，就不要字符串查找 奥卡姆剃刀 - 能简单的就不要复杂，能明示的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-16T10:15:44.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2025-01-16T10:15:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0A.编码风格\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-16T10:15:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"0A.1.Java代码可读性优先","slug":"_0a-1-java代码可读性优先","link":"#_0a-1-java代码可读性优先","children":[]},{"level":2,"title":"0A.2.Sql命名snake_case","slug":"_0a-2-sql命名snake-case","link":"#_0a-2-sql命名snake-case","children":[]},{"level":2,"title":"0A.3.配置类properties优先","slug":"_0a-3-配置类properties优先","link":"#_0a-3-配置类properties优先","children":[]},{"level":2,"title":"0A.4.spring注入注意事项","slug":"_0a-4-spring注入注意事项","link":"#_0a-4-spring注入注意事项","children":[]},{"level":2,"title":"0A.5.RequestMapping风格","slug":"_0a-5-requestmapping风格","link":"#_0a-5-requestmapping风格","children":[]},{"level":2,"title":"0A.6.Service和Dto约定","slug":"_0a-6-service和dto约定","link":"#_0a-6-service和dto约定","children":[]},{"level":2,"title":"0A.7.枚举类和code/const值","slug":"_0a-7-枚举类和code-const值","link":"#_0a-7-枚举类和code-const值","children":[]},{"level":2,"title":"0A.8.maven管理的约定","slug":"_0a-8-maven管理的约定","link":"#_0a-8-maven管理的约定","children":[]},{"level":2,"title":"0A.9.Api测试及文档约定","slug":"_0a-9-api测试及文档约定","link":"#_0a-9-api测试及文档约定","children":[]},{"level":2,"title":"0A.A.resource结构","slug":"_0a-a-resource结构","link":"#_0a-a-resource结构","children":[]},{"level":2,"title":"0A.B.自动配置结构","slug":"_0a-b-自动配置结构","link":"#_0a-b-自动配置结构","children":[]},{"level":2,"title":"0A.C.常见的命名约定","slug":"_0a-c-常见的命名约定","link":"#_0a-c-常见的命名约定","children":[]},{"level":2,"title":"0A.D.Event同步内部优先","slug":"_0a-d-event同步内部优先","link":"#_0a-d-event同步内部优先","children":[]},{"level":2,"title":"0A.E.有关过度设计和技术债务","slug":"_0a-e-有关过度设计和技术债务","link":"#_0a-e-有关过度设计和技术债务","children":[]},{"level":2,"title":"0A.F.时间是神奇的类型","slug":"_0a-f-时间是神奇的类型","link":"#_0a-f-时间是神奇的类型","children":[]},{"level":2,"title":"0A.G.非科学家别用浮点型","slug":"_0a-g-非科学家别用浮点型","link":"#_0a-g-非科学家别用浮点型","children":[]},{"level":2,"title":"0A.H.业务数据类型","slug":"_0a-h-业务数据类型","link":"#_0a-h-业务数据类型","children":[]},{"level":2,"title":"0A.I.实际中如何优雅的消除null","slug":"_0a-i-实际中如何优雅的消除null","link":"#_0a-i-实际中如何优雅的消除null","children":[]},{"level":2,"title":"0A.J.类型系统的逆变/协变/PECS","slug":"_0a-j-类型系统的逆变-协变-pecs","link":"#_0a-j-类型系统的逆变-协变-pecs","children":[]},{"level":2,"title":"0A.K.类和方法的泄露（副作用）","slug":"_0a-k-类和方法的泄露-副作用","link":"#_0a-k-类和方法的泄露-副作用","children":[]},{"level":2,"title":"0A.L.增强后的自注入 ThisLazy","slug":"_0a-l-增强后的自注入-thislazy","link":"#_0a-l-增强后的自注入-thislazy","children":[]},{"level":2,"title":"0A.M.Pojo的Setter命名和Transient约定","slug":"_0a-m-pojo的setter命名和transient约定","link":"#_0a-m-pojo的setter命名和transient约定","children":[]}],"git":{"createdTime":1655901635000,"updatedTime":1737022544000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":11}]},"readingTime":{"minutes":14.42,"words":4327},"filePathRelative":"zh/0-wings/0a-code-style.md","localizedDate":"2022年6月22日","autoDesc":true}');export{v as comp,m as data};
