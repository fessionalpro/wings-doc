import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as l,b as e,e as t,d as s,f as r}from"./app-T2f1rYfd.js";const d={},c=r(`<h1 id="_9d4-auto-timezone-and-i18n" tabindex="-1"><a class="header-anchor" href="#_9d4-auto-timezone-and-i18n" aria-hidden="true">#</a> 9D4.Auto Timezone and I18n</h1><p>The careful handling of language and timezones is an important feature that distinguishes WingsBoot from other frameworks.</p><ul><li>time - can system-level, thread-level tweak clock</li><li>timezone - by annotation or type , to auto convert Dto/pojo</li><li>language - strong type MessageCode, EnumCode constants with auto conversion</li></ul><h2 id="tweak-clock-and-timeline" tabindex="-1"><a class="header-anchor" href="#tweak-clock-and-timeline" aria-hidden="true">#</a> Tweak Clock and Timeline</h2><p>There are typically two types of clocks within a system, the system clock, which requires a linear timeline, and the business clock, which may require traversal. The system clock may also need to be tuned to a different timeline, especially during test, deduce and replay.</p><ul><li>mirana&#39;s <code>ThreadNow</code> and <code>SlideDate</code> basic version to tweak system clock</li><li>slardar&#39;s <code>Now</code> advanced version to tweak system clock, also the user timeline</li></ul><p>So, when writing a program, if you need to tweak the timeline (all business code is recommended)</p><ul><li><code>Now.xxx()</code> instead of <code>Xxxx.now()</code> if dep on slardar</li><li><code>ThreadNow.xxx()</code> instead, if not dep on slardar, but on mirana dependency</li></ul><p>It is important to note whether the business thread model supports ThreadLocal&#39;s Inheritable.</p><ul><li>ThreadNow use ThreadLocal by default</li><li>Now uses TransmittableThreadLocal by default to override the default value of ThreadNow</li></ul><p>The jmh Benchmark on ThreadNow.xxx() and Xxx.now() is basically the same</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Benchmark     Mode  Cnt      Score     Error   Units
NowMain.now  thrpt    6  11942.923 ± 368.430  ops/ms
NowMain.sys  thrpt    6  12910.824 ± 226.997  ops/ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i18n-of-time-and-text" tabindex="-1"><a class="header-anchor" href="#i18n-of-time-and-text" aria-hidden="true">#</a> I18n of Time and Text</h2><p>WingsBoot&#39;s automatic conversion relies on two Contexts to get the ZoneId and Locale</p><ul><li>spring&#39;s <code>LocaleContextHolder</code>, used in the web layer</li><li>slardar&#39;s <code>TerminalContext</code>, which is recommended, especially in the Service layer</li></ul><p>Automatic conversion occurs in SpringMvc&#39;s Request and Response, respectively</p><ul><li>Jackson&#39;s @RequestBody, @ResponseBody</li><li>Spring&#39;s Data Binding, such as @Param</li></ul><p>Manual conversions are handled by <code>AutoDtoHelper</code>, such as Excel output, but avoid automatic conversions.</p><ul><li>Only works for annotation fields by default, while auto-conversion can be handled by type</li><li>Only non-final and transient fields with getters are supported by default</li></ul><p>The types and configuration items involved in auto-conversion are</p><ul><li>LocaleDateTime - wings.slardar.datetime.datetime.auto=false</li><li>ZonedDateTime - wings.slardar.datetime.zoned.auto=false</li><li>OffsetDateTime - wings.slardar.datetime.offset.auto=true</li><li>I18nString - without config, auto convert</li></ul><p>The annotations involved in the automatic and manual conversions are</p><ul><li>AutoDtoAble - marks the container class field (manual conversion only)</li><li>AutoI18nString - marks String or I18nString type</li><li>AutoTimeZone - marks the DateTime of Local/Zoned/Offset</li></ul><h2 id="context-rule-and-pitfall" tabindex="-1"><a class="header-anchor" href="#context-rule-and-pitfall" aria-hidden="true">#</a> Context Rule and Pitfall</h2><p>All Context implicitly passing variables, that have side effects, are considered anti-patterns and should follow the rules and be used with caution. Avoid using Functions with sideEffects in Wings, but Context does provide convenience and works very well.</p><p>ThreadLocal is often used to implement Context, and ThreadLocal must be set and removed correctly. Either in <code>try{set}finally{remove}</code> or some mechanism to ensure there are no misreads or memory leaks.</p>`,26),u={href:"https://github.com/alibaba/transmittable-thread-local",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"In scenarios with complex thread models, be sure to follow the principles and concerns of Transmittable-ThreadLocal to correctly handle the Context and ensure proper business code.",-1),m=e("ul",null,[e("li",null,"TerminalContext - handled by slardar's TerminalInterceptor"),e("li",null,[t("Now - As business requirement, need to "),e("code",null,"try{adjust()}finally{remove()}"),t(" by yourself")])],-1);function p(f,y){const a=o("ExternalLinkIcon");return i(),l("div",null,[c,e("p",null,[t("Wings uses "),e("a",u,[t("Transmittable-ThreadLocal"),s(a)]),t(" by default, and use TransmittableThreadLocal whenever possible, wrap Spring's Executor as TtlExecutors to ensure correct Context passing.")]),h,m])}const w=n(d,[["render",p],["__file","9d4.time-lang.html.vue"]]);export{w as default};
