import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as s,c as t,b as e,e as i,d as a,w as o,f as d}from"./app-bOcR57Nd.js";const l={},h=d('<h1 id="_1d-沉默的属性" tabindex="-1"><a class="header-anchor" href="#_1d-沉默的属性" aria-hidden="true">#</a> 1D.沉默的属性</h1><p>有关自动加载，默认工具和行为的属性。</p><h2 id="_1d-1-wings-auto-config-cnf" tabindex="-1"><a class="header-anchor" href="#_1d-1-wings-auto-config-cnf" aria-hidden="true">#</a> 1D.1.wings-auto-config.cnf</h2><p>Silencer的入口配置，定义了Silencer的自动加载的路径和模式。 存在多个<code>wings-auto-config*.cnf</code>时，按ascii排序，取最后。</p><h3 id="wings-boot-more" tabindex="-1"><a class="header-anchor" href="#wings-boot-more" aria-hidden="true">#</a> wings.boot.more</h3><p><code>List&lt;String&gt;</code>=<code>application*.*, wings-conf/**/*.*</code></p><p>多协议路径下查找，不支持协议头，同名可多次加载，按优先级覆盖。</p><h3 id="wings-boot-once" tabindex="-1"><a class="header-anchor" href="#wings-boot-once" aria-hidden="true">#</a> wings.boot.once</h3><p><code>List&lt;String&gt;</code>=<code>git.properties, META-INF/build-info.properties</code></p><p>多协议路径下查找，不支持协议头，同名仅按优先级加载一次，后续不会覆盖。</p><h3 id="wings-boot-block" tabindex="-1"><a class="header-anchor" href="#wings-boot-block" aria-hidden="true">#</a> wings.boot.block</h3><p><code>String</code>=<code>wings-conf-block-list.cnf</code></p><p>黑名单文件名</p><h3 id="wings-boot-promo" tabindex="-1"><a class="header-anchor" href="#wings-boot-promo" aria-hidden="true">#</a> wings.boot.promo</h3><p><code>String</code>=<code>wings-prop-promotion.cnf</code></p><p>变量提示文件名</p><h2 id="_1d-2-wings-conditional-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-2-wings-conditional-79-properties" aria-hidden="true">#</a> 1D.2.wings-conditional-79.properties</h2><h3 id="wings-silencer-conditional-error" tabindex="-1"><a class="header-anchor" href="#wings-silencer-conditional-error" aria-hidden="true">#</a> wings.silencer.conditional.error</h3><p><code>Map&lt;String, Boolean&gt;</code>=<code>empty</code>，映射限定key(ant-matcher)及其错误处理。</p><ul><li><code>*</code>=<code>true</code> 错误以match处理</li><li><code>pro.*</code>=<code>false</code> 以notMatch处理</li></ul><h3 id="wings-silencer-conditional-prefix" tabindex="-1"><a class="header-anchor" href="#wings-silencer-conditional-prefix" aria-hidden="true">#</a> wings.silencer.conditional.prefix</h3><p><code>Map&lt;String, String&gt;</code>=<code>empty</code>，映射限定key(ant-matcher)及其前缀。</p><ul><li><code>*</code>=<code>wings.enabled</code> 重定义所有前缀。</li></ul><h3 id="wings-silencer-conditional-enable" tabindex="-1"><a class="header-anchor" href="#wings-silencer-conditional-enable" aria-hidden="true">#</a> wings.silencer.conditional.enable</h3><p><code>Map&lt;String, Boolean&gt;</code>=<code>empty</code>，映射限定key(ant-matcher)及其是否匹配。</p><ul><li><code>pro.fessional.wings.warlock.database.autogen.tables.daos.*</code>=<code>false</code></li></ul><h2 id="_1d-3-wings-enabled-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-3-wings-enabled-79-properties" aria-hidden="true">#</a> 1D.3.wings-enabled-79.properties</h2><p>开关Silencer的功能。</p><h3 id="wings-enabled-silencer-autoconf" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-autoconf" aria-hidden="true">#</a> wings.enabled.silencer.autoconf</h3><p><code>Boolean</code>=<code>true</code>，是否启动自动配置 <code>wings-conf</code> 和 <code>wings-i18n</code></p><h3 id="wings-enabled-silencer-verbose" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-verbose" aria-hidden="true">#</a> wings.enabled.silencer.verbose</h3><p><code>Boolean</code>=<code>false</code>，是否显示wings的conditional信息</p><h3 id="wings-enabled-silencer-scanner" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-scanner" aria-hidden="true">#</a> wings.enabled.silencer.scanner</h3><p><code>Boolean</code>=<code>false</code>，是否自动扫描<code>**/spring/bean/**/*.class</code>，在ApplicationPreparedEvent时触发，在<code>@AutoConfiguration</code>之前</p><h3 id="wings-enabled-silencer-audit-prop" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-audit-prop" aria-hidden="true">#</a> wings.enabled.silencer.audit-prop</h3><p><code>Boolean</code>=<code>false</code>，是否审计属性文件和级联关系</p><h3 id="wings-enabled-silencer-mute-console" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-mute-console" aria-hidden="true">#</a> wings.enabled.silencer.mute-console</h3><p><code>Boolean</code>=<code>true</code>, 是否在有file存在是，静默控制台日志</p><h3 id="wings-enabled-silencer-tweak-clock" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-tweak-clock" aria-hidden="true">#</a> wings.enabled.silencer.tweak-clock</h3><p><code>Boolean</code>=<code>true</code>, 是否支持全局或线程的时钟调整</p><h3 id="wings-enabled-silencer-tweak-logback" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-tweak-logback" aria-hidden="true">#</a> wings.enabled.silencer.tweak-logback</h3><p><code>Boolean</code>=<code>true</code>, 是否支持全局或线程的logback调整</p><h3 id="wings-enabled-silencer-tweak-stack" tabindex="-1"><a class="header-anchor" href="#wings-enabled-silencer-tweak-stack" aria-hidden="true">#</a> wings.enabled.silencer.tweak-stack</h3><p><code>Boolean</code>=<code>true</code>, 是否支持全局或线程的CodeException栈调整</p><h2 id="_1d-4-spring-logging-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-4-spring-logging-79-properties" aria-hidden="true">#</a> 1D.4.spring-logging-79.properties</h2><p>为spring的logging提供了以下配置项。</p><ul><li><code>logging.logback.rollingpolicy.max-file-size</code>=<code>500MB</code></li><li><code>logging.logback.rollingpolicy.max-history</code>=<code>30</code></li><li><code>logging.level.root</code>=<code>INFO</code></li><li><code>logging.pattern.dateformat</code>=<code>yyyy-MM-dd HH:mm:ss.SSS</code></li></ul><h2 id="_1d-5-spring-message-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-5-spring-message-79-properties" aria-hidden="true">#</a> 1D.5.spring-message-79.properties</h2><p>为spring.messages提供以下默认项。</p><ul><li><code>spring.messages.always-use-message-format</code>=<code>false</code></li><li><code>spring.messages.basename=</code></li><li><code>spring.messages.cache-duration=</code></li><li><code>spring.messages.encoding</code>=<code>UTF-8</code></li><li><code>spring.messages.fallback-to-system-locale</code>=<code>true</code></li><li><code>spring.messages.use-code-as-default-message</code>=<code>true</code></li></ul><h2 id="_1d-6-wings-i18n-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-6-wings-i18n-79-properties" aria-hidden="true">#</a> 1D.6.wings-i18n-79.properties</h2><p>为应用设置默认语言和时区，以及多国语资源。</p><h3 id="wings-silencer-i18n-locale" tabindex="-1"><a class="header-anchor" href="#wings-silencer-i18n-locale" aria-hidden="true">#</a> wings.silencer.i18n.locale</h3><p><code>String=</code>，格式为<code>en_US</code>, <code>zh_CN</code>。默认系统语言。</p><p>对应系统变量的<code>user.language</code>, <code>user.country</code></p><h3 id="wings-silencer-i18n-zoneid" tabindex="-1"><a class="header-anchor" href="#wings-silencer-i18n-zoneid" aria-hidden="true">#</a> wings.silencer.i18n.zoneid=</h3><p><code>String=</code>，默认系统时区，如<code>UTC</code>, <code>GMT+8,</code> <code>Asia/Shanghai</code></p><p>对应系统变量的<code>user.timezone</code></p><h3 id="wings-silencer-i18n-bundle" tabindex="-1"><a class="header-anchor" href="#wings-silencer-i18n-bundle" aria-hidden="true">#</a> wings.silencer.i18n.bundle</h3><p><code>List&lt;String&gt;</code>=<code>classpath*:/wings-i18n/**/*.properties</code></p><p>默认的resource配置，逗号分隔的AntPath格式。</p><h2 id="_1d-7-wings-autolog-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-7-wings-autolog-79-properties" aria-hidden="true">#</a> 1D.7.wings-autolog-79.properties</h2><p>自动切换appender的日志级别</p><h3 id="wings-silencer-autolog-level" tabindex="-1"><a class="header-anchor" href="#wings-silencer-autolog-level" aria-hidden="true">#</a> wings.silencer.autolog.level</h3><p><code>String</code>=<code>WARN</code>，Slf4j格式</p><p>自动设置日志的级别，如 ALL, TRACE, DEBUG, INFO, WARN, ERROR, OFF</p><h3 id="wings-silencer-autolog-target" tabindex="-1"><a class="header-anchor" href="#wings-silencer-autolog-target" aria-hidden="true">#</a> wings.silencer.autolog.target</h3><p><code>Set&lt;String&gt;</code>=<code>CONSOLE,STDOUT</code></p><p>可被mirana自动被调整的appender名字，逗号分隔</p><h3 id="wings-silencer-autolog-exists" tabindex="-1"><a class="header-anchor" href="#wings-silencer-autolog-exists" aria-hidden="true">#</a> wings.silencer.autolog.exists</h3><p><code>Set&lt;String&gt;</code>=<code>FILE</code></p><p>当存在以上appender出现的时候，进行自动日志调整。</p><h2 id="_1d-8-wings-encrypt-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-8-wings-encrypt-79-properties" aria-hidden="true">#</a> 1D.8.wings-encrypt-79.properties</h2><p>自动配置加密功能</p><h3 id="wings-silencer-encrypt-leap-code" tabindex="-1"><a class="header-anchor" href="#wings-silencer-encrypt-leap-code" aria-hidden="true">#</a> wings.silencer.encrypt.leap-code</h3><p><code>String</code>=<code>BY2AH0IC9SX4UTV7GP5LNR6FK1WOE8ZQD3JM</code></p>',76),p=e("h3",{id:"wings-silencer-encrypt-crc8-long",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#wings-silencer-encrypt-crc8-long","aria-hidden":"true"},"#"),i(" wings.silencer.encrypt.crc8-long")],-1),g=e("p",null,[e("code",null,"String"),i("="),e("code",null,"15,13,11,9,7,5,3,1")],-1),w=d('<h3 id="wings-silencer-encrypt-aes-key" tabindex="-1"><a class="header-anchor" href="#wings-silencer-encrypt-aes-key" aria-hidden="true">#</a> wings.silencer.encrypt.aes-key</h3><p><code>Map&lt;String,String&gt;</code>，默认的Aes256加密名字和密码，默认<code>${random.uuid}${random.uuid}</code>。</p><ul><li><code>system</code> - 系统默认，每次系统启动时随机生成，停机后消失</li><li><code>ticket</code> - 用于Api Ticket，建议集群内统一</li><li><code>cookie</code> - 用于 Http Cookie，建议集群内统一</li><li><code>config</code> - 用于 配置文件中敏感数据，建议固定</li></ul><h2 id="_1d-9-wings-tweak-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-9-wings-tweak-79-properties" aria-hidden="true">#</a> 1D.9.wings-tweak-79.properties</h2><p>应用调节</p><h3 id="wings-silencer-tweak-code-stack" tabindex="-1"><a class="header-anchor" href="#wings-silencer-tweak-code-stack" aria-hidden="true">#</a> wings.silencer.tweak.code-stack</h3><p><code>Boolean</code>=<code>false</code>，CodeException的Global有栈或无栈</p><h3 id="wings-silencer-tweak-clock-offset" tabindex="-1"><a class="header-anchor" href="#wings-silencer-tweak-clock-offset" aria-hidden="true">#</a> wings.silencer.tweak.clock-offset</h3><p><code>Long</code>=<code>0</code>，初始系统时钟 offset ms</p><h3 id="wings-silencer-tweak-mdc-threshold" tabindex="-1"><a class="header-anchor" href="#wings-silencer-tweak-mdc-threshold" aria-hidden="true">#</a> wings.silencer.tweak.mdc-threshold</h3><p><code>Boolean</code>=<code>true</code>，是否配置WingsMdcThresholdFilter</p><h2 id="_1d-a-wings-runtime-77-properties" tabindex="-1"><a class="header-anchor" href="#_1d-a-wings-runtime-77-properties" aria-hidden="true">#</a> 1D.A.wings-runtime-77.properties</h2><p>运行时的应用模式</p><h3 id="wings-silencer-runtime-run-mode" tabindex="-1"><a class="header-anchor" href="#wings-silencer-runtime-run-mode" aria-hidden="true">#</a> wings.silencer.runtime.run-mode</h3><p><code>RunMode</code>=<code>Local</code>，默认的运行模式</p><h3 id="wings-silencer-runtime-api-mode" tabindex="-1"><a class="header-anchor" href="#wings-silencer-runtime-api-mode" aria-hidden="true">#</a> wings.silencer.runtime.api-mode</h3><p><code>ApiMode</code>=<code>Nothing</code>，默认的Api模式</p><h2 id="_1d-b-wings-inspect-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-b-wings-inspect-79-properties" aria-hidden="true">#</a> 1D.B.wings-inspect-79.properties</h2><p>应用审查功能</p><h3 id="wings-silencer-inspect-properties" tabindex="-1"><a class="header-anchor" href="#wings-silencer-inspect-properties" aria-hidden="true">#</a> wings.silencer.inspect.properties</h3><p><code>Boolean</code>=<code>false</code>，是否审视properties的key,value,所在文件及层叠关系</p><h2 id="_1d-c-wings-scanner-79-properties" tabindex="-1"><a class="header-anchor" href="#_1d-c-wings-scanner-79-properties" aria-hidden="true">#</a> 1D.C.wings-scanner-79.properties</h2><h3 id="wings-silencer-scanner-bean" tabindex="-1"><a class="header-anchor" href="#wings-silencer-scanner-bean" aria-hidden="true">#</a> wings.silencer.scanner.bean</h3><p><code>List&lt;String&gt;</code>=<code>spring/bean</code>，当 ApplicationPreparedEvent 时，从 <code>**/spring/bean/**/*.class</code> 扫描 component</p>',24);function u(b,f){const n=c("Badge");return s(),t("div",null,[h,e("p",null,[i("LeapCode的默认seed，强安全需求时建议修改。"),a(n,{type:"tip",vertical:"top"},{default:o(()=>[i("建议")]),_:1})]),p,g,e("p",null,[i("Crc8Long的默认seed，强安全需求时建议修改。"),a(n,{type:"tip",vertical:"top"},{default:o(()=>[i("建议")]),_:1})]),w])}const k=r(l,[["render",u],["__file","1d-prop-silencer.html.vue"]]);export{k as default};
