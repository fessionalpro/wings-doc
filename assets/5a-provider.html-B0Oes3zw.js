import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as e}from"./app-Bc9xfkIk.js";const t={},o=e(`<h1 id="_5a-服务提供者" tabindex="-1"><a class="header-anchor" href="#_5a-服务提供者"><span>5A.服务提供者</span></a></h1><p>使用SpringMvc注解提供服务，并支持同WebMvc同时提供服务</p><h2 id="_5a-1-提供者约定" tabindex="-1"><a class="header-anchor" href="#_5a-1-提供者约定"><span>5A.1.提供者约定</span></a></h2><ul><li>纯接口和pojo定义契约，避免Overloading，如<code>HelloContract</code></li><li><code>SchemaId</code>和<code>path</code>均为烤串命名法，即小写连字符</li><li>包工头<code>@RestSchema</code>实现契约，如<code>HelloContractor</code></li><li>若有Overloading，以不同的path后缀区分，path全局唯一</li><li>仅使用<code>@RestSchema</code>，禁止扫描<code>@RestController</code></li></ul><h2 id="_5a-2-数据类型约定" tabindex="-1"><a class="header-anchor" href="#_5a-2-数据类型约定"><span>5A.2.数据类型约定</span></a></h2><p>数据类型，以Wings的Json约定为准，避免使用复杂类型及结构。</p><p>纯String作为body时，Request的<code>consumes</code>和Response的<code>produces</code> 都需要使用<code>MediaType.TEXT_PLAIN_VALUE</code>，这一点和Spring不同。</p><h2 id="_5a-3-契约风格约定" tabindex="-1"><a class="header-anchor" href="#_5a-3-契约风格约定"><span>5A.3.契约风格约定</span></a></h2><p>契约有Mvc和Rpc两种风格，都可以方便定位和理解。</p><h3 id="_3a-mvc风格-basepath为根路径" tabindex="-1"><a class="header-anchor" href="#_3a-mvc风格-basepath为根路径"><span>3a.Mvc风格，basePath为根路径</span></a></h3><p>同wings中Controller及RequestMapping约定一致。</p><ul><li>类上的basePath为<code>/</code>或<code>/v1</code>，即根路径或版本号</li><li>方法的<code>@RequestMapping</code>为全路径，以<code>SchemaId</code>开头</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestSchema</span><span class="token punctuation">(</span>schemaId <span class="token operator">=</span> <span class="token string">&quot;batrider-hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatriderContractor</span> <span class="token keyword">implements</span> <span class="token class-name">HelloContract</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/batrider-hello/say-hello&quot;</span><span class="token punctuation">,</span> 
    method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN_VALUE</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Batrider: Hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3b-rpc风格-basepath指定schemaid" tabindex="-1"><a class="header-anchor" href="#_3b-rpc风格-basepath指定schemaid"><span>3b.Rpc风格，basePath指定SchemaId</span></a></h3><p>通过IDE联想更容易定位，把SchemaId置于契约接口中，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloContract</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token class-name">SchemaId</span> <span class="token operator">=</span> <span class="token string">&quot;winx-hello&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现类，提供者直接使用契约上的SchemaId</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestSchema</span><span class="token punctuation">(</span>schemaId <span class="token operator">=</span> <span class="token class-name">HelloContract<span class="token punctuation">.</span>SchemaId</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token class-name">HelloContract<span class="token punctuation">.</span>SchemaId</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloContractor</span> <span class="token keyword">implements</span> <span class="token class-name">HelloContract</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/say-hello&quot;</span><span class="token punctuation">,</span> 
    method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN_VALUE</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Winx: Hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),p=[o];function c(l,i){return n(),s("div",null,p)}const u=a(t,[["render",c],["__file","5a-provider.html.vue"]]),m=JSON.parse('{"path":"/zh/5-batrider/5a-provider.html","title":"5A.服务提供者","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"cache","category":["蝙蝠","提供者"],"description":"5A.服务提供者 使用SpringMvc注解提供服务，并支持同WebMvc同时提供服务 5A.1.提供者约定 纯接口和pojo定义契约，避免Overloading，如HelloContract SchemaId和path均为烤串命名法，即小写连字符 包工头@RestSchema实现契约，如HelloContractor 若有Overloading，以不...","GIT_REPO_HEAD":"2024-03-21 88538783d43ee3acac2119f83402406f6886a510","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/5-batrider/5a-provider.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/5-batrider/5a-provider.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"5A.服务提供者"}],["meta",{"property":"og:description","content":"5A.服务提供者 使用SpringMvc注解提供服务，并支持同WebMvc同时提供服务 5A.1.提供者约定 纯接口和pojo定义契约，避免Overloading，如HelloContract SchemaId和path均为烤串命名法，即小写连字符 包工头@RestSchema实现契约，如HelloContractor 若有Overloading，以不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-02T02:16:40.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-03-02T02:16:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5A.服务提供者\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-02T02:16:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"5A.1.提供者约定","slug":"_5a-1-提供者约定","link":"#_5a-1-提供者约定","children":[]},{"level":2,"title":"5A.2.数据类型约定","slug":"_5a-2-数据类型约定","link":"#_5a-2-数据类型约定","children":[]},{"level":2,"title":"5A.3.契约风格约定","slug":"_5a-3-契约风格约定","link":"#_5a-3-契约风格约定","children":[{"level":3,"title":"3a.Mvc风格，basePath为根路径","slug":"_3a-mvc风格-basepath为根路径","link":"#_3a-mvc风格-basepath为根路径","children":[]},{"level":3,"title":"3b.Rpc风格，basePath指定SchemaId","slug":"_3b-rpc风格-basepath指定schemaid","link":"#_3b-rpc风格-basepath指定schemaid","children":[]}]}],"git":{"createdTime":1687077446000,"updatedTime":1709345800000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":2}]},"readingTime":{"minutes":1.2,"words":361},"filePathRelative":"zh/5-batrider/5a-provider.md","localizedDate":"2023年6月18日","autoDesc":true}');export{u as comp,m as data};
