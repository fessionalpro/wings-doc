import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,g as a,o as t}from"./app-q0R425qv.js";const n={};function l(r,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="_4b-组合授权" tabindex="-1"><a class="header-anchor" href="#_4b-组合授权"><span>4B.组合授权</span></a></h1><p>授权由权限(Perm)和角色(Role)组合而成。都在db中定义，通过模板自动生成java类</p><ul><li>功能权限 - role继承和扩展，身份马甲，临时增减，超级用户</li><li>数据隔离 - 管辖隔离，职能继承，助理扩展，临时授权</li></ul><h2 id="_4b-1-权限perm" tabindex="-1"><a class="header-anchor" href="#_4b-1-权限perm"><span>4B.1 权限Perm</span></a></h2><p><code>Perm</code>由scope和action构成，都采用<code>英句号</code>分隔<code>全小写</code>命名法，参考java变量命名。</p><p>格式为<code>scope + (&#39;.&#39; + scope )* + &#39;.&#39; + action</code>，即多个级联scope，最后一个action</p><ul><li>scope是一个名词，支持所属关系，使用<code>.</code>分隔，<code>system.menu</code>属于<code>system</code></li><li>第一个scope不可以是ROLE前缀（spring默认是ROLE_）</li><li>action是一个动词，支持scope的所属关系，如<code>system.menu.read</code>属于<code>system.read</code></li><li><code>*</code>表示包含所有动作，仅用来配置所属关系，不能用在具体方法上</li></ul><p><code>Perm</code>主要用在方法级的鉴权上，即在方法上增加的注解，如<code>@Secured</code>，<code>@Pre*</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 推荐，通过SecuredAuthorizationManager调用hasAnyAuthority</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Secured</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PermConstant</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// JSR250 仅作用于ROLE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RolesAllowed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PermitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">DenyAll</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不推荐，因为比较长，且SpEL过于强大</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(hasAuthority </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> PermConstant</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Perm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> End)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasAuthority(&#39;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> PermConstant</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Perm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasAnyAuthority(T(pro.fessional.wings.warlock.security.autogen.PermConstant$System$User).read)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4b-2-角色role" tabindex="-1"><a class="header-anchor" href="#_4b-2-角色role"><span>4B.2.角色Role</span></a></h2><p><code>Role</code>不支持继承，是<code>全大写</code>无分隔的命名法（区分权限），参考java变量命名。</p><ul><li>在自动生成的java类中，采用和spring相同的<code>ROLE_</code>前缀。</li><li>Role是扁平的，但可配置隶属关系，如LEADER包括MEMBER</li><li>无分隔符，指以<code>_</code>连接的词，当做同一个词看待。</li><li>db中不建议使用前缀，加载时是自动增加默认前缀的（Spring默认是ROLE_）</li></ul><p><code>Role</code>主要用在filter级的配置上，如在配置url权限时。当然也可用在方法级。 在配置文件中使用时，需要带上spring的前缀，建议使用前缀，以区分Perm。</p><h2 id="_4b-3-运行机制" tabindex="-1"><a class="header-anchor" href="#_4b-3-运行机制"><span>4B.3.运行机制</span></a></h2><p>Warlock在用户通过身份鉴别（renew）后，会分别加载同用户关联的Perm和Role， 并扁平化其各自的所属和继承关系，全部加载到SecurityContext中。</p><p>当<code>Perm</code>和<code>Role</code>(含前缀)的字符串以<code>-</code>开头时，表示排除此权限，其优先级最高。</p><p>可以通过配置<code>mem-auth</code>，进而修改用户不同登录方式的权限。 例如，实现ComboWarlockAuthzService.Combo 也可以按条件调整权限。</p><h2 id="_4b-4-数据权限" tabindex="-1"><a class="header-anchor" href="#_4b-4-数据权限"><span>4B.4.数据权限</span></a></h2><p>数据权限，包括了用户，部门，公司，三个层级的可见性。</p><ul><li>用户(User)，以user_id为主，同时包括子账号</li><li>部门(Dept)，以dept_id为主，包括了部门间所属关系</li><li>公司(Corp)，以corp_id为主，通常和domain有关</li><li>租户(Saas)，以saas_id为主，通常在tenant的SaaS系统</li></ul>`,20)]))}const o=s(n,[["render",l],["__file","4b-authz.html.vue"]]),d=JSON.parse('{"path":"/zh/4-warlock/4b-authz.html","title":"4B.组合授权","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"key","category":["术士","授权"],"description":"4B.组合授权 授权由权限(Perm)和角色(Role)组合而成。都在db中定义，通过模板自动生成java类 功能权限 - role继承和扩展，身份马甲，临时增减，超级用户 数据隔离 - 管辖隔离，职能继承，助理扩展，临时授权 4B.1 权限Perm Perm由scope和action构成，都采用英句号分隔全小写命名法，参考java变量命名。 格式为s...","GIT_REPO_HEAD":"2025-04-02 da9b4e04fc94cbc914e3a6d86b8766465737f2f7","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/4-warlock/4b-authz.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/4-warlock/4b-authz.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"4B.组合授权"}],["meta",{"property":"og:description","content":"4B.组合授权 授权由权限(Perm)和角色(Role)组合而成。都在db中定义，通过模板自动生成java类 功能权限 - role继承和扩展，身份马甲，临时增减，超级用户 数据隔离 - 管辖隔离，职能继承，助理扩展，临时授权 4B.1 权限Perm Perm由scope和action构成，都采用英句号分隔全小写命名法，参考java变量命名。 格式为s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4B.组合授权\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"git":{"createdTime":1656137116000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":7,"url":"https://github.com/trydofor"},{"name":"robbietree8","username":"robbietree8","email":"wangzg1988@gmail.com","commits":1,"url":"https://github.com/robbietree8"}]},"readingTime":{"minutes":2.25,"words":674},"filePathRelative":"zh/4-warlock/4b-authz.md","localizedDate":"2022年6月25日","autoDesc":true}');export{o as comp,d as data};
