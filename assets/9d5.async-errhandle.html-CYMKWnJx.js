import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as a}from"./app-CiSIZGf5.js";const t={},c=a(`<h1 id="_9d5-async-and-errhandle" tabindex="-1"><a class="header-anchor" href="#_9d5-async-and-errhandle"><span>9D5.Async and Errhandle</span></a></h1><p>In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing.</p><ul><li>Async methods - naming and signing</li><li>Exception handling - exceptions should not be eaten</li><li>Thread pool - thread allocation</li></ul><h2 id="_9d5-1-async-annotation" tabindex="-1"><a class="header-anchor" href="#_9d5-1-async-annotation"><span>9D5.1.Async Annotation</span></a></h2><p>Methods with <code>@Async</code> run in the <code>taskExecutor</code> thread pool, with the default prefix <code>exec-</code>.</p><ul><li>Method name, suffix <code>Async</code>, e.g. <code>orderAsync</code>.</li><li>Return type, use <code>Future</code>, e.g. <code>CompletableFuture</code>.</li></ul><p>In the following code, should NOT use the <code>void</code> method, use <code>Future&lt;Void&gt;</code> and <code>.complete(null)</code> instead. Their main difference is the handling of uncaught exceptions, <code>void</code> eats exceptions and cannot be passed to the caller.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">badAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// exception handled by AsyncConfigurer#getAsyncUncaughtExceptionHandler</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">goodAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// exception handled by caller via AOP/ExceptionHandler</span>
  <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9d5-2-async-webmvc" tabindex="-1"><a class="header-anchor" href="#_9d5-2-async-webmvc"><span>9D5.2.Async webMvc</span></a></h2><p>SpringMvc RequestMapping cannot use <code>@Async</code>, which accomplishes async via the return type.</p><ul><li><code>Future</code> - combines async service</li><li><code>Callable</code> - combines sync services, using the <code>applicationTaskExecutor</code> thread pool, with the default prefix <code>app-exec-</code></li><li><code>DeferredResult</code> - equivalent to passing context, not recommended</li></ul><p>In SpringBoot 3.2, thread pools and exceptions are handled as follows, where the</p><ul><li>request and response use the mvc thread pool respectively</li><li>service methods use <code>app-exec-</code> or <code>exec-</code> depending on how they are called</li><li>UncaughtException uses <code>AsyncUncaughtExceptionHandler</code> only if <code>void</code></li><li>FailedFuture or non-<code>void</code> UncaughtException uses <code>ExceptionHandler</code></li></ul><p>The log output, roughly as follows, is detailed in <code>AsyncControllerTest</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>## \`Future\` runs in 3 threads
XNIO-1 o.s.web.servlet.DispatcherServlet
XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping
XNIO-1 p.f.w.s.a.c.TestAsyncController
exec-2 p.f.w.s.app.service.TestAsyncService
XNIO-1 o.s.w.c.request.async.WebAsyncManager : Async result set
XNIO-1 o.s.web.servlet.DispatcherServlet : Exiting but response remains open
## UncaughtException in exec thread-pool
exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch
## FailedFuture in exec thread-pool
exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch
XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch
XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result

## \`Callable\` runs in 3 threads, with \`applicationTaskExecutor\`
XNIO-1 o.s.web.servlet.DispatcherServlet
XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping
app-exec-2 p.f.w.s.app.service.TestAsyncService
app-exec-2 o.s.w.c.request.async.WebAsyncManager : Async result set
## sync Exception in exec thread-pool
app-exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch
XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch
XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result

## \`DeferredResult\` runs in 3 threads
XNIO-1 o.s.web.servlet.DispatcherServlet
XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping
XNIO-1 p.f.w.s.a.c.TestAsyncController
exec-2 p.f.w.s.app.service.TestAsyncService
exec-2 o.s.w.c.request.async.WebAsyncManager : Async result set
XNIO-1 o.s.web.servlet.DispatcherServlet : Exiting but response remains open
## UncaughtException in web thread-pool
XNIO-1 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch
## FailedFuture in exec thread-pool
exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch
XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch
XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),i=[c];function o(l,r){return n(),s("div",null,i)}const u=e(t,[["render",o],["__file","9d5.async-errhandle.html.vue"]]),v=JSON.parse('{"path":"/9-example/9d.wings-boot/9d5.async-errhandle.html","title":"9D5.Async and Errhandle","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"async","category":["Practice","Manual","Async"],"description":"9D5.Async and Errhandle In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing. Async methods - nami...","GIT_REPO_HEAD":"2024-05-29 52aa888e97c1eab5b33da6e559ac55010bcbf2fb","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/9-example/9d.wings-boot/9d5.async-errhandle.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/9-example/9d.wings-boot/9d5.async-errhandle.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"9D5.Async and Errhandle"}],["meta",{"property":"og:description","content":"9D5.Async and Errhandle In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing. Async methods - nami..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T10:07:45.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-05-08T10:07:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9D5.Async and Errhandle\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T10:07:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"9D5.1.Async Annotation","slug":"_9d5-1-async-annotation","link":"#_9d5-1-async-annotation","children":[]},{"level":2,"title":"9D5.2.Async webMvc","slug":"_9d5-2-async-webmvc","link":"#_9d5-2-async-webmvc","children":[]}],"git":{"createdTime":1715162865000,"updatedTime":1715162865000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":1}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"9-example/9d.wings-boot/9d5.async-errhandle.md","localizedDate":"May 8, 2024","autoDesc":true}');export{u as comp,v as data};
