import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as r,b as t,e,d as l,f as n,r as d}from"./app.1189c37f.js";const o={},c=n(`<h1 id="b6-常见问题" tabindex="-1"><a class="header-anchor" href="#b6-常见问题" aria-hidden="true">#</a> B6.常见问题</h1><h2 id="_01-如何调试-debug解析" tabindex="-1"><a class="header-anchor" href="#_01-如何调试-debug解析" aria-hidden="true">#</a> 01.如何调试，debug解析</h2><p>调试主要集中在Parse和RnaEngine执行上，因此logger只在此2处存在。 米波工程本身的test中，slf4j的日志基本是trace，因此在其他工程引入时， 需要把设置<code>pro.fessional.meepo</code>的级别为<code>trace</code>。</p><p>如果通过日志，不能调试到位，可以通过继承Parser，调用protected方法。</p><p>如果发生 Class path contains multiple SLF4J bindings等错误提示， 直接exclude meepo工程对slf4j的依赖即可。</p><h2 id="_02-有关性能和线程安全" tabindex="-1"><a class="header-anchor" href="#_02-有关性能和线程安全" aria-hidden="true">#</a> 02.有关性能和线程安全</h2><p>模板引擎都是，一次解析，多次使用的，并增加了预编译或缓存。</p><p>米波解析时，Parse本身基于字符串分析，仅在有<code>查找</code>的指令中使用正则， 通常建议，解析的过程需要在单线程内进行，多次解析或竞争毫无意义。</p><p>合并使用时，如果不存在<code>Rng</code>类指令，是静态字符串拼接，首次拼接，后续缓存。 拼接过程中，预分配刚好够的buff，避免扩容。性能高于多次的原生String拼接。</p><p>无<code>Rng</code>指令时，线程安全且碎片极少，可以放心使用。当存在<code>Rng</code>指令时， 性能和线程安全，取决于执行引擎和传入的context。</p><p>根据benchmark的测试（for+if+function）结果，meepo的性能远高于<code>Freemarker</code></p><table><thead><tr><th style="text-align:left;">Benchmark</th><th style="text-align:left;">Mode</th><th style="text-align:left;">Cnt</th><th style="text-align:right;">Score</th><th style="text-align:right;">Error</th><th style="text-align:left;">Units</th></tr></thead><tbody><tr><td style="text-align:left;">Meepo.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">24177.507 ±</td><td style="text-align:right;">493.546</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Freemarker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18152.915 ±</td><td style="text-align:right;">928.830</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Mustache.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">22565.064 ±</td><td style="text-align:right;">154.915</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Pebble.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">34311.017 ±</td><td style="text-align:right;">248.283</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Rocker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">37499.123 ±</td><td style="text-align:right;">1275.888</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Thymeleaf.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">5406.186 ±</td><td style="text-align:right;">177.424</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Trimou.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">19718.903 ±</td><td style="text-align:right;">669.759</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Velocity.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18956.594 ±</td><td style="text-align:right;">766.578</td><td style="text-align:left;">ops/s</td></tr></tbody></table><h2 id="_03-如何调教性能" tabindex="-1"><a class="header-anchor" href="#_03-如何调教性能" aria-hidden="true">#</a> 03.如何调教性能</h2><p>远行MeepoAsyncProfile的main，然后使用<code>async-profiler</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean
mvn <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>false <span class="token builtin class-name">test</span>
mvn dependency:copy-dependencies <span class="token parameter variable">-DincludeScope</span><span class="token operator">=</span>runtime <span class="token parameter variable">-DoutputDirectory</span><span class="token operator">=</span>target/lib

<span class="token comment"># 启动一个大循环，也可以在IDE中直接运行</span>
<span class="token function">java</span> <span class="token parameter variable">-cp</span> target/classes:target/test-classes<span class="token punctuation">\\</span>
:target/lib/slf4j-api-1.7.30.jar<span class="token punctuation">\\</span>
:target/lib/annotations-19.0.0.jar <span class="token punctuation">\\</span>
pro.fessional.meepo.benchmark.MeepoAsyncProfile

<span class="token comment"># 获取 pid</span>
jps
<span class="token comment"># 使用 async-profiler生成svg火焰图</span>
<span class="token comment">#/Users/trydofor/Applications-cli/async-profiler-1.8.2/profiler.sh</span>
profiler.sh <span class="token parameter variable">-d</span> <span class="token number">30</span> <span class="token parameter variable">-f</span> meepo-profile.svg <span class="token variable">$pid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和性能有关的细节非常之多，对应模板引擎，主要集中在字符处理技巧上。</p><ul><li>zero-copy，因为String的特性，尽量使用<code>char[]</code>代替完成copy</li><li>array的赋值，尽量使用System.arraycopy</li><li>hashCode和equals方法，if条件中的短路计算</li><li>基本类型的toString</li><li>buffer类，避免扩容，线程安全下尽量复用</li></ul><h2 id="_04-米波语法解析非lexer" tabindex="-1"><a class="header-anchor" href="#_04-米波语法解析非lexer" aria-hidden="true">#</a> 04.米波语法解析非lexer</h2><p>正统的语法解析，一般分为词法和语法分析两步。</p><ul><li>先是进行词法分析，将输入转换成一个一个的Token</li><li>然后是进行语法分析。一个一个的Token组成语句，对应一定的语法。</li></ul><p>米波采用的是硬头皮有限状态死磕法，以便简单处理动态MEEPO头尾和BKB块。</p><h2 id="_05-如何记住米波的破语法" tabindex="-1"><a class="header-anchor" href="#_05-如何记住米波的破语法" aria-hidden="true">#</a> 05.如何记住米波的破语法</h2><p>米波的命名十分简单，如果你了解<code>dota</code>，<code>vi</code>和2020的新冠。</p><ul><li>DNA，就是静态替换，目的是做模板中间件，翻译模板</li><li>RNA，具有动态性，支持了for和if，以及engine扩展。</li><li>各指令的语法，均类似<code>vi</code>的<code>s/find/replace/g</code>替换。</li><li>米波嘴上说区分大小写，实际上自身的指令支持大小写。</li></ul><h2 id="_06-如何输入空字符串和引号" tabindex="-1"><a class="header-anchor" href="#_06-如何输入空字符串和引号" aria-hidden="true">#</a> 06.如何输入空字符串和引号</h2><p>在指令中，引号和空白有特殊处理，</p><ul><li>两个双引号<code>&quot;&quot;</code>，就是空字符串。</li><li>而引号需要转义<code>\\&quot;</code>，才是引号。</li></ul><h2 id="_07-像其他模板一样做斑马线" tabindex="-1"><a class="header-anchor" href="#_07-像其他模板一样做斑马线" aria-hidden="true">#</a> 07.像其他模板一样做斑马线</h2><p>Meepo的出发点是模板只负责显示，不负责计算，逻辑部因果在model中预判。 因此要做一个单元格背景的奇偶线效果，在米波中比较费劲，但也能实现。</p>`,29),p=t("li",null,"直接在model中生成好样式",-1),h=t("li",null,"自定义引擎，计算style",-1),g={href:"https://github.com/trydofor/pro.fessional.meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i1.htm",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/trydofor/pro.fessional.meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i2.htm",target:"_blank",rel:"noopener noreferrer"},m=n('<h2 id="_08-字面量表示数字和boolean" tabindex="-1"><a class="header-anchor" href="#_08-字面量表示数字和boolean" aria-hidden="true">#</a> 08.字面量表示数字和Boolean</h2><p>引擎中，DNA都是静态的字符串替换，RNA都是从内部获取数据。 仅在管道符链式处理时，需从模板读入数据，需要类型支持。</p><ul><li>Number型 - 详见<a href="#02%E7%AE%A1%E9%81%93%E7%AC%A6%E9%93%BE%E6%8E%A5%E5%87%BD%E6%95%B0%E9%93%BE%E5%BC%8F%E5%A4%84%E7%90%86">管道符链接函数，链式处理</a></li><li>Boolean型, TRUE,FALSE - 同上</li><li>字符串形态需要双引号，如<code>&quot;TRUE&quot;</code>,<code>&quot;3.14&quot;</code></li><li>以上之外，都为<code>RefStr</code>，即先从环境内取值，null时返回此字符串。</li></ul>',3);function u(y,x){const a=d("ExternalLinkIcon");return i(),r("div",null,[c,t("ul",null,[p,h,t("li",null,[e("使用 USE it._count|mod，如 "),t("a",g,[e("each-c7s1f7-i1.htm"),l(a)])]),t("li",null,[e("使用 WHEN it._count|mod，如 "),t("a",f,[e("each-c7s1f7-i2.htm"),l(a)])])]),m])}const _=s(o,[["render",u],["__file","b6.question.html.vue"]]);export{_ as default};
