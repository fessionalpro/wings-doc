import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as i,e as n}from"./app-BcJ4NaN5.js";const t={},a=n('<h1 id="_1a-auto-cascade-config" tabindex="-1"><a class="header-anchor" href="#_1a-auto-cascade-config"><span>1A.Auto Cascade Config</span></a></h1><p>Supports <code>split</code>, <code>override</code>, <code>disable</code> and <code>profile</code> of config files, which is more conducive to engineering management.</p><ul><li>Split - config items can be freely separated in the file by module, function, or profile.</li><li>Override - config file can be overridden with a certain priority (loading order)</li><li>Disable - disable config loading by block-list</li><li>Profile, just like Spring rules.</li></ul><p>The way Wings handles profiles is <code>cascading</code> and <code>filtering</code>, with configurations sorted by path order and file number.</p><ul><li>Cascading - sorting by priority (higher in front), higher overrides lower</li><li>Filtering - filtering by profile</li></ul><h2 id="_1a-1-split-config" tabindex="-1"><a class="header-anchor" href="#_1a-1-split-config"><span>1A.1.Split Config</span></a></h2><p>In actual project development, there is only one big <code>application.*</code>, which is not conducive to teamwork of division and collaboration. Any big things should be broken down.</p><ul><li>spring-datasource.properties</li><li>spring-mail-79.properties</li><li>logger-logback-79.properties</li></ul><p>Using <code>EnvironmentPostProcessor</code> to scan <code>/wings-conf/**/*. *</code> in the application <code>paths</code> , same rules as <a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#features.external-config" target="_blank" rel="noopener noreferrer">Externalized Configuration</a>, the <code>paths</code> and scaning priority of config file are as follows.</p><ol><li>command line arguments, <code>--spring.config.location</code>, <code>--spring.config.additional-location</code></li><li>Java System properties, <code>spring.config.location</code>, <code>spring.config.additional-location</code></li><li>OS environment variables, <code>SPRING_CONFIG_LOCATION</code>, <code>SPRING_CONFIG_ADDITIONALLOCATION</code></li><li>default path, <code>classpath:/,classpath:/config/,file:./,file:./config/</code></li><li><code>classpath:/</code> will be scanned as <code>classpath*:/</code></li><li>non-protocol(not contain <code>:</code>) is scanned as <code>file:</code></li><li>path ending with <code>/</code> is a directory, otherwise a file</li><li>in the path, load all <code>application.*</code> first, then <code>wings-conf/**/*.*</code>.</li></ol><p>Each config filename is made up of <code>dirname</code> + <code>basename</code> + <code>seq</code> + <code>profile</code> + <code>extname</code>. For example, <code>classpath:/wings-conf/</code> + <code>wings-mirana</code> + <code>-79</code> + <code>@dev</code> + <code>.properties</code>.</p><p>Currently, only <code>*.yml</code>, <code>*.yaml</code>, <code>*.xml</code>, <code>*.properties</code> configs are loaded. The default config <code>seq</code> is set to <code>-79</code> to easily override according to the filename sorting.</p><p>The same <code>basename</code> means the same configuration. no <code>seq</code> means its <code>seq</code> is <code>70</code>, higher than the default <code>79</code>,will override the default configuration. Config file as Resource, first sorted by scan order, then grouped by basename, adjusted by <code>seq</code> in ascending order (item override related).</p><p>Config files are UTF8 encoded, can better support unicode, can write unicode comments or content directly. Wings automatically escapes non-ascii when loading config to be compatible with Spring&#39;s default read-by-byte behavior.</p><h2 id="_1a-2-config-profile" tabindex="-1"><a class="header-anchor" href="#_1a-2-config-profile"><span>1A.2.Config Profile</span></a></h2><p>The <code>basename</code> must not contain <code>@</code> and the <code>profile</code> name must not contain <code>.</code> to avoid parsing errors. Compare with spring as follows.</p><ul><li><code>application.properties</code></li><li><code>application-{profile}.properties</code></li><li><code>wings-conf/wings-test-module-79.properties</code></li><li><code>wings-conf/wings-test-module-79@{profile}.properties</code></li></ul><p>The configs with the same <code>basename</code> are treated as the same group and the inactive profile is removed from the configs. Distinguish profiles by <code>@</code>, because the presence of <code>-</code> in wings config is incompatible with the spring format. When using <code>spring.profiles.active</code>, make sure that the configuration files are loaded according to Spring conventions.</p><p>There is also a difference in the processing of wings and spring. By default wings takes precedence over spring.</p><ul><li>application-{profile}, wings scan and sort, then spring process</li><li>wings-conf/layered-config@{profile}, wings scan and process</li><li>with-profile overlay without-profile, multiple active profiles cascading overlay</li><li>Dont put <code>application.*</code> in wings-conf/, double processing by spring and wings</li></ul><p>SpringBoot supports only one application in multi-profile form, so the config file has only path priority. In the case of multiple profiles, the processing order is ① exclude inactive ② active charset ordered (the latter takes precedence) ③ no profile at the end.</p><p>Wings supports multiple configs and multiple profiles, and its path priority and profile priority are consistent with Spring. In the multi-config priority, the processing order is ①profile ②path ③file seq ④charset order (the former takes precedence)</p><h2 id="_1a-3-loading-blocklist" tabindex="-1"><a class="header-anchor" href="#_1a-3-loading-blocklist"><span>1A.3.Loading BlockList</span></a></h2><p>Filenames that exist in <code>/wings-conf/wings-conf-block-list.cnf</code> will not be loaded.</p><ul><li>One filename per line, case sensitive</li><li>Line starting with <code>#</code> is comment, auto ignore first and last whitespace</li><li>Use <code>String.endWith</code> to determine, full path exact match</li><li>Block single <code>@profile</code>, need to specify separately</li></ul><h2 id="_1a-4-config-item-promotion" tabindex="-1"><a class="header-anchor" href="#_1a-4-config-item-promotion"><span>1A.4.Config Item Promotion</span></a></h2><p>Some non-Spring features are configured through System.getProperties. So you need to put the required config items from Spring into System.properties.</p><ul><li>Put if System does not exist, i.e. <code>-Dkey=value</code> has the highest priority</li><li>Variable names are stored in <code>/wings-conf/wings-prop-promotion.cnf</code>.</li><li>One property name per line, case sensitive, <code>#</code> for comments</li></ul><h2 id="_1a-5-logging-logback" tabindex="-1"><a class="header-anchor" href="#_1a-5-logging-logback"><span>1A.5.logging/logback</span></a></h2><p>Recommend to start with <code>wings-starter.sh</code> and pass arguments with <code>wings-starter.env</code>.</p><p>See <code>wings-logging-79.properties</code>, use springboot configuration by default.</p><ul><li>Only console output (eg. inside docker) no additional settings needed</li><li>Need both console and file, add <code>logging.file.name=/tmp/wings-example.log</code>.</li><li>Need only file, add <code>logging.config=classpath:logback-fileonly.xml</code>.</li><li>Configure appender level by name, if FILE exists, CONSOLE will auto switch to WARN (logback only)</li></ul><p>Recommended logging config, INFO default, DEBUG for specified package name</p><ul><li>logging.level.root=INFO</li><li>logging.level.org.springframework.web=DEBUG</li><li>logging.level.org.jooq=DEBUG</li><li>logging.level.{package.path}=OFF</li></ul><p>It is recommended to use <code>wings-starter.sh</code> to start, use <code>wings-starter.env</code> to pass args.</p><h2 id="_1a-6-dynamic-tweaking" tabindex="-1"><a class="header-anchor" href="#_1a-6-dynamic-tweaking"><span>1A.6.Dynamic Tweaking</span></a></h2><p>Triggers thread-level logging output based on business requirements and under certain conditions.</p><ul><li>TweakLogger - supports logback only, done through LogbackFilter</li><li>TweakClock - global or thread level time adjustment</li><li>TweakStack - global or thread level whether to output Stack</li><li>TweakFeature - global or thread level toggle feature</li></ul><h2 id="_1a-7-references" tabindex="-1"><a class="header-anchor" href="#_1a-7-references"><span>1A.7.References</span></a></h2><p><a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/" target="_blank" rel="noopener noreferrer">docs.spring.io</a></p><ul><li>&quot;4.1.6. Application Events and Listeners&quot;</li><li>&quot;4.2. Externalized Configuration&quot;</li><li>&quot;9.2.3. Change the Location of External Properties of an Application&quot;</li><li>&quot;9.1.3. Customize the Environment or ApplicationContext Before It Starts&quot;</li></ul>',41),l=[a];function r(c,s){return i(),o("div",null,l)}const g=e(t,[["render",r],["__file","1a-wings-conf.html.vue"]]),f=JSON.parse('{"path":"/1-silencer/1a-wings-conf.html","title":"1A.Auto Cascade Config","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"gear","category":["Silencer","Config"],"description":"1A.Auto Cascade Config Supports split, override, disable and profile of config files, which is more conducive to engineering management. Split - config items can be freely separ...","GIT_REPO_HEAD":"2024-07-07 fbb1f4817448a18f6c9bd497c9b5837508d2198e","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/1-silencer/1a-wings-conf.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/1-silencer/1a-wings-conf.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"1A.Auto Cascade Config"}],["meta",{"property":"og:description","content":"1A.Auto Cascade Config Supports split, override, disable and profile of config files, which is more conducive to engineering management. Split - config items can be freely separ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T07:19:44.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-19T07:19:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1A.Auto Cascade Config\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-19T07:19:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"1A.1.Split Config","slug":"_1a-1-split-config","link":"#_1a-1-split-config","children":[]},{"level":2,"title":"1A.2.Config Profile","slug":"_1a-2-config-profile","link":"#_1a-2-config-profile","children":[]},{"level":2,"title":"1A.3.Loading BlockList","slug":"_1a-3-loading-blocklist","link":"#_1a-3-loading-blocklist","children":[]},{"level":2,"title":"1A.4.Config Item Promotion","slug":"_1a-4-config-item-promotion","link":"#_1a-4-config-item-promotion","children":[]},{"level":2,"title":"1A.5.logging/logback","slug":"_1a-5-logging-logback","link":"#_1a-5-logging-logback","children":[]},{"level":2,"title":"1A.6.Dynamic Tweaking","slug":"_1a-6-dynamic-tweaking","link":"#_1a-6-dynamic-tweaking","children":[]},{"level":2,"title":"1A.7.References","slug":"_1a-7-references","link":"#_1a-7-references","children":[]}],"git":{"createdTime":1655901635000,"updatedTime":1718781584000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":6}]},"readingTime":{"minutes":2.95,"words":884},"filePathRelative":"1-silencer/1a-wings-conf.md","localizedDate":"June 22, 2022","autoDesc":true}');export{g as comp,f as data};
