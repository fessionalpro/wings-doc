import{_ as e,X as a,Y as i,a3 as t}from"./framework-e2173353.js";const n={},o=t(`<h1 id="b5-function-list" tabindex="-1"><a class="header-anchor" href="#b5-function-list" aria-hidden="true">#</a> B5.Function List</h1><p>For more details on function usage, see the [Dictionary Engine Map] for pipeline conventions and function rules.</p><p>Both full function names and aliases start with <code>fun:</code>; if there is no conflict in pipeline, the prefix can be omitted.</p><p>The following conventions for describing functions are used in the example,</p><ul><li><code>obj</code> - Specifies pipeline output, or null if unavailable</li><li><code>arg...</code> - arg is a variable arguments</li><li><code>arg?</code> - arg can be null</li><li><code>&amp;opt</code> - opt is the default value</li><li><code>String:javaEval</code> - Return type String, function type is javaEval</li></ul><p>The following forms are available to use in the template,</p><ul><li><code>{{ now }}</code> - use directly</li><li><code>{{ index | mod even odd | BIG_SNAKE }}</code> - pipeline function</li></ul><h2 id="b5-1-type-of-date-time" tabindex="-1"><a class="header-anchor" href="#b5-1-type-of-date-time" aria-hidden="true">#</a> B5.1.Type of Date/Time</h2><p>Focuse on Date and time, mainly value and format.</p><h3 id="current-data-time-now" tabindex="-1"><a class="header-anchor" href="#current-data-time-now" aria-hidden="true">#</a> Current Data/Time <code>now</code></h3><p>Usage: String:javaEval, output the current date/time in specified format<br> Syntax: fun:now ptn?</p><ul><li>obj - if <code>java.util.Date</code> or <code>TemporalAccessor</code>, then formatted,</li><li>if null or other, use <code>LocalDateTime.now()</code></li><li>ptn - in <code>DateTimeFormatter</code> format.</li><li><code>now</code> - without parameter, then <code>yyyy-MM-dd HH:mm:ss</code></li><li><code>now.date</code> - without parameter, output <code>yyyy-MM-dd</code></li><li><code>now.time</code> - without parameter output <code>HH:mm:ss</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># ptn contains spaces surrounded by quotes
{{ now &#39;yyyy-MM-dd HH:mm:ss&#39; }}
# output 2021-01-05 10:01:31
// RNA:USE /date/fun:now/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-2-type-of-number" tabindex="-1"><a class="header-anchor" href="#b5-2-type-of-number" aria-hidden="true">#</a> B5.2.Type of Number</h2><p>Focuse on Number, mainly Long and BigDecimal</p><h3 id="modulo-and-remainder-mod" tabindex="-1"><a class="header-anchor" href="#modulo-and-remainder-mod" aria-hidden="true">#</a> Modulo and Remainder <code>mod</code></h3><p>Usage: String:javaEval, Take MOD(obj, args.length) as index(0-based) to get the index element in args<br> Syntax: fun:mod obj arg...<br> Return: using mod as index, get element in args, then get value from context</p><ul><li>obj - can convert to Number.intValue, take the remainder of arg.length <ul><li>Boolean, false=0, true=1</li><li>Number, intValue</li><li>Else, toString then to BigDecimal</li></ul></li><li>arg - must have value, can be string or number</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># index = 3; count = 4;
{{ index | mod even odd }}
{{ count | mod even &quot;&quot; }}
# output odd even
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="absolute-value-abs" tabindex="-1"><a class="header-anchor" href="#absolute-value-abs" aria-hidden="true">#</a> Absolute Value <code>abs</code></h3><p>Usage: String:javaEval, Take the absolute value of the number<br> Syntax: fun:abs obj<br> Return: Absolute value in Long or BigDecimal type</p><ul><li>obj - can convert to Number, return Long or BigDecimal</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># npi = -3.14; count = 4;
{{ npi | abs }}
{{ count | abs }}
# output 3.14 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-3-formatting-fmt" tabindex="-1"><a class="header-anchor" href="#b5-3-formatting-fmt" aria-hidden="true">#</a> B5.3.Formatting <code>fmt</code></h2><p>Formatting object as string</p><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf</h3><p>Usage: String:javaEval, use String.printf to format object<br> Syntax: fun:fmt obj ptn<br> Return: String in specified pattern</p><ul><li>obj - any object</li><li>ptn - java&#39;s formatting, call String.format(ptn,obj)</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># amount = 1000
{{ amount | fmt &#39;$%,d&#39; }}
# output $1,000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-4-type-of-string" tabindex="-1"><a class="header-anchor" href="#b5-4-type-of-string" aria-hidden="true">#</a> B5.4.Type of String</h2><p>Focuse on String</p><h3 id="naming-style" tabindex="-1"><a class="header-anchor" href="#naming-style" aria-hidden="true">#</a> Naming Style</h3><p>Usage: String:javaEval, Naming style conversion for obj<br> Syntax: fun:### obj arg?, ### is the following function and aliase<br> Return: String in specified style</p><ul><li>upperCase - All uppercase, support locale</li><li>lowerCase - All lowercase, support locale</li><li>dotCase - <code>.</code> separated, customizable case, eg. try.do.for</li><li>kebabCase, kebab-case - <code>-</code> separated, customizable case, eg. try-do-for</li><li>bigKebab, BIG-KEBAB - <code>-</code> separated, all uppercase, eg. TRY-DO-FOR</li><li>camelCase - camel, first lowercase, eg. tryDoFor</li><li>pascalCase, PascalCase - Pascal , first upcasecase eg. TryDoFor</li><li>snakeCase, snake_case - <code>_</code> separated, customizable case, eg. try_do_for</li><li>bigSnake, BIG_SNAKE - <code>_</code> separated, all uppercase, eg. TRY_DO_FOR</li></ul><p>Parameter Description,</p><ul><li>obj - String, or toString, null returns empty</li><li>arg - in upperCase or lowerCase, is locale format</li><li>arg - in dotCase,snakeCase,kebabCase, is lower,upper,keep</li><li>others function without arg, no customizable case</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># author = try&amp;DO&amp;for
{{ author | upperCase zh-cn }} #output TRY&amp;DO&amp;FOR
{{ author | lowerCase zh-cn }} #output try&amp;do&amp;for
{{ author | dotCase }}         #output try.do.for
{{ author | dotCase lower }}   #output try.do.for
{{ author | dotCase upper }}   #output TRY.DO.FOR
{{ author | dotCase keep }}    #output try.DO.for
{{ author | kebab-case }}      #output try-do-for
{{ author | BIG-KEBAB }}       #output TRY-DO-FOR
{{ author | camelCase }}       #output tryDoFor
{{ author | PascalCase }}      #output TryDoFor
{{ author | snake_case }}      #output try_do_for
{{ author | BIG_SNAKE }}       #output TRY_DO_FOR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-5-condition-control" tabindex="-1"><a class="header-anchor" href="#b5-5-condition-control" aria-hidden="true">#</a> B5.5.Condition Control</h2><p>Simple conditional output control.</p><h3 id="output-visible-see" tabindex="-1"><a class="header-anchor" href="#output-visible-see" aria-hidden="true">#</a> Output visible <code>see</code></h3><p>Usage: String:javaEval, output the first visiable value in arg<br> Syntax: fun:see obj arg...<br> Return: The first non-null or non-empty string in arg or obj itself</p><ul><li>obj - any object</li><li>arg - String or other objects</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># ctx.put(&quot;nil&quot;, null);
#  ctx.put(&quot;empty&quot;, &quot;&quot;);
#  ctx.put(&quot;value&quot;, &quot;got&quot;);
{{ fun:see nil empty value }}
{{ nil | fun:see empty value }}
# output got
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),r=[o];function l(d,s){return a(),i("div",null,r)}const c=e(n,[["render",l],["__file","b5.function.html.vue"]]);export{c as default};
