import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,e as i}from"./app-BT4uJ8Vu.js";const t={},s=i(`<h1 id="b5-function-list" tabindex="-1"><a class="header-anchor" href="#b5-function-list"><span>B5.Function List</span></a></h1><p>For more details on function usage, see the [Dictionary Engine Map] for pipeline conventions and function rules.</p><p>Both full function names and aliases start with <code>fun:</code>; if there is no conflict in pipeline, the prefix can be omitted.</p><p>The following conventions for describing functions are used in the example,</p><ul><li><code>obj</code> - Specifies pipeline output, or null if unavailable</li><li><code>arg...</code> - arg is a variable arguments</li><li><code>arg?</code> - arg can be null</li><li><code>&amp;opt</code> - opt is the default value</li><li><code>String:javaEval</code> - Return type String, function type is javaEval</li></ul><p>The following forms are available to use in the template,</p><ul><li><code>{{ now }}</code> - use directly</li><li><code>{{ index | mod even odd | BIG_SNAKE }}</code> - pipeline function</li></ul><h2 id="b5-1-type-of-date-time" tabindex="-1"><a class="header-anchor" href="#b5-1-type-of-date-time"><span>B5.1.Type of Date/Time</span></a></h2><p>Focus on Date and time, mainly value and format.</p><h3 id="_1a-current-data-time-now" tabindex="-1"><a class="header-anchor" href="#_1a-current-data-time-now"><span>1a.Current Data/Time <code>now</code></span></a></h3><p>Usage: String:javaEval, output the current date/time in specified format Syntax: fun:now ptn?</p><ul><li>obj - if <code>java.util.Date</code> or <code>TemporalAccessor</code>, then formatted,</li><li>if null or other, use <code>LocalDateTime.now()</code></li><li>ptn - in <code>DateTimeFormatter</code> format.</li><li><code>now</code> - without parameter, then <code>yyyy-MM-dd HH:mm:ss</code></li><li><code>now.date</code> - without parameter, output <code>yyyy-MM-dd</code></li><li><code>now.time</code> - without parameter output <code>HH:mm:ss</code></li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># ptn contains spaces surrounded by quotes</span></span>
<span class="line"><span>{{ now &#39;yyyy-MM-dd HH:mm:ss&#39; }}</span></span>
<span class="line"><span># output 2021-01-05 10:01:31</span></span>
<span class="line"><span>// RNA:USE /date/fun:now/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-2-type-of-number" tabindex="-1"><a class="header-anchor" href="#b5-2-type-of-number"><span>B5.2.Type of Number</span></a></h2><p>Focus on Number, mainly Long and BigDecimal</p><h3 id="_2a-modulo-and-remainder-mod" tabindex="-1"><a class="header-anchor" href="#_2a-modulo-and-remainder-mod"><span>2a.Modulo and Remainder <code>mod</code></span></a></h3><p>Usage: String:javaEval, Take MOD(obj, args.length) as index(0-based) to get the index element in args Syntax: fun:mod obj arg... Return: using mod as index, get element in args, then get value from context</p><ul><li>obj - can convert to Number.intValue, take the remainder of arg.length <ul><li>Boolean, false=0, true=1</li><li>Number, intValue</li><li>Else, toString then to BigDecimal</li></ul></li><li>arg - must have value, can be string or number</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># index = 3; count = 4;</span></span>
<span class="line"><span>{{ index | mod even odd }}</span></span>
<span class="line"><span>{{ count | mod even &quot;&quot; }}</span></span>
<span class="line"><span># output odd even</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2b-absolute-value-abs" tabindex="-1"><a class="header-anchor" href="#_2b-absolute-value-abs"><span>2b.Absolute Value <code>abs</code></span></a></h3><p>Usage: String:javaEval, Take the absolute value of the number Syntax: fun:abs obj Return: Absolute value in Long or BigDecimal type</p><ul><li>obj - can convert to Number, return Long or BigDecimal</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># npi = -3.14; count = 4;</span></span>
<span class="line"><span>{{ npi | abs }}</span></span>
<span class="line"><span>{{ count | abs }}</span></span>
<span class="line"><span># output 3.14 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-3-formatting-fmt" tabindex="-1"><a class="header-anchor" href="#b5-3-formatting-fmt"><span>B5.3.Formatting <code>fmt</code></span></a></h2><p>Formatting object as string</p><h3 id="_3a-printf" tabindex="-1"><a class="header-anchor" href="#_3a-printf"><span>3a.printf</span></a></h3><p>Usage: String:javaEval, use String.printf to format object Syntax: fun:fmt obj ptn Return: String in specified pattern</p><ul><li>obj - any object</li><li>ptn - java&#39;s formatting, call String.format(ptn,obj)</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># amount = 1000</span></span>
<span class="line"><span>{{ amount | fmt &#39;$%,d&#39; }}</span></span>
<span class="line"><span># output $1,000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-4-type-of-string" tabindex="-1"><a class="header-anchor" href="#b5-4-type-of-string"><span>B5.4.Type of String</span></a></h2><p>Focus on String</p><h3 id="_4a-naming-style" tabindex="-1"><a class="header-anchor" href="#_4a-naming-style"><span>4a.Naming Style</span></a></h3><p>Usage: String:javaEval, Naming style conversion for obj Syntax: fun:### obj arg?, ### is the following function and alias Return: String in specified style</p><ul><li>upperCase - All uppercase, support locale</li><li>lowerCase - All lowercase, support locale</li><li>dotCase - <code>.</code> separated, customizable case, eg. try.do.for</li><li>kebabCase, kebab-case - <code>-</code> separated, customizable case, eg. try-do-for</li><li>bigKebab, BIG-KEBAB - <code>-</code> separated, all uppercase, eg. TRY-DO-FOR</li><li>camelCase - camel, first lowercase, eg. tryDoFor</li><li>pascalCase, PascalCase - Pascal , first uppercase eg. TryDoFor</li><li>snakeCase, snake_case - <code>_</code> separated, customizable case, eg. try_do_for</li><li>bigSnake, BIG_SNAKE - <code>_</code> separated, all uppercase, eg. TRY_DO_FOR</li></ul><p>Parameter Description,</p><ul><li>obj - String, or toString, null returns empty</li><li>arg - in upperCase or lowerCase, is locale format</li><li>arg - in dotCase,snakeCase,kebabCase, is lower,upper,keep</li><li>others function without arg, no customizable case</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># author = try&amp;DO&amp;for</span></span>
<span class="line"><span>{{ author | upperCase zh-cn }} #output TRY&amp;DO&amp;FOR</span></span>
<span class="line"><span>{{ author | lowerCase zh-cn }} #output try&amp;do&amp;for</span></span>
<span class="line"><span>{{ author | dotCase }}         #output try.do.for</span></span>
<span class="line"><span>{{ author | dotCase lower }}   #output try.do.for</span></span>
<span class="line"><span>{{ author | dotCase upper }}   #output TRY.DO.FOR</span></span>
<span class="line"><span>{{ author | dotCase keep }}    #output try.DO.for</span></span>
<span class="line"><span>{{ author | kebab-case }}      #output try-do-for</span></span>
<span class="line"><span>{{ author | BIG-KEBAB }}       #output TRY-DO-FOR</span></span>
<span class="line"><span>{{ author | camelCase }}       #output tryDoFor</span></span>
<span class="line"><span>{{ author | PascalCase }}      #output TryDoFor</span></span>
<span class="line"><span>{{ author | snake_case }}      #output try_do_for</span></span>
<span class="line"><span>{{ author | BIG_SNAKE }}       #output TRY_DO_FOR</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b5-5-condition-control" tabindex="-1"><a class="header-anchor" href="#b5-5-condition-control"><span>B5.5.Condition Control</span></a></h2><p>Simple conditional output control.</p><h3 id="_5a-output-visible-see" tabindex="-1"><a class="header-anchor" href="#_5a-output-visible-see"><span>5a.Output visible <code>see</code></span></a></h3><p>Usage: String:javaEval, output the first visible value in arg Syntax: fun:see obj arg... Return: The first non-null or non-empty string in arg or obj itself</p><ul><li>obj - any object</li><li>arg - String or other objects</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># ctx.put(&quot;nil&quot;, null);</span></span>
<span class="line"><span>#  ctx.put(&quot;empty&quot;, &quot;&quot;);</span></span>
<span class="line"><span>#  ctx.put(&quot;value&quot;, &quot;got&quot;);</span></span>
<span class="line"><span>{{ fun:see nil empty value }}</span></span>
<span class="line"><span>{{ nil | fun:see empty value }}</span></span>
<span class="line"><span># output got</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),l=[s];function o(r,d){return n(),a("div",null,l)}const u=e(t,[["render",o],["__file","b5.function.html.vue"]]),m=JSON.parse('{"path":"/b-meepo/b5.function.html","title":"B5.Function List","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"folder-tree","category":["Meepo","Template"],"description":"B5.Function List For more details on function usage, see the [Dictionary Engine Map] for pipeline conventions and function rules. Both full function names and aliases start with...","GIT_REPO_HEAD":"2025-01-28 900f8d7f901cad2172a025862418812b0d068d29","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/b-meepo/b5.function.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/b-meepo/b5.function.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"B5.Function List"}],["meta",{"property":"og:description","content":"B5.Function List For more details on function usage, see the [Dictionary Engine Map] for pipeline conventions and function rules. Both full function names and aliases start with..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"B5.Function List\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"B5.1.Type of Date/Time","slug":"b5-1-type-of-date-time","link":"#b5-1-type-of-date-time","children":[{"level":3,"title":"1a.Current Data/Time now","slug":"_1a-current-data-time-now","link":"#_1a-current-data-time-now","children":[]}]},{"level":2,"title":"B5.2.Type of Number","slug":"b5-2-type-of-number","link":"#b5-2-type-of-number","children":[{"level":3,"title":"2a.Modulo and Remainder mod","slug":"_2a-modulo-and-remainder-mod","link":"#_2a-modulo-and-remainder-mod","children":[]},{"level":3,"title":"2b.Absolute Value abs","slug":"_2b-absolute-value-abs","link":"#_2b-absolute-value-abs","children":[]}]},{"level":2,"title":"B5.3.Formatting fmt","slug":"b5-3-formatting-fmt","link":"#b5-3-formatting-fmt","children":[{"level":3,"title":"3a.printf","slug":"_3a-printf","link":"#_3a-printf","children":[]}]},{"level":2,"title":"B5.4.Type of String","slug":"b5-4-type-of-string","link":"#b5-4-type-of-string","children":[{"level":3,"title":"4a.Naming Style","slug":"_4a-naming-style","link":"#_4a-naming-style","children":[]}]},{"level":2,"title":"B5.5.Condition Control","slug":"b5-5-condition-control","link":"#b5-5-condition-control","children":[{"level":3,"title":"5a.Output visible see","slug":"_5a-output-visible-see","link":"#_5a-output-visible-see","children":[]}]}],"git":{"createdTime":1656934972000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":5}]},"readingTime":{"minutes":2.21,"words":664},"filePathRelative":"b-meepo/b5.function.md","localizedDate":"July 4, 2022","autoDesc":true}');export{u as comp,m as data};
