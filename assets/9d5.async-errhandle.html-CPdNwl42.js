import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,e as a}from"./app-BcJ4NaN5.js";const i={},l=a(`<h1 id="_9d5-async-and-errhandle" tabindex="-1"><a class="header-anchor" href="#_9d5-async-and-errhandle"><span>9D5.Async and Errhandle</span></a></h1><p>In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing.</p><ul><li>Async methods - naming and signing</li><li>Exception handling - exceptions should not be eaten</li><li>Thread pool - thread allocation</li></ul><h2 id="_9d5-1-async-annotation" tabindex="-1"><a class="header-anchor" href="#_9d5-1-async-annotation"><span>9D5.1.Async Annotation</span></a></h2><p>Methods with <code>@Async</code> run in the <code>taskExecutor</code> thread pool, with the default prefix <code>exec-</code>.</p><ul><li>Method name, suffix <code>Async</code>, e.g. <code>orderAsync</code>.</li><li>Return type, use <code>Future</code>, e.g. <code>CompletableFuture</code>.</li></ul><p>In the following code, should NOT use the <code>void</code> method, use <code>Future&lt;Void&gt;</code> and <code>.complete(null)</code> instead. Their main difference is the handling of uncaught exceptions, <code>void</code> eats exceptions and cannot be passed to the caller.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Async</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> badAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // exception handled by AsyncConfigurer#getAsyncUncaughtExceptionHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Async</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Void</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> goodAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // exception handled by caller via AOP/ExceptionHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">completedFuture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9d5-2-async-webmvc" tabindex="-1"><a class="header-anchor" href="#_9d5-2-async-webmvc"><span>9D5.2.Async webMvc</span></a></h2><p>SpringMvc RequestMapping cannot use <code>@Async</code>, which accomplishes async via the return type.</p><ul><li><code>Future</code> - combines async service</li><li><code>Callable</code> - combines sync services, using the <code>applicationTaskExecutor</code> thread pool, with the default prefix <code>app-exec-</code></li><li><code>DeferredResult</code> - equivalent to passing context, not recommended</li></ul><p>In SpringBoot 3.2, thread pools and exceptions are handled as follows, where the</p><ul><li>request and response use the mvc thread pool respectively</li><li>service methods use <code>app-exec-</code> or <code>exec-</code> depending on how they are called</li><li>UncaughtException uses <code>AsyncUncaughtExceptionHandler</code> only if <code>void</code></li><li>FailedFuture or non-<code>void</code> UncaughtException uses <code>ExceptionHandler</code></li></ul><p>The log output, roughly as follows, is detailed in <code>AsyncControllerTest</code></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>## \`Future\` runs in 3 threads</span></span>
<span class="line"><span>XNIO-1 o.s.web.servlet.DispatcherServlet</span></span>
<span class="line"><span>XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping</span></span>
<span class="line"><span>XNIO-1 p.f.w.s.a.c.TestAsyncController</span></span>
<span class="line"><span>exec-2 p.f.w.s.app.service.TestAsyncService</span></span>
<span class="line"><span>XNIO-1 o.s.w.c.request.async.WebAsyncManager : Async result set</span></span>
<span class="line"><span>XNIO-1 o.s.web.servlet.DispatcherServlet : Exiting but response remains open</span></span>
<span class="line"><span>## UncaughtException in exec thread-pool</span></span>
<span class="line"><span>exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch</span></span>
<span class="line"><span>## FailedFuture in exec thread-pool</span></span>
<span class="line"><span>exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch</span></span>
<span class="line"><span>XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch</span></span>
<span class="line"><span>XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## \`Callable\` runs in 3 threads, with \`applicationTaskExecutor\`</span></span>
<span class="line"><span>XNIO-1 o.s.web.servlet.DispatcherServlet</span></span>
<span class="line"><span>XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping</span></span>
<span class="line"><span>app-exec-2 p.f.w.s.app.service.TestAsyncService</span></span>
<span class="line"><span>app-exec-2 o.s.w.c.request.async.WebAsyncManager : Async result set</span></span>
<span class="line"><span>## sync Exception in exec thread-pool</span></span>
<span class="line"><span>app-exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch</span></span>
<span class="line"><span>XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch</span></span>
<span class="line"><span>XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## \`DeferredResult\` runs in 3 threads</span></span>
<span class="line"><span>XNIO-1 o.s.web.servlet.DispatcherServlet</span></span>
<span class="line"><span>XNIO-1 s.w.s.m.m.a.RequestMappingHandlerMapping</span></span>
<span class="line"><span>XNIO-1 p.f.w.s.a.c.TestAsyncController</span></span>
<span class="line"><span>exec-2 p.f.w.s.app.service.TestAsyncService</span></span>
<span class="line"><span>exec-2 o.s.w.c.request.async.WebAsyncManager : Async result set</span></span>
<span class="line"><span>XNIO-1 o.s.web.servlet.DispatcherServlet : Exiting but response remains open</span></span>
<span class="line"><span>## UncaughtException in web thread-pool</span></span>
<span class="line"><span>XNIO-1 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch</span></span>
<span class="line"><span>## FailedFuture in exec thread-pool</span></span>
<span class="line"><span>exec-2 o.s.w.c.request.async.WebAsyncManager : Async error, dispatch</span></span>
<span class="line"><span>XNIO-3 o.s.web.servlet.DispatcherServlet : &quot;ASYNC&quot; dispatch</span></span>
<span class="line"><span>XNIO-3 s.w.s.m.m.a.RequestMappingHandlerAdapter : Resume with async result</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),t=[l];function c(p,r){return n(),e("div",null,t)}const h=s(i,[["render",c],["__file","9d5.async-errhandle.html.vue"]]),u=JSON.parse('{"path":"/9-example/9d.wings-boot/9d5.async-errhandle.html","title":"9D5.Async and Errhandle","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"hand","category":["Practice","Manual","Async"],"description":"9D5.Async and Errhandle In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing. Async methods - nami...","GIT_REPO_HEAD":"2024-07-07 fbb1f4817448a18f6c9bd497c9b5837508d2198e","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/9-example/9d.wings-boot/9d5.async-errhandle.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/9-example/9d.wings-boot/9d5.async-errhandle.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"9D5.Async and Errhandle"}],["meta",{"property":"og:description","content":"9D5.Async and Errhandle In practice, we advocate sync first, and sync as much as possible. The following practices are followed when using async processing. Async methods - nami..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9D5.Async and Errhandle\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"9D5.1.Async Annotation","slug":"_9d5-1-async-annotation","link":"#_9d5-1-async-annotation","children":[]},{"level":2,"title":"9D5.2.Async webMvc","slug":"_9d5-2-async-webmvc","link":"#_9d5-2-async-webmvc","children":[]}],"git":{"createdTime":1715162865000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":2}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"9-example/9d.wings-boot/9d5.async-errhandle.md","localizedDate":"May 8, 2024","autoDesc":true}');export{h as comp,u as data};
