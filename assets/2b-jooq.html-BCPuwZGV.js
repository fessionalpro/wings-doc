import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,g as a,o as t}from"./app-q0R425qv.js";const n={};function l(o,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_2b-typesafe-dsl-sqlmapping" tabindex="-1"><a class="header-anchor" href="#_2b-typesafe-dsl-sqlmapping"><span>2B.Typesafe DSL SqlMapping</span></a></h1><blockquote><p>Time Walk, Rushes to a target location while backtracking any damage taken in the last 2 seconds. Faceless Void is invulnerable during Time Walk.</p></blockquote><ul><li>Auto generate the Jooq code, eg. pojo, table, dao.</li><li>Typesafe Jooq ensures the stability of the data changes and refactorings.</li></ul><h2 id="_2b-1-typesafe-database-operation" tabindex="-1"><a class="header-anchor" href="#_2b-1-typesafe-database-operation"><span>2B.1.Typesafe Database Operation</span></a></h2><p>SqlMapping is recommended because the ORM is too heavy, and Jooq and JdbcTemplate are welcome in the project.</p><p>MyBatis is the first choice for most projects in China, inherent in its excellence, but its lack of constraint power and the laziness of developers makes string-based sql difficult to refactor safely, and the following problems will come easily.</p><ul><li>Often <code>select *</code> queries with lots of useless fields</li><li>Easy to write large complex SQL to difficult to split the service</li><li>String-based and weak type limit the intelligent refactoring of the IDE</li></ul><p>Jooq and its strong types make programming better than configuration, syntax better than strings, SQL expression friendly and just the right amount of ability to limit the ability to do the right things.</p><p>Use <code>WingsCodeGenerator</code> to auto generate jooq code programmatically (without maven). By convention, the generated code is under <code>database/autogen/</code> and the manual code is under <code>database/manual/</code>.</p><p>If you encounter a compilation error caused by wings or jooq and cannot generate code in the current project, you need to create a new small project, only rely on the new version of wings, and run the code generation tool.</p><p>Automatically generated <code>*Dao</code> have a lot of usable methods. They can be used to manipulate the database directly.</p><ul><li><code>getAlias</code> get the alias used for select, <code>Table as az</code><ul><li>At runtime, the Table is unique, named by the excel index format</li><li>When self-naming, use numeric endings to avoid conflicts with the system.</li></ul></li><li><code>getTable</code> get the table for modification without alias, <code>Table</code></li><li>Bulk insert and update large amounts of data, using batch of PreparedStatement</li><li>Use mysql special syntax, <code>insert ignore</code> or <code>replace into</code> to handle duplicate data</li><li>Partially update of unique records using <code>on duplicate key update</code> or <code>select+insert+update</code>.</li></ul><p>Important note, when using alias table and plain table together, you must guarantee that they are come from the same Dao instance, otherwise a syntax error will be thrown.</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> da </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dao.alias</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// val rd = dao.fetch(da.Id.eq(id))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// alias and table are different ref, syntax error thrown.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// select * from win_user where \`y8\`.\`id\` = ?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dao.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(da, da.Id.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When there are complex data operations and the code must be written by hand, the following conventions are used.</p><ul><li>Any database operations should be done inside the <code>database</code> package</li><li>DSLContext and DataSource should not leave the database layer</li><li><code>single/</code> package, means single table, can contain simple conditional subqueries, one package name for one table</li><li><code>couple/</code> package, means multiple tables, usually join queries or subqueries, package name is named using the main table</li><li>Coupled operations, suggest tagging <code>@CouplingSelect</code>, <code>@CouplingModify</code></li><li><code>select|modify</code> correspond to database operations respectively</li><li>Also <code>select|insert|update|delete</code> can be classified, but with lots of @Autowired</li><li>Data transfer ends with Dto and is placed closest to the use</li><li>Dto exists as a static inner class, use lombok @Value or @Data</li><li><code>forUpdate</code> with lock operation, method name ends with <code>Lock</code></li><li>Class name should be in <code>TableName</code>+<code>Insert|Modify</code></li><li>jooq <code>Record</code> is equivalent to <code>Dao</code> should not be used externally, it should be <code>Pojo</code> or <code>Dto</code> to transfer data</li><li>Mainly use Dao, just do the DSL and other related operations</li></ul><p>In naming, the interface should be named directly , without prefix and suffix, Dto are placed inside the interface as a part of the contract. Implementation classes, placed inside the <code>impl/</code> package, with a suffix to indicate a different way of implementation.</p><ul><li><code>Jooq</code> - Jooq implementation</li><li><code>Jdbc</code> - JdbcTemplate implementation</li><li><code>Impl</code> - Mixed implementation</li></ul><p>When forcing the use of the master in read/write separation, you can use <code>@MasterRouteOnly</code>, eg. <code>LightId</code></p><p>JdbcTemplate is used for functional or complex database operations. If you have a lot of jdbc operations in your project and jdbcTemplate is less powerful, you can consider <a href="http://jdbi.org" target="_blank" rel="noopener noreferrer">JDBI</a></p><h2 id="_2b-2-sharding-compatibility" tabindex="-1"><a class="header-anchor" href="#_2b-2-sharding-compatibility"><span>2B.2.Sharding Compatibility</span></a></h2><p><code>flywave</code> extends and enhances jooq&#39;s <code>Dao</code> and splits by type into <code>reader</code> and <code>writer</code> tables, and tracking tables.</p><p>It is highly recommended to use <code>Dao</code> for basic CRUD operations, see <code>JooqShardingTest.kt</code>. When constructing complex sql with DSL, read/write separation should be considered. For more complex sql it is recommended to use jdbcTemplate.</p><p>Jooq generates code that uses <code>table.column</code> to qualify filed by default, but ShardingJdbc does not currently support this . The best solution is to wait until ShardingJdbc support it, and the easiest way at the moment is to change the Jooq generation policy, see the following Issue.</p><ul><li><a href="https://github.com/jOOQ/jOOQ/issues/8893" target="_blank" rel="noopener noreferrer">JOOQ#8893 Add Settings.renderTable</a></li><li><a href="https://github.com/jOOQ/jOOQ/pull/9055" target="_blank" rel="noopener noreferrer">JOOQ#9055 should NO table qualify if NO table alias</a></li><li><a href="https://github.com/apache/incubator-shardingsphere/issues/2859" target="_blank" rel="noopener noreferrer">ShardingSphere#2859 <code>table.column</code> can not sharding</a></li><li><a href="https://github.com/apache/shardingsphere/issues/5330" target="_blank" rel="noopener noreferrer">ShardingSphere#5330 replace into</a></li><li><a href="https://github.com/apache/shardingsphere/issues/5210" target="_blank" rel="noopener noreferrer">ShardingSphere#5210 on duplicate key update</a></li></ul><p>Prior to jooq <code>3.20</code>, use <code>wings.faceless.jooq.conf.auto-qualify=true</code> to enable the automatic processing of qualified names, with the rule that <code>no qualified name if no alias</code>.</p><p>The main reason for using Jooq is <code>The Art of Restraint</code>, which avoids writing hard SQL that is too hard to maintain.</p><ul><li>Encourage single table operations in the <code>single</code> package, using <code>plain</code> (eg. WinUserLoginTable)</li><li>When operating on multiple tables, <code>alias</code> (eg. WinUserLoginTable.asA2) is preferred</li><li>INSERT uses <code>plain</code>, not <code>alias</code>.</li><li>DELETE uses <code>plain</code>, not <code>alias</code>.</li><li>UPDATE uses <code>alias</code> over <code>plain</code>.</li><li>SELECT use <code>plain</code> for single table; <code>alias</code> over <code>plain</code> for multiple tables</li><li><strong>Don&#39;t</strong> use Chinese table names, the example code is just an extreme test.</li></ul><h2 id="_2b-3-record-mapper" tabindex="-1"><a class="header-anchor" href="#_2b-3-record-mapper"><span>2B.3.Record Mapper</span></a></h2><p>Jooq has Mappers by default, both case sensitive, as follows</p><ul><li>DefaultRecordMapper is for Record#into(Class), Result#into(Class)</li><li>DefaultRecordUnmapper is for DSL.newRecord(Table, Object), Record#from(Object)</li></ul><p>SimpleFlatMapper is more lenient and case-insensitive, but has the following shortcomings.</p><ul><li><a href="https://github.com/arnaudroger/SimpleFlatMapper/issues/764" target="_blank" rel="noopener noreferrer">bug with intoArray</a></li><li>No support for primitive type, such as int.class, only Integer.class</li></ul><p>Officially inactive for more than 2 years after the last commit on 2020-05-11, wings has removed it in October 2022.</p><p>ModelMapper is also better, but its size is too large (4.5M), currently, there is no need to use it, and it is not fully tested in wings.</p><h2 id="_2b-4-mock-test-data" tabindex="-1"><a class="header-anchor" href="#_2b-4-mock-test-data"><span>2B.4.Mock Test Data</span></a></h2><p>According to <a href="https://www.jooq.org/doc/latest/manual/sql-execution/mocking-connection" target="_blank" rel="noopener noreferrer">Mocking Connection</a>, there are 2 Mock way in wings,</p><ul><li><code>@Bean ConnectionProvider</code> - global inject, app level</li><li><code>Dao.setDslContext</code> - instance level (default singleton)</li></ul><p>Referring the following source code,</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;wings.faceless.testing.mock-jooq&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> havingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConnectionProvider</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mockConnectionProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    MockDataProvider</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> provider </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MockTstNormalTableDataProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    MockConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connection </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MockConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(provider)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DefaultConnectionProvider</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> delegate </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DefaultConnectionProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(connection)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MockConnectionProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(delegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> provider)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> manualInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> provider </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MockTstNormalTableDataProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // provider.setRecord(m);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    MockConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connection </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MockConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(provider)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DSLContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dsl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DSL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">using</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(connection, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SQLDialect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MYSQL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    tstNormalTableDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setDslContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dsl);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TstNormalTable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> r2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> tstNormalTableDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetchById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // clean</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    tstNormalTableDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setDslContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2b-9-references" tabindex="-1"><a class="header-anchor" href="#_2b-9-references"><span>2B.9.References</span></a></h2><ul><li><a href="https://github.com/trydofor/jOOQ/commit/0be23d2e90a1196def8916b9625fbe2ebffd4753" target="_blank" rel="noopener noreferrer">Jooq patch</a></li><li><a href="https://www.jooq.org/doc/3.12/manual/sql-execution/crud-with-updatablerecords/batch-execution-for-crud/" target="_blank" rel="noopener noreferrer">Batch Execution record</a></li><li><a href="https://www.jooq.org/doc/3.12/manual/sql-execution/batch-execution/" target="_blank" rel="noopener noreferrer">Batch Execution jdbc</a></li><li><a href="https://www.jooq.org/doc/3.12/manual/sql-building/table-expressions/aliased-tables/" target="_blank" rel="noopener noreferrer">Aliases in table splitting</a></li><li><a href="https://www.jooq.org/doc/3.12/manual/sql-execution/" target="_blank" rel="noopener noreferrer">Sql Execution</a></li></ul>`,42)]))}const d=i(n,[["render",l],["__file","2b-jooq.html.vue"]]),p=JSON.parse('{"path":"/2-faceless/2b-jooq.html","title":"2B.Typesafe DSL SqlMapping","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"bolt","category":["Faceless","TypeSafe","Jooq"],"description":"2B.Typesafe DSL SqlMapping Time Walk, Rushes to a target location while backtracking any damage taken in the last 2 seconds. Faceless Void is invulnerable during Time Walk. Auto...","GIT_REPO_HEAD":"2025-04-02 da9b4e04fc94cbc914e3a6d86b8766465737f2f7","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/2-faceless/2b-jooq.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/2-faceless/2b-jooq.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"2B.Typesafe DSL SqlMapping"}],["meta",{"property":"og:description","content":"2B.Typesafe DSL SqlMapping Time Walk, Rushes to a target location while backtracking any damage taken in the last 2 seconds. Faceless Void is invulnerable during Time Walk. Auto..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2B.Typesafe DSL SqlMapping\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"git":{"createdTime":1655901635000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":15,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":3.93,"words":1178},"filePathRelative":"2-faceless/2b-jooq.md","localizedDate":"June 22, 2022","autoDesc":true}');export{d as comp,p as data};
