import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c,b as e,e as a,d as s,f as i}from"./app-C4PFB2tF.js";const t={},d=i(`<h1 id="_9c4-使用docker和启动脚本" tabindex="-1"><a class="header-anchor" href="#_9c4-使用docker和启动脚本"><span>9C4.使用Docker和启动脚本</span></a></h1><p>Wings提供两种方式，用来发布和启动应用，</p><ul><li>script - 基于shell脚本的发布和管理</li><li>docker - 基于docker的发布和管理</li></ul><h2 id="_9c4-1-script方式" tabindex="-1"><a class="header-anchor" href="#_9c4-1-script方式"><span>9C4.1.Script方式</span></a></h2><ul><li>release.sh - 拉取、打包、推送的脚本</li><li>starter.sh - 启动、停止和监控的脚本</li></ul><p>以上脚本，都支持<code>&lt;同名&gt;.env</code>的配置来覆盖默认参数。</p><h3 id="_1a-发布脚本" tabindex="-1"><a class="header-anchor" href="#_1a-发布脚本"><span>1a.发布脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 使用app名字，软连接到脚本</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> wings-release.sh winx-admin.sh
<span class="token comment">## 建立同名配置文件</span>
<span class="token function">vi</span> winx-admin.env
<span class="token comment">## 从git上拉取代码</span>
./winx-admin.sh pull
<span class="token comment">## 使用mvn或web打包</span>
./winx-admin.sh pack
<span class="token comment">## 推送成果物到应用服务器</span>
./winx-admin.sh push
<span class="token comment">## 查看更多帮助</span>
./winx-admin.sh <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1b-启动脚本" tabindex="-1"><a class="header-anchor" href="#_1b-启动脚本"><span>1b.启动脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 使用app名字，软连接到脚本</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> wings-starter.sh winx-admin.sh
<span class="token comment">## 建立同名配置文件</span>
<span class="token function">vi</span> winx-admin.env
<span class="token comment">## 安全启动</span>
./winx-admin.sh start
<span class="token comment">## 查看状态</span>
./winx-admin.sh status
<span class="token comment">## 安全停止</span>
./winx-admin.sh stop
<span class="token comment">## 查看更多帮助</span>
./winx-admin.sh <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9c4-2-docker方式" tabindex="-1"><a class="header-anchor" href="#_9c4-2-docker方式"><span>9C4.2.Docker方式</span></a></h2><p>Docker管理的好处是不依赖服务器环境配置，简单和统一。 以下的功能及lib可不需要，在构建前或工程中移除。</p><ul><li><code>spring-boot-devtools-*.jar</code></li><li><code>spring-boot-docker-compose-*.jar</code></li><li><code>spring-boot-admin-*.jar</code></li><li>spring <code>actuator-*</code></li></ul><h3 id="_2a-分层构建" tabindex="-1"><a class="header-anchor" href="#_2a-分层构建"><span>2a.分层构建</span></a></h3><p>SpringBoot工程在repackage后，通常会有100+M之多，而其中的lib占比95+%， 因此，实践中docker被分成2个layer，一个是<code>dep</code>，一个是<code>app</code>。</p><ul><li>docker-dep - 排除<code>*-SNAPSHOT.jar</code>后的工程依赖<code>*.jar</code></li><li>docker-app - <code>*-SNAPSHOT.jar</code>和工程文件（<code>classes/</code>,<code>resources/</code>）</li></ul><p>相当于<code>java -Djarmode=layertools -jar target/*.jar extract</code>后，</p><ul><li>dependencies - docker-dep</li><li>spring-boot-loader - 可忽略，main-class比JarLauncher启动快</li><li>snapshot-dependencies - docker-app</li><li>application - docker-app</li></ul><p>这样，<code>docker-dep</code>编译一次即可，而每次编译<code>docker-app</code>体积都很小。</p><h3 id="_2b-构建方式" tabindex="-1"><a class="header-anchor" href="#_2b-构建方式"><span>2b.构建方式</span></a></h3><p>构建docker，大概有以下三种实践，</p><ul><li>docker.sh - 基于Dockerfile的构建，比较灵活</li><li>jib maven - OCI格式，不需要Dockerfile，可不需要docker</li><li>buildpack maven - OCI格式，不需要Dockerfile，需要docker</li></ul><h3 id="_2c-docker-sh构建" tabindex="-1"><a class="header-anchor" href="#_2c-docker-sh构建"><span>2c.docker.sh构建</span></a></h3><p>使用<code>wings-docker.sh</code>，保留springboot默认结构，使用JarLauncher启动。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 使用spring打包成fatjar</span>
mvn clean package
<span class="token comment">## 解压 fatjar 构建 docker-dep</span>
wings-docker.sh <span class="token function">unzip</span> dep target/winx-admin-3.2.110-SNAPSHOT.jar
wings-docker.sh build dep target/winx-admin-3.2.110-SNAPSHOT.jar
<span class="token comment">## 从 docker-dep，构建 docker-app</span>
wings-docker.sh <span class="token function">unzip</span> app target/winx-admin-3.2.110-SNAPSHOT.jar
wings-docker.sh build app target/winx-admin-3.2.110-SNAPSHOT.jar
<span class="token comment">## 一步构建 docker-all</span>
wings-docker.sh build all target/winx-admin-3.2.110-SNAPSHOT.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建成功后，其docker内<code>/app/</code>目录布局如下，</p><ul><li><code>BOOT-INF/{classes,lib,...}</code> - 代码及依赖</li><li><code>META-INF/{services,spring.components,...}</code> - 配置及属性</li><li><code>org</code> - Spring JarLauncher</li><li><code>{conf,data,logs}</code> - VOLUME</li></ul><p>springboot repackage时会对lib进行优化，比如</p><ul><li>移除<code>spring-boot-autoconfigure-processor.jar</code><ul><li>编译时生成spring-autoconfigure-metadata.properties</li></ul></li><li>移除<code>spring-boot-configuration-processor.jar</code><ul><li>编译时生成spring-configuration-metadata.json</li></ul></li><li>移除<code>spring-boot-starter-*.jar</code><ul><li>按springboot约定是空包</li></ul></li><li>增加<code>spring-boot-jarmode-layertools.jar</code><ul><li>以能够按层解包 <code>java -Djarmode=layertools</code></li></ul></li></ul><h3 id="_2d-docker启动" tabindex="-1"><a class="header-anchor" href="#_2d-docker启动"><span>2d.docker启动</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## bridge network</span>
<span class="token assign-left variable">WINGS_DOCKER_NET</span><span class="token operator">=</span>wings-app
<span class="token comment">## 创建目录和配置</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token punctuation">{</span>data,conf,logs<span class="token punctuation">}</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span> conf/application.properties <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;
## mysql host
winx.database.host=host.docker.internal:51487
## boot admin host
spring.boot.admin.client.url=http://host.docker.internal:8093
## jdbc debug
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
EOF</span>
<span class="token comment">## docker 启动选项</span>
<span class="token assign-left variable">WINGS_DOCKER_OPTS</span><span class="token operator">=</span><span class="token punctuation">(</span>--network <span class="token variable">$WINGS_DOCKER_NET</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-v</span> ./data:/app/data <span class="token parameter variable">-v</span> ./conf:/app/conf <span class="token parameter variable">-v</span> ./logs:/app/logs <span class="token parameter variable">-p</span> <span class="token number">8091</span>:8080<span class="token punctuation">)</span>
<span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token variable">$WINGS_DOCKER_NET</span>
<span class="token comment">## 进入 docker shell</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token parameter variable">--user</span> root <span class="token parameter variable">--entrypoint</span> /bin/bash winx-admin:3.2.110-SNAPSHOT
<span class="token comment">## 启动 spring 应用</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> winx-admin:3.2.110-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述脚本以 <code>winx-admin</code> 为例，在配置 <code>winx-devops</code>时，把<code>8091</code>变为<code>8093</code>。 分别启动 admin和devops两个docker容器后，可以访问以下URL测试，</p>`,32),p={href:"http://localhost:8091/swagger-ui/index.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://localhost:8093/login",target:"_blank",rel:"noopener noreferrer"},k=e("ul",null,[e("li",null,[a("用户为 "),e("code",null,"boot-admin-server")]),e("li",null,[a("密码为"),e("code",null,"$DING_TALK_TOKEN"),a("，")]),e("li",null,[a("否则为"),e("code",null,"!!!YOU_MUST_USE_STRONG_PASSWORD_HERE!!!")])],-1),u=e("h3",{id:"_2e-jib构建oci",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2e-jib构建oci"},[e("span",null,"2e.Jib构建OCI")])],-1),v={href:"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart",target:"_blank",rel:"noopener noreferrer"},b=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 编译并安装到本地</span>
mvn clean <span class="token function">install</span>
<span class="token comment">## 使用 docker daemon</span>
mvn -P<span class="token string">&#39;docker,docker-dep&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/
mvn -P<span class="token string">&#39;docker,docker-app&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/ <span class="token parameter variable">-Ddocker.from.prefix</span><span class="token operator">=</span>docker://fessional/
<span class="token comment">#mvn -P&#39;docker,docker-app&#39; jib:build -Ddocker.to.prefix=fessional/ -Ddocker.from.prefix=fessional/</span>
<span class="token comment">## 使用 docker registry</span>
mvn -P<span class="token string">&#39;docker,docker-dep&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>docker.io/fessional/
mvn -P<span class="token string">&#39;docker,docker-app&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>docker.io/fessional/ <span class="token parameter variable">-Ddocker.from.prefix</span><span class="token operator">=</span>docker.io/fessional/
<span class="token comment">## 一步构建 docker-all</span>
mvn -P<span class="token string">&#39;docker&#39;</span> jib:dockerBuild <span class="token parameter variable">-Ddocker.to.prefix</span><span class="token operator">=</span>fessional/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，两种构建方式存在以下不同，</p><ul><li><code>jib:dockerBuild</code> - 依赖本地Docker</li><li><code>jib:build</code> - 不依赖本地Docker，默认推送到docker hub</li></ul><p>构建成功后，其docker内<code>/app/</code>目录布局如下，</p><ul><li><code>{classes,libs}</code> - 代码及依赖</li><li><code>resources/META-INF/spring.components</code> - 配置及属性</li><li><code>jib-classpath-file</code> - java类路径</li><li><code>jib-main-class-file</code> - java主函数</li><li><code>{conf,data,logs}</code> - VOLUME</li></ul><h3 id="_2f-jib启动" tabindex="-1"><a class="header-anchor" href="#_2f-jib启动"><span>2f.Jib启动</span></a></h3><p>同docker启动，不过增加了<code>fessional</code>前缀，以便区分。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## docker 启动选项</span>
<span class="token assign-left variable">WINGS_DOCKER_OPTS</span><span class="token operator">=</span><span class="token punctuation">(</span>--network <span class="token variable">$WINGS_DOCKER_NET</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-v</span> ./data:/app/data <span class="token parameter variable">-v</span> ./conf:/app/conf <span class="token parameter variable">-v</span> ./logs:/app/logs <span class="token parameter variable">-p</span> <span class="token number">8093</span>:8080<span class="token punctuation">)</span>
<span class="token comment">## 进入 docker shell</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token parameter variable">--user</span> root <span class="token parameter variable">--entrypoint</span> /bin/bash fessional/winx-devops:3.2.110-SNAPSHOT
<span class="token comment">## 启动 spring 应用</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token variable">\${WINGS_DOCKER_OPTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> fessional/winx-devops:3.2.110-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2g-buildpack构建" tabindex="-1"><a class="header-anchor" href="#_2g-buildpack构建"><span>2g.buildpack构建</span></a></h3><p>通常需要根据项目的实际需要，自定义CNB的以下属性。</p><ul><li><code>builder</code> - 默认 paketobuildpacks/builder-jammy-base:latest</li><li><code>runImage</code> - 默认未指定</li><li><code>env</code> - 构建环境</li><li><code>buildpacks</code> - 建议自定义</li></ul><p>默认构建不区分<code>dep</code>和<code>app</code>，仅用作示例。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 编译并安装到本地</span>
mvn clean <span class="token function">install</span>
<span class="token comment">## 本地构建</span>
mvn <span class="token parameter variable">-P</span> <span class="token string">&#39;image-paketo&#39;</span> spring-boot:build-image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建成功后，其<code>app-root</code>是<code>/workspace/</code>（硬编码，如何改变？）结构同 fatjar，</p><ul><li><code>BOOT-INF/{classes,lib,...}</code> - 代码及依赖</li><li><code>META-INF/{services,spring.components,...}</code> - 配置及属性</li><li><code>org</code> - Spring JarLauncher</li><li><code>/app/{conf,data,logs}</code> - VOLUME</li></ul>`,15);function h(g,f){const n=o("ExternalLinkIcon");return r(),c("div",null,[d,e("ul",null,[e("li",null,[a("admin swagger "),e("a",p,[a("http://localhost:8091/swagger-ui/index.html"),s(n)])]),e("li",null,[a("devops boot-admin "),e("a",m,[a("http://localhost:8093/login"),s(n)]),k])]),u,e("p",null,[e("a",v,[a("Jib"),s(n)]),a(" 可不依赖于docker，默认构建OCI格式")]),b])}const S=l(t,[["render",h],["__file","9c4.docker-starter.html.vue"]]),j=JSON.parse('{"path":"/zh/9-example/9c.server-manual/9c4.docker-starter.html","title":"9C4.使用Docker和启动脚本","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"shell","category":["Practice","Docker","Operation"],"description":"9C4.使用Docker和启动脚本 Wings提供两种方式，用来发布和启动应用， script - 基于shell脚本的发布和管理 docker - 基于docker的发布和管理 9C4.1.Script方式 release.sh - 拉取、打包、推送的脚本 starter.sh - 启动、停止和监控的脚本 以上脚本，都支持<同名>.env的配置来覆盖...","GIT_REPO_HEAD":"2024-05-04 5f8d5046d9ba71ea39889145bdfcb0cec1b14a03","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/9-example/9c.server-manual/9c4.docker-starter.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/9-example/9c.server-manual/9c4.docker-starter.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"9C4.使用Docker和启动脚本"}],["meta",{"property":"og:description","content":"9C4.使用Docker和启动脚本 Wings提供两种方式，用来发布和启动应用， script - 基于shell脚本的发布和管理 docker - 基于docker的发布和管理 9C4.1.Script方式 release.sh - 拉取、打包、推送的脚本 starter.sh - 启动、停止和监控的脚本 以上脚本，都支持<同名>.env的配置来覆盖..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-02T07:47:24.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-03-02T07:47:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9C4.使用Docker和启动脚本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-02T07:47:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"9C4.1.Script方式","slug":"_9c4-1-script方式","link":"#_9c4-1-script方式","children":[{"level":3,"title":"1a.发布脚本","slug":"_1a-发布脚本","link":"#_1a-发布脚本","children":[]},{"level":3,"title":"1b.启动脚本","slug":"_1b-启动脚本","link":"#_1b-启动脚本","children":[]}]},{"level":2,"title":"9C4.2.Docker方式","slug":"_9c4-2-docker方式","link":"#_9c4-2-docker方式","children":[{"level":3,"title":"2a.分层构建","slug":"_2a-分层构建","link":"#_2a-分层构建","children":[]},{"level":3,"title":"2b.构建方式","slug":"_2b-构建方式","link":"#_2b-构建方式","children":[]},{"level":3,"title":"2c.docker.sh构建","slug":"_2c-docker-sh构建","link":"#_2c-docker-sh构建","children":[]},{"level":3,"title":"2d.docker启动","slug":"_2d-docker启动","link":"#_2d-docker启动","children":[]},{"level":3,"title":"2e.Jib构建OCI","slug":"_2e-jib构建oci","link":"#_2e-jib构建oci","children":[]},{"level":3,"title":"2f.Jib启动","slug":"_2f-jib启动","link":"#_2f-jib启动","children":[]},{"level":3,"title":"2g.buildpack构建","slug":"_2g-buildpack构建","link":"#_2g-buildpack构建","children":[]}]}],"git":{"createdTime":1709342386000,"updatedTime":1709365644000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":2}]},"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"zh/9-example/9c.server-manual/9c4.docker-starter.md","localizedDate":"2024年3月2日","autoDesc":true}');export{S as comp,j as data};
