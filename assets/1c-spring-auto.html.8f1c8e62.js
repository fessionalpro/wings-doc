import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c,b as n,e as a,d as o,f as s,r as l}from"./app.d80c21d5.js";const p={},r=s('<h1 id="_1c-自动配置机制" tabindex="-1"><a class="header-anchor" href="#_1c-自动配置机制" aria-hidden="true">#</a> 1C.自动配置机制</h1><p>利用SpringBoot的特性，完成自动配置。</p><h2 id="_1c-1-自动规则和命名" tabindex="-1"><a class="header-anchor" href="#_1c-1-自动规则和命名" aria-hidden="true">#</a> 1C.1.自动规则和命名</h2><p>有特殊功能的spring命名，主要集中在以下（后续目录结构有详解）</p><ul><li><code>/wings-conf/</code> 自动加载，分割的配置文件</li><li><code>/wings-i18n/</code> 自动加载，分割的多国语的信息文件</li><li><code>**/spring/boot/</code> 手动加载，Boot有关的配置，如<code>spring.factories</code></li><li><code>**/spring/bean/</code> 自动加载，比如@ComponentScan指定</li><li><code>**/spring/conf/</code> Configurer或配置类</li><li><code>**/spring/prop/</code> properties的映射</li><li><code>**/spring/help/</code> 配置助手</li><li><code>*Configuration.java</code> 条件加载，配置项以<code>spring.wings.</code>为前缀</li></ul><p>使用<code>idea</code>开发时，会有黄色警告或提示，不影响运行，但看着碍眼</p><ul><li>提示Application context not configured for this file， 在<code>Project Structure</code>/<code>Facets</code>/<code>Spring</code>手动添加<code>boot/WingsAutoConfiguration</code>一个即可。</li><li>提示 annotation processing的设置，在<code>Settings</code>/<code>Annotation Processors</code>/<code>Enable annotation processing</code> 注意：在<code>@Configuration</code>中的内部类，<code>static class</code>是按独立类处理的，不受外层约束。</li></ul><p>在wings工程中，会存在<code>spring-wings-enabled.properties</code>配置，作为功能开关。 可以设置<code>spring.wings.silencer.enabled.verbose=true</code> 通过日志的INFO查看。</p><h2 id="_1c-2-属性bind和meta提示" tabindex="-1"><a class="header-anchor" href="#_1c-2-属性bind和meta提示" aria-hidden="true">#</a> 1C.2.属性bind和meta提示</h2><p>属性类统一用<code>*Prop.java</code>和<code>@Data</code>，经过配置后，可以自动提示。</p><ul><li>手动添加 additional-spring-configuration-metadata.json</li><li>自动生成 spring-configuration-metadata.json</li></ul><p>参考资料</p>',12),d={href:"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#configuration-metadata",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Configuration-Binding",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/spring-projects/spring-boot/wiki/IDE-binding-features#simple-pojo",target:"_blank",rel:"noopener noreferrer"},h=s(`<h2 id="_1c-3-按条件配置事项" tabindex="-1"><a class="header-anchor" href="#_1c-3-按条件配置事项" aria-hidden="true">#</a> 1C.3.按条件配置事项</h2><ul><li>配置类为<code>*Configuration.java</code>在<code>/spring/bean/</code>中</li><li>属性类为<code>*Prop.java</code>在<code>/spring/prop/</code>中</li><li>嵌套配置不继承<code>@Conditional</code><ul><li>要合并为<code>@ConditionalOnExpression</code></li><li>或自定义一个<code>@Conditional</code></li></ul></li></ul><p>The <code>@Conditional</code> annotation may be used in any of the following ways:</p><ul><li>as a type-level annotation on any class directly or indirectly annotated with <code>@Component</code>, including <code>@Configuration</code> classes</li><li>as a meta-annotation, for the purpose of composing custom stereotype annotations</li><li>as a method-level annotation on any <code>@Bean</code> method</li></ul><p>If a <code>@Configuration</code> class is marked with <code>@Conditional</code>,all of the <code>@Bean</code> methods, <code>@Import</code> annotations, and <code>@ComponentScan</code> annotations associated with that class will be subject to the conditions.</p><p>NOTE: Inheritance of <code>@Conditional</code> annotations is not supported; any conditions from superclasses or from overridden methods will not be considered.</p><h2 id="_1c-4-conditionalonclass无效" tabindex="-1"><a class="header-anchor" href="#_1c-4-conditionalonclass无效" aria-hidden="true">#</a> 1C.4.ConditionalOnClass无效</h2><p>如下代码，ConditionalOnClass置于同类型的Bean声明上，会报错 NoClassDefFoundError</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">someService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要改为如下这种，内类控制的Configuration</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">someService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-auto-configuration",target:"_blank",rel:"noopener noreferrer"};function k(f,v){const e=l("ExternalLinkIcon");return t(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[a("https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#configuration-metadata"),o(e)])]),n("li",null,[n("a",u,[a("https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Configuration-Binding"),o(e)])]),n("li",null,[n("a",g,[a("https://github.com/spring-projects/spring-boot/wiki/IDE-binding-features#simple-pojo"),o(e)])])]),h,n("p",null,[a("参考"),n("a",m,[a("9.1. Understanding Auto-configured Beans"),o(e)])])])}const C=i(p,[["render",k],["__file","1c-spring-auto.html.vue"]]);export{C as default};
