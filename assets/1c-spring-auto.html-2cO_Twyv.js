import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as t,c as l,b as e,e as n,d as a,f as s}from"./app-D2c23tTX.js";const d={},r=s('<h1 id="_1c-自动配置机制" tabindex="-1"><a class="header-anchor" href="#_1c-自动配置机制"><span>1C.自动配置机制</span></a></h1><p>利用SpringBoot的特性，完成自动配置。</p><h2 id="_1c-1-自动规则和命名" tabindex="-1"><a class="header-anchor" href="#_1c-1-自动规则和命名"><span>1C.1.自动规则和命名</span></a></h2><p>有特殊功能的spring命名，主要集中在以下（后续目录结构有详解）</p><ul><li><code>/wings-conf/</code> 自动加载，分割的配置文件</li><li><code>/wings-i18n/</code> 自动加载，分割的多国语的信息文件</li><li><code>**/spring/boot/</code> 手动加载，Boot有关的配置，如<code>spring.factories</code></li><li><code>**/spring/bean/</code> 自动加载，比如@ComponentScan指定</li><li><code>**/spring/conf/</code> Configurer或AutoConfiguration</li><li><code>**/spring/prop/</code> properties的映射</li><li><code>**/spring/help/</code> 配置助手</li><li><code>*Configuration.java</code> 条件加载，配置项以<code>wings.enabled.</code>为前缀</li></ul><p>使用<code>idea</code>开发时，会有黄色警告或提示，不影响运行，但看着碍眼</p><ul><li>提示Application context not configured for this file， 在<code>Project Structure</code>/<code>Facets</code>/<code>Spring</code>手动添加<code>boot/WingsAutoConfiguration</code>一个即可。</li><li>提示 annotation processing的设置，在<code>Settings</code>/<code>Annotation Processors</code>/<code>Enable annotation processing</code></li><li>注意：在<code>@Configuration</code>中的内部类，<code>static class</code>是按独立类处理的，不受外层约束。</li></ul><p>在wings工程中，会存在<code>wings-enabled.properties</code>配置，作为功能开关。 可以设置<code>wings.enabled.silencer.verbose=true</code> 通过日志的INFO查看。</p><h2 id="_1c-2-属性bind和meta提示" tabindex="-1"><a class="header-anchor" href="#_1c-2-属性bind和meta提示"><span>1C.2.属性bind和meta提示</span></a></h2><p>属性类统一用<code>*Prop.java</code>和<code>@Data</code>，经过配置后，可以自动提示。</p><ul><li>手动添加 additional-spring-configuration-metadata.json</li><li>自动生成 spring-configuration-metadata.json</li></ul><p>参考资料</p>',12),p={href:"https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#appendix.configuration-metadata",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Configuration-Binding",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/spring-projects/spring-boot/wiki/IDE-binding-features#simple-pojo",target:"_blank",rel:"noopener noreferrer"},m=s(`<h2 id="_1c-3-按条件配置事项" tabindex="-1"><a class="header-anchor" href="#_1c-3-按条件配置事项"><span>1C.3.按条件配置事项</span></a></h2><ul><li>配置类为<code>*Configuration.java</code>在<code>/spring/bean/</code>中</li><li>属性类为<code>*Prop.java</code>在<code>/spring/prop/</code>中</li><li>嵌套配置不继承<code>@Conditional</code><ul><li>要合并为<code>@ConditionalOnExpression</code></li><li>或自定义一个<code>@Conditional</code></li></ul></li><li>多个<code>@Conditional</code>为<code>and</code>逻辑</li><li>多个<code>Condition</code>为<code>and</code>逻辑</li></ul><p>以下为<code>Conditional</code> javadoc</p><blockquote><p>The <code>@Conditional</code> annotation may be used in any of the following ways:</p><ul><li>as a type-level annotation on any class directly or indirectly annotated with <code>@Component</code>, including <code>@Configuration</code> classes</li><li>as a meta-annotation, for the purpose of composing custom stereotype annotations</li><li>as a method-level annotation on any <code>@Bean</code> method</li></ul><p>If a <code>@Configuration</code> class is marked with <code>@Conditional</code>,all of the <code>@Bean</code> methods, <code>@Import</code> annotations, and <code>@ComponentScan</code> annotations associated with that class will be subject to the conditions.</p><p>NOTE: Inheritance of <code>@Conditional</code> annotations is not supported; any conditions from superclasses or from overridden methods will not be considered.</p></blockquote><h2 id="_1c-4-conditionalonclass无效" tabindex="-1"><a class="header-anchor" href="#_1c-4-conditionalonclass无效"><span>1C.4.ConditionalOnClass无效</span></a></h2><p>如下代码，ConditionalOnClass置于同类型的Bean声明上，会报错 NoClassDefFoundError</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">someService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要改为如下这种，内类控制的Configuration</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">someService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),k={href:"https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#features.developing-auto-configuration",target:"_blank",rel:"noopener noreferrer"},v=s(`<h2 id="_1c-5-禁用任意-component" tabindex="-1"><a class="header-anchor" href="#_1c-5-禁用任意-component"><span>1C.5.禁用任意 <code>@Component</code></span></a></h2><p>在spring的<code>@Conditional</code>自动配置体系中，<code>On*Bean</code> 依赖于Bean的注册顺序，很难发现问题。 所以在wings中，把问题提前到启动阶段，尽早发现Bean冲突，可通过设置属性文件关闭不需要功能。</p><p>在<code>@Configuration</code>, <code>@Bean</code>和任何<code>@Component</code>上，使用以下<code>@ConditionalWingsEnabled</code> 并指定<code>限定key</code>，可以禁用任意Component和Bean，</p><p><code>限定key</code> = <code>前缀.</code> + <code>全类名</code> + <code>.方法名</code>? = <code>true|false</code></p><ul><li>前缀 - 默认 wings.enabled</li><li>全类名 - 比如 pro.fessional.wings.silencer.spring.boot.WingsEnabledCondition</li><li>方法名 - 比如 crc8Long</li></ul><p><code>@*Configuration</code> 的命名规则如下，</p><ul><li><code>*AutoConfiguration</code> - <code>@AutoConfiguration</code> <code>@Import</code> <code>@Configuration</code></li><li><code>*Configuration</code> - 顶级 <code>@Configuration</code> 及其 <code>@Bean</code></li><li><code>*Event</code> - 内类 <code>@Configuration</code> 及其 <code>@EventListener</code></li><li><code>*Wired</code> - 内类 <code>@Configuration</code> 及其 <code>@Autowired</code></li><li><code>*Bean</code> - 内类 <code>@Configuration</code> 及其包装的单一 <code>@Bean *</code></li><li><code>*Scan</code> - 内类 <code>@Configuration</code> 用来 <code>@ComponentScan</code></li></ul><p><code>@ConditionalWingsEnabled</code> 具有以下增强功能</p><ul><li>abs - <code>绝对key</code>，无视前缀，优先级低于<code>限定key</code></li><li>key - <code>相对key</code>，使用前缀，优先级低于<code>绝对key</code></li><li>value - 默认值，最低优先级，key不存在时使用</li><li>and, not - <code>this &amp;&amp; and1 &amp;&amp; and2 &amp;&amp; !not1 &amp;&amp; !not2</code></li></ul><p>其中，<code>限定key</code>相当于id，全局唯一，具有最高优先级，<code>绝对key</code>和<code>相对key</code>相当于别名， 不需要唯一，可以多处共用。这三种key的优先级从高到低如下，</p><ul><li>限定key = <code>prefix</code> + <code>ClassName</code> + <code>methodName</code>?</li><li>绝对key = <code>abs()</code></li><li>相对key = <code>prefix</code> + <code>key()</code></li><li>默认值 = <code>value()</code></li></ul><p>除了注解的精确控制，也可以通过以下属性，对<code>限定key</code>实现<code>ant-matcher</code>规则的控制。</p><ul><li>wings.feature.error</li><li>wings.feature.prefix</li><li>wings.feature.enable</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">## ... 为包名缩写</span>

<span class="token comment">## @ConditionalWingsEnabled(prefix = &quot;catty.enabled&quot;)</span>
<span class="token comment">## 禁用 @Bean catBean 于 WingsEnabledCatConfiguration</span>
<span class="token key attr-name">catty.enabled.pro...WingsEnabledCatConfiguration.catBean</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment">## 禁用 InnerCatConfiguration 及其 Bean</span>
<span class="token key attr-name">catty.enabled.pro...WingsEnabledCatConfiguration$InnerCatConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>

<span class="token comment">## @Conditional(WingsEnabledCondition.class) or @ConditionalWingsEnabled</span>
<span class="token comment">## 禁用 @Bean dogBean 于 WingsEnabledDogConfiguration</span>
<span class="token key attr-name">wings.enabled.pro...WingsEnabledDogConfiguration.dogBean</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment">## 禁用 InnerDogConfiguration 及其 Bean</span>
<span class="token key attr-name">wings.enabled.pro...WingsEnabledDogConfiguration$InnerDogConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1c-6-功能开关-featureflags" tabindex="-1"><a class="header-anchor" href="#_1c-6-功能开关-featureflags"><span>1C.6.功能开关 FeatureFlags</span></a></h2><p>Wings的FeatureFlags实现，有以下两个层面，</p><ul><li>配置级 - <code>@ConditionalWingsEnabled</code> 作用在 <code>@Component</code> 和 <code>@Bean</code></li><li>线程级 - <code>FeatureFlag</code> 作用在逻辑</li></ul><p>此两种方式的原理相同，基于<code>wings.feature</code>和<code>wings.enabled</code>配置。</p><p>在业务编码中，使用以下工具类，可实现切换业务逻辑，</p><ul><li><code>FeatureFlag</code> - 以Class为key获取功能状态</li><li><code>TweakFeature</code> - 全局或线程级动态开关功能</li></ul><p>功能开关的优先级如下，</p><ul><li><code>@ConditionalWingsEnabled</code> - Conf类 或 Bean方法 <ul><li>qualified-key = <code>prefix.</code> + <code>ClassName</code> + <code>.methodName</code>?</li><li>absolute-key = <code>abs()</code></li><li>relative-key = <code>prefix.</code> + <code>key()</code></li><li>default = <code>value()</code>，仅当无配置项时</li><li><code>and()</code>, 然后 <code>not()</code> - 仅当本功能开启时</li></ul></li><li><code>wings.enabled.*</code> - 字符串格式配置项，<code>一对一</code></li><li><code>wings.feature.*</code> - ant风格配置项，<code>一对多</code>，仅当无<code>一对一</code>时</li><li><code>FeatureFlag</code> - <code>TweakFeature</code>，然后 <code>WingsEnabledContext</code></li></ul><h2 id="_1c-7-配置bean的order" tabindex="-1"><a class="header-anchor" href="#_1c-7-配置bean的order"><span>1C.7.配置Bean的Order</span></a></h2><p>使用<code>wings.reorder.*</code>属性，其中<code>*</code>为，</p><ul><li><code>beanName</code> - 按名字一对一调整，高优先级</li><li><code>beanClass</code> - 按类型一对多调整</li></ul><p>其影响范围包括，</p><ul><li><code>List&lt;Bean&gt;</code> - 注入的有序的集合类</li><li><code>.orderedStream()</code> - ObjectProvider的排序</li></ul><p>和顺序有关的优先级如下，注意Bean的声明和扫描机制不同，影响优先级，</p><ul><li><code>wings.reorder.*</code> 配置，最高优先级</li><li>当<code>@Bean</code>时， <code>@Order</code> 高于 <code>Ordered</code></li><li>当<code>@Component</code>时，<code>Ordered</code> 高于<code>@Order</code></li></ul><p>以下任一情况，此功能无效，</p><ul><li>配置项为空或配置的Bean不存在</li><li>wings.enabled.silencer.bean-reorder=false</li></ul><p>也可以通过<code>wings.primary.*</code>设置Bean的Primary，但仅支持beanName。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// wings.reorder.getterClass2 = 3</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">GetterClass</span> <span class="token function">getterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// wings.primary.testReorderServiceImpl2=true</span>
<span class="token comment">// wings.reorder.testReorderServiceImpl2 = 3 # or</span>
<span class="token comment">// wings.reorder.pro.fessional.wings.silencer.app.service.impl.TestReorderServiceImpl2=3</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReorderServiceImpl2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function b(f,h){const o=c("ExternalLinkIcon");return t(),l("div",null,[r,e("ul",null,[e("li",null,[e("a",p,[n("https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#appendix.configuration-metadata"),a(o)])]),e("li",null,[e("a",u,[n("https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Configuration-Binding"),a(o)])]),e("li",null,[e("a",g,[n("https://github.com/spring-projects/spring-boot/wiki/IDE-binding-features#simple-pojo"),a(o)])])]),m,e("p",null,[n("参考"),e("a",k,[n("Creating Your Own Auto-configuration"),a(o)])]),v])}const w=i(d,[["render",b],["__file","1c-spring-auto.html.vue"]]),_=JSON.parse('{"path":"/zh/1-silencer/1c-spring-auto.html","title":"1C.自动配置机制","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"leaf","category":["沉默","配置"],"description":"1C.自动配置机制 利用SpringBoot的特性，完成自动配置。 1C.1.自动规则和命名 有特殊功能的spring命名，主要集中在以下（后续目录结构有详解） /wings-conf/ 自动加载，分割的配置文件 /wings-i18n/ 自动加载，分割的多国语的信息文件 **/spring/boot/ 手动加载，Boot有关的配置，如spring.f...","GIT_REPO_HEAD":"2024-06-10 b1ec3d73a48e6ec52c12b931d1822da253f48375","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/1-silencer/1c-spring-auto.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/1-silencer/1c-spring-auto.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"1C.自动配置机制"}],["meta",{"property":"og:description","content":"1C.自动配置机制 利用SpringBoot的特性，完成自动配置。 1C.1.自动规则和命名 有特殊功能的spring命名，主要集中在以下（后续目录结构有详解） /wings-conf/ 自动加载，分割的配置文件 /wings-i18n/ 自动加载，分割的多国语的信息文件 **/spring/boot/ 手动加载，Boot有关的配置，如spring.f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-04T09:24:48.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-04T09:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1C.自动配置机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-04T09:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"1C.1.自动规则和命名","slug":"_1c-1-自动规则和命名","link":"#_1c-1-自动规则和命名","children":[]},{"level":2,"title":"1C.2.属性bind和meta提示","slug":"_1c-2-属性bind和meta提示","link":"#_1c-2-属性bind和meta提示","children":[]},{"level":2,"title":"1C.3.按条件配置事项","slug":"_1c-3-按条件配置事项","link":"#_1c-3-按条件配置事项","children":[]},{"level":2,"title":"1C.4.ConditionalOnClass无效","slug":"_1c-4-conditionalonclass无效","link":"#_1c-4-conditionalonclass无效","children":[]},{"level":2,"title":"1C.5.禁用任意 @Component","slug":"_1c-5-禁用任意-component","link":"#_1c-5-禁用任意-component","children":[]},{"level":2,"title":"1C.6.功能开关 FeatureFlags","slug":"_1c-6-功能开关-featureflags","link":"#_1c-6-功能开关-featureflags","children":[]},{"level":2,"title":"1C.7.配置Bean的Order","slug":"_1c-7-配置bean的order","link":"#_1c-7-配置bean的order","children":[]}],"git":{"createdTime":1687077446000,"updatedTime":1717493088000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":9}]},"readingTime":{"minutes":4.45,"words":1334},"filePathRelative":"zh/1-silencer/1c-spring-auto.md","localizedDate":"2023年6月18日","autoDesc":true}');export{w as comp,_ as data};
