import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as d,b as e,d as o,w as a,e as i,f as s,r}from"./app.1189c37f.js";const c="/wings-ti6-champion.png",h={},u=s('<h1 id="_0-纹丝不忒" tabindex="-1"><a class="header-anchor" href="#_0-纹丝不忒" aria-hidden="true">#</a> 0.纹丝不忒</h1><p><img src="'+c+'" alt="wings ti6"></p><p>WingsBoot(代号神翼)是SpringBoot的一个脚手架，没有魔法和定制，主要有以下特点：</p><ul><li>提供了多语言多时区真实的解决方案（动态语言包，时区，夏令时，闰秒）</li><li>提供了数据库版本和数据的版本管理（表变更变多了，数据维护多了）</li><li>安排了一套呆的约定和笨的工程实践（枚举类，配置文件，模板等约定）</li><li>解决了软件开发中最难的命名问题（允许使用中文命名，解决行业黑话）</li><li>英雄池很深，对技能有独到的理解（读3遍官方文档，debug部分源码）</li><li>不懂代码的看文档，都不看的，别用（这是你的homework，及格线）</li></ul><p>其目标是使小创业团队，平稳的实现从单应用，到分表分库，到服务化的演变。 在任何项目阶段和业务规模下，能够，</p><ul><li>安全快速的重构业务，变更数据模型</li><li>对业务和数据有版本管理，保证兼容性</li><li>运行时的数据变化亦可追溯，复盘，恢复</li><li>对抗业务变化快，设计不足的技术债务</li></ul><h2 id="_0-1-版本号说明" tabindex="-1"><a class="header-anchor" href="#_0-1-版本号说明" aria-hidden="true">#</a> 0.1.版本号说明</h2><p>Wings版本号为<code>4段</code>，前3段为SpringBoot版本，第4段是build号。 build号为3位数字，首位是大版本，表示不兼容性；后2位是小版本，表示基本兼容或容易适配。</p><p>例如，<code>2.4.2.100-SNAPSHOT</code>，表示基于boot2.4.2，是wings的<code>1##</code>的系列。</p><p>wings使用了<code>revision</code>和<code>changelist</code>的CI占位属性，Maven需要3.5.0以上。</p><h2 id="_0-2-项目结构" tabindex="-1"><a class="header-anchor" href="#_0-2-项目结构" aria-hidden="true">#</a> 0.2.项目结构</h2><p>Wings由多个子项目构成，都采用了Dota有关的命名，主要包括以下，</p><ul><li>沉默术士 wings/silencer - springboot的工程化装配，I18n等</li><li>虚空假面 wings/faceless - 数据层，分表分库，数据及库的版本管理</li><li>鱼人守卫 wings/slardar - Servlet体系的WebMvc基础约定和封装</li><li>术士大叔 wings/warlock - 综合以上的基础业务模块和功能脚手架</li><li>蝙蝠骑士 wings/batrider - RPC和微服化</li><li>演示例子 example - 集成以上的样板工程和例子</li><li>旁观阵线 observe - 生态内关联项目</li><li>天辉阵线 radiant - 开箱即用的插拔功能模块</li></ul><h2 id="_0-3-技术选型" tabindex="-1"><a class="header-anchor" href="#_0-3-技术选型" aria-hidden="true">#</a> 0.3.技术选型</h2><p>遵循Unix哲学，部分回答了<code>为什么</code>和<code>为什么不</code>？</p><ul><li>SpringBoot - 事实标准，从业人员基数大，容易拉扯队伍和技术衔接。</li><li>Jooq/QueryDsl - 基于<code>限制的艺术</code>，看重其强类型而放弃流行的mybatis体系。 jooq强类型，可以受到IDE加持；不能写成过于复杂的SQL，有利于分库，分服务。</li><li>Kotlin - 比<code>scala</code>更胜任<code>更好的java</code>，目前仅在flywave支撑性项目中用了kotlin， 而在主要业务场景，仍然主张【少吃糖，写好java】</li><li>WebMvc - 尽管<code>webflux</code>在模型和性能好于serverlet体系，但当前更多的是阻塞IO，多线程场景。</li><li>Lombok - 简化代码，使用了Experimental功能，开发时，需要自己在pom中引入。</li><li>Git-flow - git管理的最佳实践。</li><li>Guava, commons-lang3, commons-io - 进阶必备的工具包.</li><li>ShardingSphere - 分表分库，足以解决90%的<code>数据大</code>的问题。</li><li>Hazelcast - 相比于Redis，Hazelcast更简单，集成度更高。</li><li>ServiceComb - 更工程化和更紧凑的</li></ul><h2 id="_0-4-更多章节" tabindex="-1"><a class="header-anchor" href="#_0-4-更多章节" aria-hidden="true">#</a> 0.4.更多章节</h2>',17);function p(g,_){const l=r("RouterLink");return n(),d("div",null,[u,e("ul",null,[e("li",null,[o(l,{to:"/0-wings/0a-code-style.html"},{default:a(()=>[i("编码风格")]),_:1}),i(" - 价值观，编码哲学，编码风格")]),e("li",null,[o(l,{to:"/0-wings/0b-rest-half.html"},{default:a(()=>[i("RestHalf规范")]),_:1}),i(" - 场景化业务的URL规范")]),e("li",null,[o(l,{to:"/0-wings/0c-dev-tool.html"},{default:a(()=>[i("开发工具")]),_:1}),i(" - 工欲善其事，必先利其器")]),e("li",null,[o(l,{to:"/0-wings/0d-qa-devops.html"},{default:a(()=>[i("开发运维")]),_:1}),i(" - 编码开发，线上运行等话题")]),e("li",null,[o(l,{to:"/0-wings/0e-qa-config.html"},{default:a(()=>[i("配置话题")]),_:1}),i(" - maven，properties，spring的配置话题")]),e("li",null,[o(l,{to:"/0-wings/0f-qa-others.html"},{default:a(()=>[i("其他话题")]),_:1}),i(" - 未归类的话题")]),e("li",null,[o(l,{to:"/0-wings/0g-ghost-ship.html"},{default:a(()=>[i("幽灵船模型")]),_:1}),i(" - wings功能的基本构建模型")])])])}const w=t(h,[["render",p],["__file","index.html.vue"]]);export{w as default};
