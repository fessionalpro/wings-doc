import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as a,b as t,d as e,f as n,w as r,e as d,o}from"./app-BT4uJ8Vu.js";const h={},p=d(`<h1 id="b6-常见问题" tabindex="-1"><a class="header-anchor" href="#b6-常见问题"><span>B6.常见问题</span></a></h1><h2 id="_01-如何调试-debug解析" tabindex="-1"><a class="header-anchor" href="#_01-如何调试-debug解析"><span>01.如何调试，debug解析</span></a></h2><p>调试主要集中在Parse和RnaEngine执行上，因此logger只在此2处存在。 米波工程本身的test中，slf4j的日志基本是trace，因此在其他工程引入时， 需要把设置<code>pro.fessional.meepo</code>的级别为<code>trace</code>。</p><p>如果通过日志，不能调试到位，可以通过继承Parser，调用protected方法。</p><p>如果发生 Class path contains multiple SLF4J bindings等错误提示， 直接exclude meepo工程对slf4j的依赖即可。</p><h2 id="_02-有关性能和线程安全" tabindex="-1"><a class="header-anchor" href="#_02-有关性能和线程安全"><span>02.有关性能和线程安全</span></a></h2><p>模板引擎都是，一次解析，多次使用的，并增加了预编译或缓存。</p><p>米波解析时，Parse本身基于字符串分析，仅在有<code>查找</code>的指令中使用正则， 通常建议，解析的过程需要在单线程内进行，多次解析或竞争毫无意义。</p><p>合并使用时，如果不存在<code>Rng</code>类指令，是静态字符串拼接，首次拼接，后续缓存。 拼接过程中，预分配刚好够的buff，避免扩容。性能高于多次的原生String拼接。</p><p>无<code>Rng</code>指令时，线程安全且碎片极少，可以放心使用。当存在<code>Rng</code>指令时， 性能和线程安全，取决于执行引擎和传入的context。</p><p>根据benchmark的测试（for+if+function）结果，meepo的性能远高于<code>Freemarker</code></p><table><thead><tr><th style="text-align:left;">Benchmark</th><th style="text-align:left;">Mode</th><th style="text-align:left;">Cnt</th><th style="text-align:right;">Score</th><th style="text-align:right;">Error</th><th style="text-align:left;">Units</th></tr></thead><tbody><tr><td style="text-align:left;">Meepo.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">24177.507 ±</td><td style="text-align:right;">493.546</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Freemarker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18152.915 ±</td><td style="text-align:right;">928.830</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Mustache.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">22565.064 ±</td><td style="text-align:right;">154.915</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Pebble.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">34311.017 ±</td><td style="text-align:right;">248.283</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Rocker.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">37499.123 ±</td><td style="text-align:right;">1275.888</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Thymeleaf.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">5406.186 ±</td><td style="text-align:right;">177.424</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Trimou.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">19718.903 ±</td><td style="text-align:right;">669.759</td><td style="text-align:left;">ops/s</td></tr><tr><td style="text-align:left;">Velocity.benchmark</td><td style="text-align:left;">thrpt</td><td style="text-align:left;">50</td><td style="text-align:right;">18956.594 ±</td><td style="text-align:right;">766.578</td><td style="text-align:left;">ops/s</td></tr></tbody></table><h2 id="_03-如何调教性能" tabindex="-1"><a class="header-anchor" href="#_03-如何调教性能"><span>03.如何调教性能</span></a></h2><p>运行MeepoAsyncProfile的main，然后使用<a href="https://github.com/async-profiler/async-profiler" target="_blank" rel="noopener noreferrer">async-profiler</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dmaven.test.skip=false</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency:copy-dependencies</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DincludeScope=runtime</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DoutputDirectory=target/lib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 启动一个大循环，也可以在IDE中直接运行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/classes:target/test-classes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:target/lib/slf4j-api-1.7.30.jar</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:target/lib/annotations-19.0.0.jar </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pro.fessional.meepo.benchmark.MeepoAsyncProfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 获取 pid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jps</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 使用 async-profiler生成svg火焰图</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#/Users/trydofor/Applications-cli/async-profiler-1.8.2/profiler.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profiler.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> meepo-profile.svg</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和性能有关的细节非常之多，对应模板引擎，主要集中在字符处理技巧上。</p><ul><li>zero-copy，因为String的特性，尽量使用<code>char[]</code>代替完成copy</li><li>array的赋值，尽量使用System.arraycopy</li><li>hashCode和equals方法，if条件中的短路计算</li><li>基本类型的toString</li><li>buffer类，避免扩容，线程安全下尽量复用</li></ul><h2 id="_04-米波语法解析非lexer" tabindex="-1"><a class="header-anchor" href="#_04-米波语法解析非lexer"><span>04.米波语法解析非lexer</span></a></h2><p>正统的语法解析，一般分为词法和语法分析两步。</p><ul><li>先是进行词法分析，将输入转换成一个一个的Token</li><li>然后是进行语法分析。一个一个的Token组成语句，对应一定的语法。</li></ul><p>米波采用的是硬头皮有限状态死磕法，以便简单处理动态MEEPO头尾和BKB块。</p><h2 id="_05-如何记住米波的破语法" tabindex="-1"><a class="header-anchor" href="#_05-如何记住米波的破语法"><span>05.如何记住米波的破语法</span></a></h2><p>米波的命名十分简单，如果你了解<code>dota</code>，<code>vi</code>和2020的新冠。</p><ul><li>DNA，就是静态替换，目的是做模板中间件，翻译模板</li><li>RNA，具有动态性，支持了for和if，以及engine扩展。</li><li>各指令的语法，均类似<code>vi</code>的<code>s/find/replace/g</code>替换。</li><li>米波嘴上说区分大小写，实际上自身的指令支持大小写。</li></ul><h2 id="_06-如何输入空字符串和引号" tabindex="-1"><a class="header-anchor" href="#_06-如何输入空字符串和引号"><span>06.如何输入空字符串和引号</span></a></h2><p>在指令中，引号和空白有特殊处理，</p><ul><li>两个双引号<code>&quot;&quot;</code>，就是空字符串。</li><li>而引号需要转义<code>\\&quot;</code>，才是引号。</li></ul><h2 id="_07-像其他模板一样做斑马线" tabindex="-1"><a class="header-anchor" href="#_07-像其他模板一样做斑马线"><span>07.像其他模板一样做斑马线</span></a></h2><p>Meepo的出发点是模板只负责显示，不负责计算，逻辑结果应该在model预设。 因此要做一个单元格背景的奇偶线效果，在米波中比较费劲，但也能实现。</p><ul><li>直接在model中生成好样式</li><li>自定义引擎，计算style</li><li>使用 USE it._count|mod，如 <a href="https://github.com/trydofor/professional-meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i1.htm" target="_blank" rel="noopener noreferrer">each-c7s1f7-i1.htm</a></li><li>使用 WHEN it._count|mod，如 <a href="https://github.com/trydofor/professional-meepo/tree/master/meepo/src/test/resources/template/each/each-c7s1f7-i2.htm" target="_blank" rel="noopener noreferrer">each-c7s1f7-i2.htm</a></li></ul><h2 id="_08-字面量表示数字和boolean" tabindex="-1"><a class="header-anchor" href="#_08-字面量表示数字和boolean"><span>08.字面量表示数字和Boolean</span></a></h2><p>引擎中，DNA都是静态的字符串替换，RNA都是从内部获取数据。 仅在管道符链式处理时，需从模板读入数据，需要类型支持。</p>`,32),c=t("li",null,"Boolean型, TRUE,FALSE - 同上",-1),g=t("li",null,[e("字符串形态需要双引号，如"),t("code",null,'"TRUE"'),e(","),t("code",null,'"3.14"')],-1),k=t("li",null,[e("以上之外，都为"),t("code",null,"RefStr"),e("，即先从环境内取值，null时返回此字符串。")],-1);function y(f,m){const i=s("RouteLink");return o(),a("div",null,[p,t("ul",null,[t("li",null,[e("Number型 - 详见"),n(i,{to:"/zh/b-meepo/b4.engine.html#%E7%AE%A1%E9%81%93%E7%AC%A6%E9%93%BE%E6%8E%A5%E5%87%BD%E6%95%B0%E9%93%BE%E5%BC%8F%E5%A4%84%E7%90%86"},{default:r(()=>[e("管道符链接函数，链式处理")]),_:1})]),c,g,k])])}const x=l(h,[["render",y],["__file","b6.question.html.vue"]]),_=JSON.parse('{"path":"/zh/b-meepo/b6.question.html","title":"B6.常见问题","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"circle-question","category":["米波","模板"],"description":"B6.常见问题 01.如何调试，debug解析 调试主要集中在Parse和RnaEngine执行上，因此logger只在此2处存在。 米波工程本身的test中，slf4j的日志基本是trace，因此在其他工程引入时， 需要把设置pro.fessional.meepo的级别为trace。 如果通过日志，不能调试到位，可以通过继承Parser，调用prot...","GIT_REPO_HEAD":"2025-01-28 900f8d7f901cad2172a025862418812b0d068d29","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/b-meepo/b6.question.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/b-meepo/b6.question.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"B6.常见问题"}],["meta",{"property":"og:description","content":"B6.常见问题 01.如何调试，debug解析 调试主要集中在Parse和RnaEngine执行上，因此logger只在此2处存在。 米波工程本身的test中，slf4j的日志基本是trace，因此在其他工程引入时， 需要把设置pro.fessional.meepo的级别为trace。 如果通过日志，不能调试到位，可以通过继承Parser，调用prot..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-29T12:05:33.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-07-29T12:05:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"B6.常见问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-29T12:05:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"01.如何调试，debug解析","slug":"_01-如何调试-debug解析","link":"#_01-如何调试-debug解析","children":[]},{"level":2,"title":"02.有关性能和线程安全","slug":"_02-有关性能和线程安全","link":"#_02-有关性能和线程安全","children":[]},{"level":2,"title":"03.如何调教性能","slug":"_03-如何调教性能","link":"#_03-如何调教性能","children":[]},{"level":2,"title":"04.米波语法解析非lexer","slug":"_04-米波语法解析非lexer","link":"#_04-米波语法解析非lexer","children":[]},{"level":2,"title":"05.如何记住米波的破语法","slug":"_05-如何记住米波的破语法","link":"#_05-如何记住米波的破语法","children":[]},{"level":2,"title":"06.如何输入空字符串和引号","slug":"_06-如何输入空字符串和引号","link":"#_06-如何输入空字符串和引号","children":[]},{"level":2,"title":"07.像其他模板一样做斑马线","slug":"_07-像其他模板一样做斑马线","link":"#_07-像其他模板一样做斑马线","children":[]},{"level":2,"title":"08.字面量表示数字和Boolean","slug":"_08-字面量表示数字和boolean","link":"#_08-字面量表示数字和boolean","children":[]}],"git":{"createdTime":1656934972000,"updatedTime":1722254733000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":3}]},"readingTime":{"minutes":3.65,"words":1096},"filePathRelative":"zh/b-meepo/b6.question.md","localizedDate":"2022年7月4日","autoDesc":true}');export{x as comp,_ as data};
