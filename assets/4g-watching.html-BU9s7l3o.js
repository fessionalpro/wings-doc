import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,e as t}from"./app-BcJ4NaN5.js";const i={},s=t(`<h1 id="_4g-调用计时" tabindex="-1"><a class="header-anchor" href="#_4g-调用计时"><span>4G.调用计时</span></a></h1><p>开箱即用的简单的性能分析，慢请求记录，属于调试功能，默认关闭。</p><ul><li>模块开关 - wings.enabled.warlock.watching=false</li><li>数据层 - wings.warlock.watching.jooq-threshold=60</li><li>服务层 - wings.warlock.watching.service-threshold=200</li><li>Web层 - wings.warlock.watching.controller-threshold=2000</li></ul><p>通过以上配置文件，设置模块是否开启，以及各层的慢响应的阈值， <code>-1</code>表示关闭，而<code>0</code>表示全部开启，其他正式值是slow的阈值，毫秒数。</p><h2 id="_4g-1-实现原理" tabindex="-1"><a class="header-anchor" href="#_4g-1-实现原理"><span>4G.1.实现原理</span></a></h2><p>各层面的<code>计时</code>功能，分散在不同的工程模块中，在Warlock实现了自动配置。</p><ul><li>Controller层，基于Interceptor实现，默认对全部URL生效</li><li>Service层，基于AOP实现，需要手动使用@Watching注解标记方法</li><li>Database层，基于Jooq的ExecuteListener，对所有jooq生效</li></ul><p><code>计时</code>在Wings体系的Context自动开启，以调用的计数为基础，计数为0则视为结束。 不管是运行中还是已结束，都可以在日志中输出如下统计，默认会自动在结束时输出。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>+--s--ms------ns-+---%-+---------------+---------------</span></span>
<span class="line"><span>|  1,426,497,039 | 100 | thread  | task and timing</span></span>
<span class="line"><span>|    922,167,066 |  64 | XNIO-4  | /test/watching.json</span></span>
<span class="line"><span>|    504,329,973 |  35 | wings-1 | AsyncWatch.BadSelect</span></span>
<span class="line"><span>|    504,059,463 |  35 | wings-1 | ¦-AsyncWatch.sleep</span></span>
<span class="line"><span>|    663,100,505 |  46 | XNIO-4  | ¦-Service#normalFetch</span></span>
<span class="line"><span>|    128,767,339 |   9 | XNIO-4  | ¦-¦-JooqSlowSql:SelectQuery</span></span>
<span class="line"><span>|    213,964,147 |  14 | XNIO-4  | ¦-Service#errorFetch</span></span>
<span class="line"><span>|    199,774,730 |  14 | XNIO-4  | ¦-¦-JooqSlowSql:SelectQuery</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第1列为耗时，最多999秒，精确到ns</li><li>第2列为占比，以百分比显示，基数为level0的耗时之和</li><li>第3列为线程，计时所在的线程</li><li>第4列为<code>区间关系</code>及名字备注，用于分析调用关系</li></ul><p><code>计时</code>按照<code>开始时间</code>到<code>结束时间</code>形成<code>区间关系</code>，并以树状结构显示， 在线性调用中，<code>区间关系</code>也等于执行关系。但多线程下需要按线程分类。</p><h2 id="_4g-2-使用方法" tabindex="-1"><a class="header-anchor" href="#_4g-2-使用方法"><span>4G.2.使用方法</span></a></h2><p>首先要开启watching模块，以便Warlock自动配置，然后设置各个threshold，非负时为开启。</p><p>默认的WebMvc体系中，<code>Controller</code>，<code>Service</code>，<code>Database</code>属于包含关系， 因此简单的慢响应分析，掌控Controller和Database即可。</p><p>假设，在Controller层定义3秒为阈值，在Database层定义100ms为阈值，直接设置配置即可。</p><p>当需要对Service层统计时，需要手动为需要关注的方法加上<code>@Watching</code>注解。</p><h2 id="_4g-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_4g-3-注意事项"><span>4G.3.注意事项</span></a></h2><p>此功能具有一定的入侵性，主要用在开发过程中的调优，当线上产品建议关闭，避免无意义的资源消耗。</p><p>无入侵的动态的程序诊断，推荐使用<a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener noreferrer">Arthas</a></p>`,19),l=[s];function o(r,c){return n(),a("div",null,l)}const h=e(i,[["render",o],["__file","4g-watching.html.vue"]]),g=JSON.parse('{"path":"/zh/4-warlock/4g-watching.html","title":"4G.调用计时","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"bug-slash","category":["术士","调试"],"description":"4G.调用计时 开箱即用的简单的性能分析，慢请求记录，属于调试功能，默认关闭。 模块开关 - wings.enabled.warlock.watching=false 数据层 - wings.warlock.watching.jooq-threshold=60 服务层 - wings.warlock.watching.service-threshold...","GIT_REPO_HEAD":"2024-07-07 fbb1f4817448a18f6c9bd497c9b5837508d2198e","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/4-warlock/4g-watching.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/4-warlock/4g-watching.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"4G.调用计时"}],["meta",{"property":"og:description","content":"4G.调用计时 开箱即用的简单的性能分析，慢请求记录，属于调试功能，默认关闭。 模块开关 - wings.enabled.warlock.watching=false 数据层 - wings.warlock.watching.jooq-threshold=60 服务层 - wings.warlock.watching.service-threshold..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4G.调用计时\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"4G.1.实现原理","slug":"_4g-1-实现原理","link":"#_4g-1-实现原理","children":[]},{"level":2,"title":"4G.2.使用方法","slug":"_4g-2-使用方法","link":"#_4g-2-使用方法","children":[]},{"level":2,"title":"4G.3.注意事项","slug":"_4g-3-注意事项","link":"#_4g-3-注意事项","children":[]}],"git":{"createdTime":1669187346000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":3}]},"readingTime":{"minutes":2.14,"words":641},"filePathRelative":"zh/4-warlock/4g-watching.md","localizedDate":"2022年11月23日","autoDesc":true}');export{h as comp,g as data};
