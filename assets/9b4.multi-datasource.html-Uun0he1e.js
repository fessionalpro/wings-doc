import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as i,c as r,b as e,e as t,d as s,f as c}from"./app-DlsMUbL7.js";const l={},u=e("h1",{id:"_9b4-multiple-datasource",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9b4-multiple-datasource","aria-hidden":"true"},"#"),t(" 9B4.Multiple DataSource")],-1),d=e("p",null,"Wings uses single data source by default, when there are multiple data sources, the ideas and considerations of using Jooq.",-1),h=e("h2",{id:"_9b4-1-springboot-manually",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9b4-1-springboot-manually","aria-hidden":"true"},"#"),t(" 9B4.1.SpringBoot Manually")],-1),p=e("p",null,"Features: Manual control, control every operation.",-1),m=e("blockquote",null,[e("p",null,"If you need to use jOOQ with multiple data sources, you should create your own DSLContext for each one. See JooqAutoConfiguration for more details."),e("p",null,"In particular, JooqExceptionTranslator and SpringTransactionProvider can be reused to provide similar features to what the auto-configuration does with a single DataSource.")],-1),_={href:"https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#howto.data-access.configure-jooq-with-multiple-datasources",target:"_blank",rel:"noopener noreferrer"},f=c('<p>However, you cannot use the default Dao injection, because it uses the @Primary data source by default. operations on data.</p><ul><li>Use DSLContext to manipulate data</li><li>first new Dao, then setConfiguration(dsl.configuration())</li></ul><h2 id="_9b4-2-jooq-automatically" tabindex="-1"><a class="header-anchor" href="#_9b4-2-jooq-automatically" aria-hidden="true">#</a> 9B4.2.Jooq Automatically</h2><p>Features: Batch control via the thread context, CURD type, SQL parameters.</p><blockquote><p>void start(ExecuteContext ctx); Overridable attributes in ExecuteContext:</p><p>ExecuteContext.connectionProvider(ConnectionProvider): The connection provider used for execution. This may be particularly interesting if a Query was de-serialised and is thus lacking the underlying connection</p></blockquote><p>Switch datasource at execution time using ExecuteListener, the steps are as follows</p><ul><li>Define the ConnectionProvider for multiple datasources</li><li>Implement ExecuteListener.start(ExecuteContext)</li><li>Set the execution datasource ExecuteContext.connectionProvider()</li></ul><h2 id="_9b4-3-shardingsphere-automatically" tabindex="-1"><a class="header-anchor" href="#_9b4-3-shardingsphere-automatically" aria-hidden="true">#</a> 9B4.3.ShardingSphere Automatically</h2><p>Features: Switch data sources according to the idea of R/W separation.</p><p>Automatically switch data at runtime without changing the code, using ShardingSphere configuration.</p>',10);function g(x,b){const o=n("ExternalLinkIcon");return i(),r("div",null,[u,d,h,p,m,e("p",null,[t("According to"),e("a",_,[t("Configure jOOQ with Two DataSources"),s(o)]),t(", Just set multiple DSLContext.")]),f])}const w=a(l,[["render",g],["__file","9b4.multi-datasource.html.vue"]]);export{w as default};
