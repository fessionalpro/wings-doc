import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,g as n,h as t,j as r,i as o,k as i,r as d,o as s}from"./app-q0R425qv.js";const m={};function f(u,e){const l=d("RouteLink");return s(),a("div",null,[e[24]||(e[24]=n('<h1 id="_0h-属性配置" tabindex="-1"><a class="header-anchor" href="#_0h-属性配置"><span>0H.属性配置</span></a></h1><p>配置项推荐Properties形式，因为这样有利于分隔，层叠和查找。 每个<code>*.properties</code>都会对应一个<code>*Prop.java</code>，以强类型的Key映射。</p><p><a href="https://docs.oracle.com/cd/E23095_01/Platform.93/ATGProgGuide/html/s0204propertiesfileformat01.html" target="_blank" rel="noopener noreferrer">Properties File Format</a></p><h2 id="_0h-1-属性文件名" tabindex="-1"><a class="header-anchor" href="#_0h-1-属性文件名"><span>0H.1.属性文件名</span></a></h2><p>在Silencer中，默认约定了配置文件的类型和命名规则。</p><ul><li><code>wings-auto-config*.cnf</code> - Silencer功能配置</li><li><code>wings-conf-block-list.cnf</code> - 配置文件黑名单</li><li><code>wings-prop-promotion.cnf</code> - 配置项提升到系统变量</li><li><code>spring-*.properties</code> - spring的配置项</li><li><code>wings-*.properties</code> - wings的配置项</li></ul><h2 id="_0h-2-配置项标记" tabindex="-1"><a class="header-anchor" href="#_0h-2-配置项标记"><span>0H.2.配置项标记</span></a></h2><p>在文档中，存在以下标记，以增加识别度和可读性。</p><ul><li><code>String</code> - <code>NotNull</code>的类型<code>String</code></li><li><code>String?</code> - <code>Nullable</code>的类型<code>String</code></li><li><code>Boolean</code> - 包装类和原始类型等同，均非空。</li><li><code>empty</code> - 表示为<code>空</code>，即<code>key=</code></li></ul><p>在properties的配置值一般为单行，多行的语法如下</p><ul><li><code>\\</code> - 以其转义末尾的换行。</li><li><code>\\n\\</code> - 在prop中产生一个换行符，如配置sql时，增加可读性。</li></ul><h2 id="_0h-3-配置项列表" tabindex="-1"><a class="header-anchor" href="#_0h-3-配置项列表"><span>0H.3.配置项列表</span></a></h2>',12)),t("ul",null,[t("li",null,[r(l,{to:"/zh/1-silencer/1d-prop-silencer.html"},{default:i(()=>e[0]||(e[0]=[o("沉默的属性")])),_:1}),e[1]||(e[1]=o(" - 自动加载，默认工具和行为"))]),t("li",null,[r(l,{to:"/zh/2-faceless/2i-prop-faceless.html"},{default:i(()=>e[2]||(e[2]=[o("虚空的属性")])),_:1}),e[3]||(e[3]=o(" - 数据库及操作，I18n的基本配置"))]),t("li",null,[r(l,{to:"/zh/2-faceless/2j-prop-flywave.html"},{default:i(()=>e[4]||(e[4]=[o("飞波的属性")])),_:1}),e[5]||(e[5]=o(" - Flywave关于schema管理的配置"))]),t("li",null,[r(l,{to:"/zh/2-faceless/2k-prop-jooq.html"},{default:i(()=>e[6]||(e[6]=[o("Jooq的属性")])),_:1}),e[7]||(e[7]=o(" - Jooq相关的配置"))]),t("li",null,[r(l,{to:"/zh/3-slardar/3i-prop-slardar.html"},{default:i(()=>e[8]||(e[8]=[o("大鱼的属性")])),_:1}),e[9]||(e[9]=o(" - 有关Slardar，Spring的基本设置"))]),t("li",null,[r(l,{to:"/zh/3-slardar/3j-prop-webmvc.html"},{default:i(()=>e[10]||(e[10]=[o("WebMvc的属性")])),_:1}),e[11]||(e[11]=o(" - Spring WebMvc的基本设置"))]),t("li",null,[r(l,{to:"/zh/3-slardar/3k-prop-function.html"},{default:i(()=>e[12]||(e[12]=[o("WebFun的属性")])),_:1}),e[13]||(e[13]=o(" - Spring Web加强功能的设置"))]),t("li",null,[r(l,{to:"/zh/3-slardar/3l-prop-hazelcast.html"},{default:i(()=>e[14]||(e[14]=[o("Hazelcast的属性")])),_:1}),e[15]||(e[15]=o(" - Hazelcast的设置"))]),t("li",null,[r(l,{to:"/zh/4-warlock/4d-prop-warlock.html"},{default:i(()=>e[16]||(e[16]=[o("术士的属性")])),_:1}),e[17]||(e[17]=o(" - 有关Warlock登录授权的设置"))]),t("li",null,[r(l,{to:"/zh/8-radiant/8b-prop-tinytask.html"},{default:i(()=>e[18]||(e[18]=[o("小任务属性")])),_:1}),e[19]||(e[19]=o(" - TinyTask的设置"))]),t("li",null,[r(l,{to:"/zh/8-radiant/8d-prop-tinymail.html"},{default:i(()=>e[20]||(e[20]=[o("小邮件属性")])),_:1}),e[21]||(e[21]=o(" - TinyMail的设置"))])]),e[25]||(e[25]=n('<h2 id="_0h-4-开关属性列表" tabindex="-1"><a class="header-anchor" href="#_0h-4-开关属性列表"><span>0H.4.开关属性列表</span></a></h2><p><code>@ConditionalWingsEnabled</code> 以模块分组，按字母序排列，</p><ul><li><code>empty</code> 表示默认为true</li><li><code>(false)</code> 表示默认为false</li><li><code>= key</code> 表示 <code>absolute-key</code></li></ul><p>有关配置文件，</p><ul><li>META-INF/additional-spring-configuration-metadata.json</li><li>wings-conf/wings-prop-promotion.cnf</li></ul>',5)),t("p",null,[e[23]||(e[23]=o("属性列表，统一参考")),r(l,{to:"/0-wings/0h-prop-index.html"},{default:i(()=>e[22]||(e[22]=[o("英文版")])),_:1})])])}const h=p(m,[["render",f],["__file","0h-prop-index.html.vue"]]),y=JSON.parse('{"path":"/zh/0-wings/0h-prop-index.html","title":"0H.属性配置","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"folder-tree","category":["神翼","首页"],"description":"0H.属性配置 配置项推荐Properties形式，因为这样有利于分隔，层叠和查找。 每个*.properties都会对应一个*Prop.java，以强类型的Key映射。 Properties File Format 0H.1.属性文件名 在Silencer中，默认约定了配置文件的类型和命名规则。 wings-auto-config*.cnf - Si...","GIT_REPO_HEAD":"2025-04-02 da9b4e04fc94cbc914e3a6d86b8766465737f2f7","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/0-wings/0h-prop-index.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/0-wings/0h-prop-index.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"0H.属性配置"}],["meta",{"property":"og:description","content":"0H.属性配置 配置项推荐Properties形式，因为这样有利于分隔，层叠和查找。 每个*.properties都会对应一个*Prop.java，以强类型的Key映射。 Properties File Format 0H.1.属性文件名 在Silencer中，默认约定了配置文件的类型和命名规则。 wings-auto-config*.cnf - Si..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-21T01:24:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T01:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0H.属性配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-21T01:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"git":{"createdTime":1656422147000,"updatedTime":1718933081000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":12,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":1.65,"words":494},"filePathRelative":"zh/0-wings/0h-prop-index.md","localizedDate":"2022年6月28日","autoDesc":true}');export{h as comp,y as data};
