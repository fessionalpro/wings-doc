import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c,b as e,e as s,d as t,f as n}from"./app-20203b64.js";const r={},d=n('<h1 id="_3b-hazelcast-middleware" tabindex="-1"><a class="header-anchor" href="#_3b-hazelcast-middleware" aria-hidden="true">#</a> 3B.Hazelcast Middleware</h1><p>Using hazelcast as session, cache and messaging middleware, including,</p><ul><li>spring session - Hazelcast4IndexedSessionRepository</li><li>server cache - WingsHazelcast</li><li>global lock - HazelcastGlobalLock</li><li>global event - HazelcastSyncPublisher</li><li>snowflake id - FlakeIdHazelcastImpl</li></ul><h2 id="_3b-1-default-configuration" tabindex="-1"><a class="header-anchor" href="#_3b-1-default-configuration" aria-hidden="true">#</a> 3B.1.Default Configuration</h2><ul><li>ClassNotFound - user-code-deployment must be set</li><li>Reconnection mechanism, set the reconnection time on the client side</li><li>Data persistence, the community version requires DIY MapStore and MapLoader</li><li>Multicast is enabled by default, address is 224.0.0.1</li></ul><p>In the actual, it is recommended to deploy hazelcast cluster independently and use the client to connect. Cluster configuration should be <code>app+1</code>, so that at least one survives.</p><p>Generally in the same network, you can use multicast between intranets, but it is recommended to use the tcp-ip method of networking. Choose a different configuration file via spring.hazelcast.config, xml is recommended.</p><p>hazelcast 3 and 4 are very different and are not compatible in SpringBoot 2.2 and 2.4.</p><h2 id="_3b-2-distributed-lock" tabindex="-1"><a class="header-anchor" href="#_3b-2-distributed-lock" aria-hidden="true">#</a> 3B.2.Distributed Lock</h2><p>Hazelcast provides 3 types of locks, CP system is recommended, but the cluster needs at least 3 units, the default 0 is single unsafe mode.</p><ul><li>FencedLock - Raft&#39;s distributed lock, in CP system (4.x)</li><li>IMap.lock - automatic GC, clean and simple</li><li>ILock.lock - follow j.u.c.Lock convention (removed in 3.12)</li></ul><p>Different projects need to set cluster-name separately to avoid interference from caches with the same name in different projects. slardar uses the default springboot configuration, the client and server configuration files are as follows.</p><ul><li>extra-conf/hazelcast-client.xml</li><li>extra-conf/hazelcast-server.xml</li></ul><p>If independent customization is required, the ClientConfig or Config bean can be exposed programmatically, See the following.</p>',14),p={href:"https://hazelcast.com/blog/hazelcast-imdg-3-12-introduces-cp-subsystem/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://hazelcast.com/blog/long-live-distributed-locks/",target:"_blank",rel:"noopener noreferrer"},h=n(`<h2 id="_3b-3-distributed-cache" tabindex="-1"><a class="header-anchor" href="#_3b-3-distributed-cache" aria-hidden="true">#</a> 3B.3.Distributed Cache</h2><p>Implement ServerCacheManager with hazelcast through hazelcastCacheManager</p><p>For hazelcast&#39;s MapConfig, if there is no configuration, wings will automatically configure the following MapConf according to the level.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time-to-live-seconds</span><span class="token punctuation">&gt;</span></span>3600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time-to-live-seconds</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max-idle-seconds</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max-idle-seconds</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>eviction</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3b-4-message-subscription" tabindex="-1"><a class="header-anchor" href="#_3b-4-message-subscription" aria-hidden="true">#</a> 3B.4.Message Subscription</h2><p>Hazelcast&#39;s topic (#HazelcastTopic) is wrapped in the SpringEvent pattern for easy navigation between code in the IDE, and</p><ul><li>What producers/publishers does the Event has</li><li>What consumers/subscribers the Event has</li></ul>`,7);function m(g,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[d,e("ul",null,[e("li",null,[e("a",p,[s("https://hazelcast.com/blog/hazelcast-imdg-3-12-introduces-cp-subsystem/"),t(a)])]),e("li",null,[e("a",u,[s("https://hazelcast.com/blog/long-live-distributed-locks/"),t(a)])])]),h])}const v=i(r,[["render",m],["__file","3b-hazelcast.html.vue"]]);export{v as default};
