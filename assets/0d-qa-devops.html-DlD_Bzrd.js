import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as l,b as t,d as i,f as h,w as p,e as s,o as r}from"./app-DEdToB0k.js";const d={},k=s(`<h1 id="_0d-开发运维" tabindex="-1"><a class="header-anchor" href="#_0d-开发运维"><span>0D.开发运维</span></a></h1><p>编码开发，线上运行等话题。</p><h2 id="_0d-01-gethostname-很长时间" tabindex="-1"><a class="header-anchor" href="#_0d-01-gethostname-很长时间"><span>0D.01.getHostName()很长时间</span></a></h2><blockquote><p>InetAddress.getLocalHost().getHostName() took 5004 milliseconds to respond. Please verify your network configuration (macOS machines may need to add entries to /etc/hosts)</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hostname</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 输出 trydofors-Hackintosh.local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/hosts</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在localhost后面，填上 trydofors-Hackintosh.local</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     localhost</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trydofors-Hackintosh.local</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-02-如何创建一个工程" tabindex="-1"><a class="header-anchor" href="#_0d-02-如何创建一个工程"><span>0D.02.如何创建一个工程</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/trydofor/professional-wings.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> professional-wings</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">observe/scripts/wings-init-project.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 如果不能执行bash，那么自行编译和执行</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example/winx-devops/src/test/java</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">com/moilioncircle/wings/devops/init/WingsInitProjectSwing.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-03-jackson和fastjson" tabindex="-1"><a class="header-anchor" href="#_0d-03-jackson和fastjson"><span>0D.03.jackson和fastjson</span></a></h2><p>wings中和springboot一样，默认采用了jackson进行json和xml绑定。 不过wings的中对json的格式有特殊约定，比如日期格式，数字以字符串传递。 再与外部api交换数据时可能格式不匹配，这时需要用有备选方案。</p><ul><li>使用2套jackson配置</li><li>使用jackson注解 @JsonRawValue</li><li>使用fastjson2</li></ul><p>在Jackson和Fastjson的使用上，考虑到安全及兼容性，遵循以下约定</p><ul><li>FastJson用于①安全环境的读写，②对不安全的写，不读入外部json</li><li>FastJson用于静态环境，即不能优雅注入jackson的情况</li><li>此外，都应该使用Jackson</li></ul><p>在wings中，以Fastjson2替代了fastjson。注意以下lib依赖</p><ul><li>JustAuth-1.16.5 - fastjson-1.2.83 无AutoType，默认features的parse</li></ul><p>考虑到当前Fastjson-2.0.18的兼容性和稳定性仍存在很大问题，必须避免使用。</p><ul><li>FastJsonHelper - 内部或瞬时数据，静态方法</li><li>JacksonHelper - 非Web层，不涉及时区及多国语的自动转换，静态方法</li><li>ObjectMapper - Web层，会自动转换时区及多国语，注入Bean</li></ul><p>需要注意的是，json格式有兼容性问题，以下是json格式的差异，详见JsonHelperCompatibleTest</p><ul><li>Jackson Default <ul><li><code>transient</code> 输出</li><li><code>@Transient</code> 不输出</li><li><code>byte[]</code> 用base64编码，<code>[]</code> 为 <code>&quot;&quot;</code></li><li><code>char[]</code> 用String编码，<code>[]</code> 为 <code>&quot;&quot;</code></li><li>WRITE_DATES_AS_TIMESTAMPS 用零时区时间戳</li><li><code>ZonedDateTime</code> 解析为 <code>2023-04-04T21:07:08Z</code> 丢时区</li><li><code>OffsetDateTime</code> 解析为 <code>2023-04-05T10:07:08Z</code> 丢时区</li></ul></li><li>Jackson Wings Help <ul><li><code>transient</code> 不输出</li><li>WRITE_DATES_AS_TIMESTAMPS = false</li><li><code>LocalDateTime</code> 为 <code>&quot;2023-04-05T06:07:08&quot;</code></li><li><code>ZonedDateTime</code> 为 <code>&quot;2023-04-05T06:07:08[America/New_York]&quot;</code> 留时区</li><li><code>OffsetDateTime</code> 为 <code>&quot;2023-04-05T06:07:08-04:00&quot;</code> 留时区</li></ul></li><li>Jackson Wings Bean <ul><li><code>LocalDateTime</code> 为 <code>&quot;2023-04-05 06:07:08&quot;</code></li><li><code>ZonedDateTime</code> 为 <code>&quot;2023-04-05 06:07:08 Asia/Shanghai&quot;</code></li><li><code>OffsetDateTime</code> 为 <code>&quot;2023-04-05 06:07:08 +08:00&quot;</code></li><li><code>float</code>,<code>double</code> 为 <code>&quot;3.14159&quot;</code></li><li><code>BigDecimal</code>,<code>BigInteger</code> 为 <code>&quot;299792458&quot;</code></li></ul></li><li>Fastjson Default <ul><li><code>transient</code> 不输出</li><li><code>@Transient</code> 输出</li><li><code>LocalDateTime</code> 为 <code>&quot;2023-04-05 06:07:08&quot;</code></li><li><code>ZonedDateTime</code> 为 <code>&quot;2023-04-05T06:07:08[America/New_York]&quot;</code></li><li><code>OffsetDateTime</code> 为 <code>&quot;2023-04-05T06:07:08-04:00&quot;</code></li></ul></li></ul><h2 id="_0d-04-类型间mapping比较" tabindex="-1"><a class="header-anchor" href="#_0d-04-类型间mapping比较"><span>0D.04.类型间Mapping比较</span></a></h2><p>根据以下文章，推荐使用静态性的<code>MapStruct</code>。</p><ul><li><a href="https://www.baeldung.com/mapstruct" target="_blank" rel="noopener noreferrer">Quick Guide to MapStruct</a></li><li><a href="https://www.baeldung.com/java-mapstruct-mapping-collections" target="_blank" rel="noopener noreferrer">Mapping Collections with MapStruct</a></li><li><a href="https://mapstruct.org/documentation/installation/" target="_blank" rel="noopener noreferrer">MapStruct ide&amp;mvn支持</a></li></ul><p>在编码过程中，我们经常要处理各种O的转换，赋值，比如DTO，PO，VO，POJO。 同时我们又希望强类型，以便可以通过IDE提示提供效率，并把错误暴露在编译时。 这样就一定要避免弱类型(map,json)和反射（bean copy）,势必需要代码生成工具。</p><p>对于比较复杂的mapping，使用expression，qualifiedByName，spring注入。 自动生成的代码位于<code>target/generated-sources/annotations/</code></p><p>在wings中，推荐使用列编辑和正则（分享视频有讲），</p><ul><li>在业务层代码，推荐MapStruct或列编辑和正则（分享视频有讲）手工制品。</li><li>在jdbc中推荐手工RowMapper，避免使用<code>BeanPropertyRowMapper</code>。</li><li>在jooq中推荐jooq自动生成的record，目前不需要其他mapper。</li></ul><p>使用MapStruct时，wings提供了<code>wgmp</code>和<code>wgme</code>模板(live template)做<code>A$B</code>的转换。</p><ul><li><code>wgmp</code> - 映射<code>A</code>和<code>B</code></li><li><code>wgme</code> - 映射<code>A</code>自身</li><li>如果在<code>A</code>内部，<code>$$</code>表示<code>A</code>，<code>$B</code>表示<code>B</code></li></ul><p>纯wings中的converter以<code>-or</code>结尾(convertor)，以和其他框架的converter区分。 包名以converter为准，类名以目的区分，通常纯wings的使用<code>-or</code>，其他用<code>-er</code>。</p><p>根据以下JMH的benchmark评测，对应动态Mapper也可以考虑。</p><ul><li><a href="https://www.baeldung.com/java-performance-mapping-frameworks" target="_blank" rel="noopener noreferrer">MapStruct 性能比较</a></li><li><a href="https://github.com/arey/java-object-mapper-benchmark" target="_blank" rel="noopener noreferrer">java-object-mapper-benchmark</a></li></ul><p>主要比较项目的活跃程度，使用方式，依赖复杂度，issues解决量等。</p><ul><li><code>SimpleFlatMapper</code> 不在活跃</li><li><code>ModelMapper</code> 体积过大，暂时不推荐使用</li><li><code>JMapper</code> 性能及使用都非常优秀，但项目不在活跃</li><li><code>bull</code> 支持bean和map的映射，比较活跃，使用简单，但性能一般</li></ul><p>升级了java-object-mapper-benchmark的依赖，以java在笔记本上简单执行</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Benchmark          (type)   Mode  Cnt         Score         Error  Units</span></span>
<span class="line"><span>Mapper             Manual  thrpt   25  27226210.883 ± 1350138.859  ops/s</span></span>
<span class="line"><span>Mapper    MapStruct-1.5.3  thrpt   25  23601713.316 ± 1247240.366  ops/s</span></span>
<span class="line"><span>Mapper          Selma-1.0  thrpt   25  24161620.968 ±  923848.147  ops/s</span></span>
<span class="line"><span>Mapper  JMapper-1.6.1.CR2  thrpt   25  19632956.722 ±  963388.556  ops/s</span></span>
<span class="line"><span>Mapper        datus-1.5.0  thrpt   25  13925750.428 ±  670830.594  ops/s</span></span>
<span class="line"><span>Mapper        Orika-1.5.4  thrpt   25   2950142.922 ±  203656.089  ops/s</span></span>
<span class="line"><span>Mapper  ModelMapper-3.1.0  thrpt   25    121694.578 ±   13540.111  ops/s</span></span>
<span class="line"><span>Mapper   BULL-2.1.2-jdk11  thrpt   25    127806.434 ±   12011.688  ops/s</span></span>
<span class="line"><span>Mapper        Dozer-6.5.2  thrpt   25     83840.654 ±    3225.088  ops/s</span></span>
<span class="line"><span>Mapper        ReMap-4.2.6  thrpt   25    505843.993 ±   25950.082  ops/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-05-文件系统和对象存储" tabindex="-1"><a class="header-anchor" href="#_0d-05-文件系统和对象存储"><span>0D.05.文件系统和对象存储</span></a></h2><p>需要权限才能访问的文件资源，不可以放到CDN，需要自建对象存储或使用物理文件系统， 当使用本地FS时，需要注意子文件或子目录的数量限制，一般控制在30k以下，理由如下，</p><ul><li>The ext2/ext3 filesystems have a hard limit of 31998 links.</li><li>数量过多时，ls读取巨慢，索引也会慢。</li></ul><p>如果自建对象存储，推荐以下方案</p><ul><li><a href="https://docs.min.io/cn/" target="_blank" rel="noopener noreferrer">https://docs.min.io/cn/</a> 推荐使用</li><li><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener noreferrer">https://github.com/happyfish100/fastdfs</a></li></ul><h2 id="_0d-06-客户端和服务器信息" tabindex="-1"><a class="header-anchor" href="#_0d-06-客户端和服务器信息"><span>0D.06.客户端和服务器信息</span></a></h2><p>收集用户画像，需要获得UA信息，可使用以下工具包</p><ul><li><a href="https://www.bitwalker.eu/software/user-agent-utils" target="_blank" rel="noopener noreferrer">https://www.bitwalker.eu/software/user-agent-utils</a> 浏览器（停止维护）</li><li><a href="https://github.com/browscap/browscap/wiki/Using-Browscap" target="_blank" rel="noopener noreferrer">https://github.com/browscap/browscap/wiki/Using-Browscap</a> 浏览器工具家族</li><li><a href="https://github.com/blueconic/browscap-java" target="_blank" rel="noopener noreferrer">https://github.com/blueconic/browscap-java</a> 浏览器（推荐）</li></ul><p>获取服务器运行信息，使用以下工具包</p><ul><li><a href="https://github.com/oshi/oshi" target="_blank" rel="noopener noreferrer">https://github.com/oshi/oshi</a> 系统信息</li></ul><h2 id="_0d-07-用户密码的安全性" tabindex="-1"><a class="header-anchor" href="#_0d-07-用户密码的安全性"><span>0D.07.用户密码的安全性</span></a></h2><ul><li>密码长度不可设置上限，一般要求8位以上</li><li>支持中文密码，标点，全角半角，建议中文密码</li><li>不发送明文密码，密码初级散列策略为md5(pass+&#39;:&#39;+pass).toUpperCase(Hex大写)</li><li>js侧md5需要支持UTF8，如 <a href="https://github.com/emn178/js-md5" target="_blank" rel="noopener noreferrer">https://github.com/emn178/js-md5</a></li><li>有敏感数据的请求，必须是https或其他安全通道</li></ul><h2 id="_0d-08-关于内网穿透和oauth调试" tabindex="-1"><a class="header-anchor" href="#_0d-08-关于内网穿透和oauth调试"><span>0D.08.关于内网穿透和Oauth调试</span></a></h2><p>在Oauth，支付等第三方集成调试时，需要有公网ip或域名，然后把公网请求转发到开发机调试。</p><ul><li>临时用 ssh - <code>ssh -R 9988:127.0.0.1:8080 user@remote</code></li><li>持久用 frp - <a href="https://gofrp.org/docs/" target="_blank" rel="noopener noreferrer">https://gofrp.org/docs/</a></li><li>简单用 netapp - <a href="https://natapp.cn/" target="_blank" rel="noopener noreferrer">https://natapp.cn/</a></li></ul><h2 id="_0d-09-idea提示component-scanned" tabindex="-1"><a class="header-anchor" href="#_0d-09-idea提示component-scanned"><span>0D.09.IDEA提示component/scanned</span></a></h2><p>导入wings工程，Idea会无法处理spring.factories中的WingsAutoConfiguration，会报类似以下信息</p><p>Not registered via @EnableConfigurationProperties, marked as Spring component, or scanned via @ConfigurationPropertiesScan</p><p>此时在，Project Structure中的Facets中的spring，对每个主工程， 导入<code>Code based configuration</code>，选择WingsAutoConfiguration，即可。</p><h2 id="_0d-10-jooq隐秘的nullpointerexception" tabindex="-1"><a class="header-anchor" href="#_0d-10-jooq隐秘的nullpointerexception"><span>0D.10.Jooq隐秘的NullPointerException</span></a></h2><p>在jooq映射enum类型时，如果converter错误，可能会出现以下NPE，不能通过stack定位问题，需要分析SQL</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java.lang.NullPointerException</span></span>
<span class="line"><span>at org.jooq.impl.DefaultExecuteContext.exception(DefaultExecuteContext.java:737)</span></span>
<span class="line"><span>at org.springframework.boot.autoconfigure.jooq.JooqExceptionTranslator.handle(JooqExceptionTranslator.java:83)</span></span>
<span class="line"><span>at org.springframework.boot.autoconfigure.jooq.JooqExceptionTranslator.exception(JooqExceptionTranslator.java:55)</span></span>
<span class="line"><span>at org.jooq.impl.ExecuteListeners.exception(ExecuteListeners.java:274)</span></span>
<span class="line"><span>at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:390)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-11-错误input-length-1" tabindex="-1"><a class="header-anchor" href="#_0d-11-错误input-length-1"><span>0D.11.错误<code>Input length = 1</code></span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources</span></span>
<span class="line"><span>  (default-resources) on project xxx-common: Input length = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>原因是maven-resources-plugin的filter目录中存在非文本文件(不可按字符串读取)， 不要降级到3.1.0，在nonFilteredFileExtension添加扩展名即可。</p><p><a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#howto-properties-and-configuration" target="_blank" rel="noopener noreferrer">Automatic Property Expansion Using Maven</a></p><h2 id="_0d-12-通过mysql客户端能找到-wings查询不到数据" tabindex="-1"><a class="header-anchor" href="#_0d-12-通过mysql客户端能找到-wings查询不到数据"><span>0D.12.通过mysql客户端能找到，wings查询不到数据</span></a></h2><p>wings本身是时区敏感的，一般要求jvm和mysql在同一时区，主要体现在， flywave版本管理和journal的delete_dt时，都采用了时间，可以快速发现问题。</p><p>Warlock启动时自动检查jvm，jdbc和mysql的时区，不一致时，在控制台以Error形式输出。</p>`,63),o=s(`<h2 id="_0d-13-无外网mysql如何执行flywave版本管理" tabindex="-1"><a class="header-anchor" href="#_0d-13-无外网mysql如何执行flywave版本管理"><span>0D.13.无外网mysql如何执行flywave版本管理</span></a></h2><p>建议在double check的情况下，手动执行和监控脚本。所以使用ssh Tunnel做端口转发。</p><p><code>ssh -N -L 3336:127.0.0.1:3306 [USER]@[SERVER_IP]</code></p><ul><li><code>-N</code> Tells SSH not to execute a remote command.</li><li><code>-L</code> 3336:127.0.0.1:3306 本地端口，远端ip，远端端口</li></ul><h2 id="_0d-14-swagger的问题" tabindex="-1"><a class="header-anchor" href="#_0d-14-swagger的问题"><span>0D.14.swagger的问题</span></a></h2><p><strong>从210版本，以SpringDoc取代SpringFox后</strong>，使用swagger3.0，部分问题已不存在</p><p><code>😱 Could not render n, see the console.</code> 是swagger前端js错误，可能是response对象层级过深，导致swagger扫描时间太长。</p><p><code>Unable to find a model that matches key ...</code> 如，</p><ul><li>ModelKey{qualifiedModelName=ModelName{namespace=&#39;java.time&#39;, name=&#39;Instant&#39;}</li><li>ModelKey{qualifiedModelName=ModelName{namespace=&#39;java.time&#39;, name=&#39;LocalDateTime&#39;}</li></ul><p>springfox的swagger3.0.0有bug，会在3.0.1修复， <a href="https://github.com/springfox/springfox/issues/3452" target="_blank" rel="noopener noreferrer">https://github.com/springfox/springfox/issues/3452</a></p><p>wings中可以通过暴露AlternateTypeRule bean，自动注入所以Docket中。</p><h2 id="_0d-15-反序列化时classcastexception或enum比较失败" tabindex="-1"><a class="header-anchor" href="#_0d-15-反序列化时classcastexception或enum比较失败"><span>0D.15.反序列化时ClassCastException或Enum比较失败</span></a></h2><p>涉及的反序列化lib包括，hazelcast, kryo, cache</p><ul><li>完全一样的class，但是在反序列化时却抛出 ClassCastException</li><li>同一个Enum的hash和equals不同，导致比较或map失败</li></ul><p>大概率是，开发时项目使用了spring-boot-devtools，导致IDE和jar处在不同的classloader。 IDE使用了devtools的<code>restart</code>, 而非IDE内的jar则是<code>base</code>。</p><ul><li>方案一，wings中始终使用<code>spring.hazelcast.config</code>配置hazelcast</li><li>方案二，自己暴露Config或ClientConfig，并设置好classloader</li><li>方案三，配置spring-devtools.properties（不推荐）</li></ul><p>不推荐在product环境使用devtool，参考springboot官方文档的<a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#using.devtools.restart.limitations" target="_blank" rel="noopener noreferrer">Known Limitations</a></p><h2 id="_0d-16-hazelcast的outofmemoryerror及callernotmemberexception" tabindex="-1"><a class="header-anchor" href="#_0d-16-hazelcast的outofmemoryerror及callernotmemberexception"><span>0D.16.Hazelcast的OutOfMemoryError及CallerNotMemberException</span></a></h2><p>当内存紧张时，hazelcast会出现OutOfMemoryError，然后集群以CallerNotMemberException拒绝此实例。</p><p>通常并发量级不过万，为实例jvm分配2-4G，主机预留一个1个实例的物理内存空闲可适用大部分场景。</p><blockquote><p>For this reason, we recommend that you plan to use only 60% of available memory, with 40% headroom to handle member failure or shutdown.</p></blockquote><ul><li><a href="https://hazelcast.com/blog/how-much-memory-do-i-need-for-my-data/" target="_blank" rel="noopener noreferrer">https://hazelcast.com/blog/how-much-memory-do-i-need-for-my-data/</a></li><li><a href="https://docs.hazelcast.com/hazelcast/5.1/configuration/understanding-configuration" target="_blank" rel="noopener noreferrer">https://docs.hazelcast.com/hazelcast/5.1/configuration/understanding-configuration</a></li></ul><h2 id="_0d-17-建表时的table-doesn-t-exist" tabindex="-1"><a class="header-anchor" href="#_0d-17-建表时的table-doesn-t-exist"><span>0D.17.建表时的<code>Table doesn&#39;t exist</code></span></a></h2><p>错误信息<code>Error Code: 1146. Table xxx doesn&#39;t exist</code> 这是个矛盾的现象，创建table，就是因为不存在啊，怎么不让我create呢。</p><p>这和文件系统的大小写有关，根据wings的Sql风格，建议全小写，snake_case。 此外，也建议在 mysqld 的配置上，增加 <code>lower_case_table_names=1</code></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names</a></p><h2 id="_0d-18-如何解压springboot生成的jar" tabindex="-1"><a class="header-anchor" href="#_0d-18-如何解压springboot生成的jar"><span>0D.18.如何解压springboot生成的jar</span></a></h2><p>通过executable=true生成的boot.jar，不能使用<code>jar -xzf</code>解压，需要<code>unzip</code>。 任何时候都推荐使用unzip解压，兼容性好，命令行简洁。</p><p>不能使用jar解压，是因为spring按executable zip的格式重新打包。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 显示文件列表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unzip</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo-example-1.0.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看文件内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">head</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo-example-1.0.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#    .   ____          _            __ _ _</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#   /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#  ( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#    &#39;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#   =========|_|==============|___/=/_/_/_/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#   :: Spring Boot Startup Script ::</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-19-not-eligible-for-auto-proxying" tabindex="-1"><a class="header-anchor" href="#_0d-19-not-eligible-for-auto-proxying"><span>0D.19.not eligible for auto-proxying</span></a></h2><p>is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</p><p>Bean在spring中有载入顺序，<code>Processor</code>，<code>framework</code>和业务Bean应该分开。 若某些Bean因为依赖关系在Processor前加载，则不会被正确处理，可能影响业务。</p><p>若是经过排查后，对业务没有影响，那么可忽略该INFO级别的Warning。</p><h2 id="_0d-20-时区检查失败-无法启动应用" tabindex="-1"><a class="header-anchor" href="#_0d-20-时区检查失败-无法启动应用"><span>0D.20.时区检查失败，无法启动应用</span></a></h2><ul><li>根据异常的提醒，设置正确的时区</li><li>确认jdbc驱动 mysql-connector版本不小于8.0.23</li><li>若不希望检查，设置<code>wings.warlock.check.tz-fail=false</code></li><li>按提示，统一jdbc，wings的时区即可</li></ul><h2 id="_0d-21-如何清理运行工程日志和临时文件" tabindex="-1"><a class="header-anchor" href="#_0d-21-如何清理运行工程日志和临时文件"><span>0D.21.如何清理运行工程日志和临时文件</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 清理log和tmp文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;*.log&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;*.tmp&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 重新flatten</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.pom.xml&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-22-json的泛型和泛型类的反序列化" tabindex="-1"><a class="header-anchor" href="#_0d-22-json的泛型和泛型类的反序列化"><span>0D.22.json的泛型和泛型类的反序列化</span></a></h2><p>spring中，使用<code>ResolvableType</code>和<code>TypeDescriptor</code>描述类型。 Wings中，用<code>TypeSugar</code>来简化代码行并缓存结果。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Map&lt;List&lt;List&lt;Long[]&gt;&gt;, String&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c0 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forClassWithGenerics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forClassWithGenerics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        ResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forClassWithGenerics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TypeSugar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c0, c1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TypeSugar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">describe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c2, c3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Wings-3.2.130后，移除了fastjson和jackson的<code>TypeReference</code>，直接使用<code>Type</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// tp0,tp1,tp2  http://gafter.blogspot.com/2006/12/super-type-tokens.html</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// TypeReference 一定要单行声明，避免自动推导的丢失类型。</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp0 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">google</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">common</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TypeToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">alibaba</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fastjson2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TypeReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fasterxml</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">jackson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TypeReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// spring way</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forClassWithGenerics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TypeDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResolvableType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// sugar</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tp5 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TypeSugar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tp0, tp1);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tp0, tp2);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tp0, tp3);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tp0, tp4);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tp0, tp5);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-23-kotlin可能编译失败" tabindex="-1"><a class="header-anchor" href="#_0d-23-kotlin可能编译失败"><span>0D.23.kotlin可能编译失败</span></a></h2><ul><li>kotlin-maven-plugin 插件，要同时编译java和kotlin</li><li>kotlin-stdlib-jdk8 这是最新的stdlib</li><li>mvn profile中的maven.compiler.target 优先与pom.xml</li><li>JAVA_HOME是否指定正确的jdk版本</li><li><code>wings-kotlin-*</code>的profile，在有<code>src/*/kotlin/</code>时自动生效</li></ul><h2 id="_0d-24-applicationcontexthelper空指针" tabindex="-1"><a class="header-anchor" href="#_0d-24-applicationcontexthelper空指针"><span>0D.24.ApplicationContextHelper空指针</span></a></h2><p>Silencer的ApplicationContextHelper提供了静态的Ioc能力，有空指针情况</p><ul><li>在SpringBoot生命周期的<code>PreparedEvent</code>之前使用</li><li>在不同的classloader中使用，比如devtool的<code>restart</code></li></ul><h2 id="_0d-25-idea无法打开工程-错误classformaterror" tabindex="-1"><a class="header-anchor" href="#_0d-25-idea无法打开工程-错误classformaterror"><span>0D.25.IDEA无法打开工程，错误ClassFormatError</span></a></h2><p>IDEA无法正常显示项目，关闭后也无法打开，但命令行下mvn正常。 Errors中有以下信息，升级IDEA或避免其Maven插件升级。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java.lang.ClassFormatError:</span></span>
<span class="line"><span>Illegal exception table range in class file</span></span>
<span class="line"><span>kotlin/reflect/jvm/internal/impl/builtins/KotlinBuiltIns</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-26-idea下properties文件乱码" tabindex="-1"><a class="header-anchor" href="#_0d-26-idea下properties文件乱码"><span>0D.26.IDEA下properties文件乱码</span></a></h2><p>在<code>Preferences</code> | <code>Editor</code> | <code>File Encodings</code> 下， Default encoding for properties files 选择<code>UTF8</code></p><p>若已经是UTF8，但仍有部分文件乱码，可以先切到iso8859在切回utf8</p><h2 id="_0d-27-编译正常-但idea说找不到类" tabindex="-1"><a class="header-anchor" href="#_0d-27-编译正常-但idea说找不到类"><span>0D.27.编译正常，但IDEA说找不到类</span></a></h2><p>可以在IDEA中清空当前工程的缓存和索引，File菜单下</p><ul><li>Cache Recovery / Rescan或Refresh试一下，若不好用，则</li><li>Invalidate Caches and Restart，若仍不好用，则</li><li>删除工程，清理<code>.idea</code>等文件，重新import</li></ul><h2 id="_0d-28-jooq-try-with-resources-warn" tabindex="-1"><a class="header-anchor" href="#_0d-28-jooq-try-with-resources-warn"><span>0D.28.Jooq try-with-resources Warn</span></a></h2><p>Jooq的DSL代码是try-with-resources安全的，若IDE代码审查出现以下警告，可以安全关闭。</p><p>选择<code>ignore AutoCloseable returned by this method</code>即可按类别关闭。</p><blockquote><p>Warning:(62, 18) &#39;SelectSelectStep&lt;Record2&lt;Long, String&gt;&gt;&#39; used without &#39;try&#39;-with-resources statement</p></blockquote><h2 id="_0d-29-statement-with-empty-body" tabindex="-1"><a class="header-anchor" href="#_0d-29-statement-with-empty-body"><span>0D.29.Statement with empty body</span></a></h2><p>若IDE代码审查出现以下警告，可编辑器规则，挑选<code>Comments count as content</code></p><h2 id="_0d-30-idea-inspect-code" tabindex="-1"><a class="header-anchor" href="#_0d-30-idea-inspect-code"><span>0D.30.IDEA inspect code</span></a></h2><p>排除 observer下的submodlue内容，尤其docs中的node内容。</p><p>Custom Scope <code>WingsCode</code>，Pattern设置如下，</p><p><code>!file:*/docs//*&amp;&amp;!file:*/meepo//*&amp;&amp;!file:*/mirana//*</code></p><h2 id="_0d-31-lombok错误-cannot-find-symbol" tabindex="-1"><a class="header-anchor" href="#_0d-31-lombok错误-cannot-find-symbol"><span>0D.31.lombok错误 cannot find symbol</span></a></h2><blockquote><p>cannot find symbol symbol: method onMethod_() location: @interface lombok.Setter</p></blockquote><p>当发生莫奇名秒的lombok编译错误时，需要按以下步骤排查，</p><ul><li>首先排除IDE影响，确认纯控制台下的mvn是否正常</li><li>优先解决非lombok的编译错误</li><li>优先解决静态编写的代码的错误</li></ul><h2 id="_0d-32-maven错误-non-resolvable-parent-pom" tabindex="-1"><a class="header-anchor" href="#_0d-32-maven错误-non-resolvable-parent-pom"><span>0D.32.maven错误 Non-resolvable parent POM</span></a></h2><blockquote><p>FATAL Non-resolvable parent POM for com.x.xx:xxx:\${revision}: Could not find artifact pro.fessional:wings:pom:2.6.6.210-SNAPSHOT and &#39;parent.relativePath&#39; points at wrong local POM</p></blockquote><p>以上错误一般在首次安装中，原因是repository中找不到wings的pom，尝试以下方法，</p><ul><li>若存在历史repo，设定$MVN_HOME/conf/settings.xml的localRepository指向</li><li>在当前pom中设置wings的ossrh-snapshots。非最新wings</li><li>自行 <code>maven install</code> wings工程到本地，最新wings</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;ossrh-snapshots&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">snapshots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">snapshots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">releases</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;false&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">releases</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-33-jackson-unrecognized-field" tabindex="-1"><a class="header-anchor" href="#_0d-33-jackson-unrecognized-field"><span>0D.33.jackson Unrecognized field</span></a></h2><blockquote><p>com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field class ..., not marked as ignorable 2 known properties:</p></blockquote><p>wings中默认配置jackson如下，mapper影响大小写，deserialization决定是否报错。</p><ul><li>mapper.ACCEPT_CASE_INSENSITIVE_PROPERTIES=false (<a href="https://github.com/FasterXML/jackson-databind/wiki/Mapper-Features" target="_blank" rel="noopener noreferrer">default false</a>)</li><li>deserialization.FAIL_ON_UNKNOWN_PROPERTIES=false (<a href="https://github.com/FasterXML/jackson-databind/wiki/Deserialization-Features#jackson-onoff-features-deserializationfeature" target="_blank" rel="noopener noreferrer">default true</a>)</li></ul><p>以上两者为<code>(false, true)</code>即默认值时，会出现Unrecognized field，通过以下方法可解决.</p><ul><li>在类上<code>@JsonFormat(with = ACCEPT_CASE_INSENSITIVE_PROPERTIES)</code></li><li>在属性上<code>@JsonProperty(&quot;Amount&quot;)</code></li><li>调整wings配置（不推荐），CASE_INSENSITIVE有性能损耗，推延命名问题的发现</li><li>根据jackson2ObjectMapperBuilder，新建并配置Mapper</li></ul><h2 id="_0d-34-javax-annotation-meta-when-maybe" tabindex="-1"><a class="header-anchor" href="#_0d-34-javax-annotation-meta-when-maybe"><span>0D.34.javax.annotation.meta.When.MAYBE</span></a></h2><blockquote><p>java: unknown enum constant javax.annotation.meta.When.MAYBE reason: class file for javax.annotation.meta.When not found</p></blockquote><p><code>When.MAYBE</code> 位于 <code>com.google.code.findbugs:jsr305:3.0.2</code>， 被<code>org.springframework.lang.Nullable</code>使用，但wings不依赖此包。</p><p>当使用<code>@Nullable</code>和<code>NxxNull</code>时，必须是<code>org.jetbrains.annotations</code></p><h2 id="_0d-35-stackoverflowerror-无限循环" tabindex="-1"><a class="header-anchor" href="#_0d-35-stackoverflowerror-无限循环"><span>0D.35.StackOverflowError 无限循环</span></a></h2><ul><li><a href="https://github.com/trydofor/professional-wings/issues/138" target="_blank" rel="noopener noreferrer">StackOverflowError infinite loop</a></li><li><a href="https://github.com/trydofor/professional-wings/issues/158" target="_blank" rel="noopener noreferrer">StackOverflowError endless loop</a></li></ul><p><code>401</code> 或 <code>403</code>的 forward 到 “secured” 的登录页面会触发无限循环，wings默认，</p><ul><li><code>wings.warlock.security.anonymous</code> - 禁止 anonymous</li><li><code>wings.enabled.warlock.sec-check-url</code> - 检查URL冲突</li></ul><h2 id="_0d-36-springmvc常见拦截的区别" tabindex="-1"><a class="header-anchor" href="#_0d-36-springmvc常见拦截的区别"><span>0D.36.SpringMvc常见拦截的区别</span></a></h2><ul><li><code>Filter</code> - 作用于servlet (a)</li><li><code>Aop</code> - 作用于方法 (b)</li><li><code>HandlerInterceptor</code> - 作用于 <code>@Controller</code> (a)</li><li><code>@ControllerAdvice</code> - 仅定义 <code>@Component</code></li><li><code>RequestBodyAdvice</code> - 仅作用于 <code>@RequestBody</code> (c)</li><li><code>ResponseBodyAdvice</code> - 仅作用于 <code>@ResponseBody</code> (c)</li></ul><p>其中，需要注意的地方有，</p><ul><li>(a) 如读取输入流，会引发流读尽(EOF)的问题</li><li>(b) 可直接获取参数，避免输入流读尽的问题</li><li>(c) 无输入流读尽问题</li></ul><h2 id="_0d-37-显示或隐藏异常堆栈" tabindex="-1"><a class="header-anchor" href="#_0d-37-显示或隐藏异常堆栈"><span>0D.37.显示或隐藏异常堆栈</span></a></h2><p>有些异常，不需要堆栈，比如用户输入错误，仅返回提示信息即可。 有些异常，需要记录日志，以便调查或统计。那么如何微调这些情况呢？</p><ul><li>CodeException - 是否填充堆栈（默认无堆栈） <ul><li>全局属性 <code>wings.silencer.tweak.code-stack=false</code></li><li>线程级 <code>TweakStack.tweakXxx()</code></li><li>业务级 <code>TweakStack.tweakCode()</code></li></ul></li><li>DefaultExceptionResolver - 以下默认不打印堆栈 <ul><li>HttpStatusException</li><li>TerminalContextException</li><li>CodeException</li><li>DataResult</li><li>AuthenticationException</li><li>AccessDeniedException</li></ul></li></ul><p>若需要微调以上堆栈配置，可以自定义 <code>DefaultExceptionResolver.Handler</code>。</p><h2 id="_0d-38-缺少dao-skipping-dao-generation" tabindex="-1"><a class="header-anchor" href="#_0d-38-缺少dao-skipping-dao-generation"><span>0D.38.缺少DAO, &quot;Skipping DAO generation&quot;</span></a></h2><p>jooq生成代码后，没有<code>Dao</code>，但是有<code>Pojo</code>，有 <code>Skipping DAO generation</code>日志， 需要检查数据表，是否没有主键，其相关日志和代码如下，</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// JavaGenerator -- Skipping DAO generation</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UniqueKeyDefinition</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPrimaryKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Skipping DAO generation&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-39-transactional在接口还是具体类" tabindex="-1"><a class="header-anchor" href="#_0d-39-transactional在接口还是具体类"><span>0D.39.@Transactional在接口还是具体类</span></a></h2><p><a href="https://docs.spring.io/spring-framework/reference/data-access/transaction/declarative/annotations.html" target="_blank" rel="noopener noreferrer">官方文档</a>建议放到具体类上，Wings建议都放置，接口上的为说明锲约，实现类上的为功能实现。</p><p>当接口中存在<code>default</code>方法时，会导致<code>@Transactional</code>失效，原因和内部调用一样。此时，</p><ul><li><code>Override</code>每个方法，在class 上<code>@Transactional</code></li><li>编程方式实现事务方法，如 <code>TransactionHelper</code>, <code>TransactionTemplate</code></li></ul><h2 id="_0d-40-git-submodule-head-detached" tabindex="-1"><a class="header-anchor" href="#_0d-40-git-submodule-head-detached"><span>0D.40.git submodule HEAD detached</span></a></h2><p>工程默认以 shallow 检出 main 分支，submodule的commit为 detached 状态，</p><p>当 commit 在 main 分支时，以 docs 为例，此时 <code>fetch origin</code> 可以获取分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; HEAD detached at c30360b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; nothing to commit, working tree clean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; Switched to branch &#39;main&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; Your branch is up to date with &#39;origin/main&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 commit 在 develop 时，以 mirana 为例，需要切换分支，但 <code>fetch --all</code> 却无法获取分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## branch = main shallow = true</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; origin/HEAD -&gt; origin/main</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; origin/main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## fetch --all # 无效，仅有main分支</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># git fetch --all -v</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; From github.com:trydofor/professional-mirana</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt;  = [up to date] main -&gt; origin/main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 查看远程分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls-remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; 4468526dab9 refs/heads/develop</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; 96d19eb57d3 refs/heads/main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 检出 fetch 设置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --get-all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote.origin.fetch</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#&gt; +refs/heads/main:refs/remotes/origin/main</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set-branches</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;*&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 获取并检出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -av</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin/develop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 反初始 mirana 子模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#git submodule deinit -f -- observe/mirana</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 重新初始 mirana 子模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#git submodule update --remote --init -- observe/mirana</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_0d-41-快速而优雅的停机" tabindex="-1"><a class="header-anchor" href="#_0d-41-快速而优雅的停机"><span>0D.41.快速而优雅的停机</span></a></h2><p>wings的线程池，默认配置如下，会等待任务（执行中及队列中）结束或超时，</p><ul><li>shutdown.await-termination=true</li><li>shutdown.await-termination-period=###</li></ul><p>如果不需要等待，可参考以下功能，监听shutdown，取消队列中任务，</p><ul><li>spring <code>@Scheduled</code> - 会misfire</li><li>tiny mail - 有misfire检查</li><li>tiny task - 有misfire检查</li></ul><p>当 await-termination=false时，线程池会发中断信息到所有线程，</p><ul><li>执行中任务，可执行结束或被中断（如有sleep,wait,join或检查中断状态）</li><li>队列中任务，被动丢失，会主动取消</li></ul><p>所以，当处理异步或未来任务时，需要考虑中断，取消和关闭的情况，</p><ul><li>可丢失型，await-termination=false</li><li>可恢复型，await-termination=true，主动处理中断或取消</li></ul>`,120);function c(g,y){const a=n("RouteLink");return r(),l("div",null,[k,t("p",null,[i("更多信息，参考"),h(a,{to:"/zh/2-faceless/2h-time-zone.html"},{default:p(()=>[i("时间和时区")]),_:1})]),o])}const m=e(d,[["render",c],["__file","0d-qa-devops.html.vue"]]),B=JSON.parse(`{"path":"/zh/0-wings/0d-qa-devops.html","title":"0D.开发运维","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"fab fa-dev","category":["神翼","话题"],"description":"0D.开发运维 编码开发，线上运行等话题。 0D.01.getHostName()很长时间 InetAddress.getLocalHost().getHostName() took 5004 milliseconds to respond. Please verify your network configuration (macOS machine...","GIT_REPO_HEAD":"2025-01-17 e638e7035dc7958e3f145793e37c871eb02f12d5","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/0-wings/0d-qa-devops.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/0-wings/0d-qa-devops.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"0D.开发运维"}],["meta",{"property":"og:description","content":"0D.开发运维 编码开发，线上运行等话题。 0D.01.getHostName()很长时间 InetAddress.getLocalHost().getHostName() took 5004 milliseconds to respond. Please verify your network configuration (macOS machine..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0D.开发运维\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"0D.01.getHostName()很长时间","slug":"_0d-01-gethostname-很长时间","link":"#_0d-01-gethostname-很长时间","children":[]},{"level":2,"title":"0D.02.如何创建一个工程","slug":"_0d-02-如何创建一个工程","link":"#_0d-02-如何创建一个工程","children":[]},{"level":2,"title":"0D.03.jackson和fastjson","slug":"_0d-03-jackson和fastjson","link":"#_0d-03-jackson和fastjson","children":[]},{"level":2,"title":"0D.04.类型间Mapping比较","slug":"_0d-04-类型间mapping比较","link":"#_0d-04-类型间mapping比较","children":[]},{"level":2,"title":"0D.05.文件系统和对象存储","slug":"_0d-05-文件系统和对象存储","link":"#_0d-05-文件系统和对象存储","children":[]},{"level":2,"title":"0D.06.客户端和服务器信息","slug":"_0d-06-客户端和服务器信息","link":"#_0d-06-客户端和服务器信息","children":[]},{"level":2,"title":"0D.07.用户密码的安全性","slug":"_0d-07-用户密码的安全性","link":"#_0d-07-用户密码的安全性","children":[]},{"level":2,"title":"0D.08.关于内网穿透和Oauth调试","slug":"_0d-08-关于内网穿透和oauth调试","link":"#_0d-08-关于内网穿透和oauth调试","children":[]},{"level":2,"title":"0D.09.IDEA提示component/scanned","slug":"_0d-09-idea提示component-scanned","link":"#_0d-09-idea提示component-scanned","children":[]},{"level":2,"title":"0D.10.Jooq隐秘的NullPointerException","slug":"_0d-10-jooq隐秘的nullpointerexception","link":"#_0d-10-jooq隐秘的nullpointerexception","children":[]},{"level":2,"title":"0D.11.错误Input length = 1","slug":"_0d-11-错误input-length-1","link":"#_0d-11-错误input-length-1","children":[]},{"level":2,"title":"0D.12.通过mysql客户端能找到，wings查询不到数据","slug":"_0d-12-通过mysql客户端能找到-wings查询不到数据","link":"#_0d-12-通过mysql客户端能找到-wings查询不到数据","children":[]},{"level":2,"title":"0D.13.无外网mysql如何执行flywave版本管理","slug":"_0d-13-无外网mysql如何执行flywave版本管理","link":"#_0d-13-无外网mysql如何执行flywave版本管理","children":[]},{"level":2,"title":"0D.14.swagger的问题","slug":"_0d-14-swagger的问题","link":"#_0d-14-swagger的问题","children":[]},{"level":2,"title":"0D.15.反序列化时ClassCastException或Enum比较失败","slug":"_0d-15-反序列化时classcastexception或enum比较失败","link":"#_0d-15-反序列化时classcastexception或enum比较失败","children":[]},{"level":2,"title":"0D.16.Hazelcast的OutOfMemoryError及CallerNotMemberException","slug":"_0d-16-hazelcast的outofmemoryerror及callernotmemberexception","link":"#_0d-16-hazelcast的outofmemoryerror及callernotmemberexception","children":[]},{"level":2,"title":"0D.17.建表时的Table doesn't exist","slug":"_0d-17-建表时的table-doesn-t-exist","link":"#_0d-17-建表时的table-doesn-t-exist","children":[]},{"level":2,"title":"0D.18.如何解压springboot生成的jar","slug":"_0d-18-如何解压springboot生成的jar","link":"#_0d-18-如何解压springboot生成的jar","children":[]},{"level":2,"title":"0D.19.not eligible for auto-proxying","slug":"_0d-19-not-eligible-for-auto-proxying","link":"#_0d-19-not-eligible-for-auto-proxying","children":[]},{"level":2,"title":"0D.20.时区检查失败，无法启动应用","slug":"_0d-20-时区检查失败-无法启动应用","link":"#_0d-20-时区检查失败-无法启动应用","children":[]},{"level":2,"title":"0D.21.如何清理运行工程日志和临时文件","slug":"_0d-21-如何清理运行工程日志和临时文件","link":"#_0d-21-如何清理运行工程日志和临时文件","children":[]},{"level":2,"title":"0D.22.json的泛型和泛型类的反序列化","slug":"_0d-22-json的泛型和泛型类的反序列化","link":"#_0d-22-json的泛型和泛型类的反序列化","children":[]},{"level":2,"title":"0D.23.kotlin可能编译失败","slug":"_0d-23-kotlin可能编译失败","link":"#_0d-23-kotlin可能编译失败","children":[]},{"level":2,"title":"0D.24.ApplicationContextHelper空指针","slug":"_0d-24-applicationcontexthelper空指针","link":"#_0d-24-applicationcontexthelper空指针","children":[]},{"level":2,"title":"0D.25.IDEA无法打开工程，错误ClassFormatError","slug":"_0d-25-idea无法打开工程-错误classformaterror","link":"#_0d-25-idea无法打开工程-错误classformaterror","children":[]},{"level":2,"title":"0D.26.IDEA下properties文件乱码","slug":"_0d-26-idea下properties文件乱码","link":"#_0d-26-idea下properties文件乱码","children":[]},{"level":2,"title":"0D.27.编译正常，但IDEA说找不到类","slug":"_0d-27-编译正常-但idea说找不到类","link":"#_0d-27-编译正常-但idea说找不到类","children":[]},{"level":2,"title":"0D.28.Jooq try-with-resources Warn","slug":"_0d-28-jooq-try-with-resources-warn","link":"#_0d-28-jooq-try-with-resources-warn","children":[]},{"level":2,"title":"0D.29.Statement with empty body","slug":"_0d-29-statement-with-empty-body","link":"#_0d-29-statement-with-empty-body","children":[]},{"level":2,"title":"0D.30.IDEA inspect code","slug":"_0d-30-idea-inspect-code","link":"#_0d-30-idea-inspect-code","children":[]},{"level":2,"title":"0D.31.lombok错误 cannot find symbol","slug":"_0d-31-lombok错误-cannot-find-symbol","link":"#_0d-31-lombok错误-cannot-find-symbol","children":[]},{"level":2,"title":"0D.32.maven错误 Non-resolvable parent POM","slug":"_0d-32-maven错误-non-resolvable-parent-pom","link":"#_0d-32-maven错误-non-resolvable-parent-pom","children":[]},{"level":2,"title":"0D.33.jackson Unrecognized field","slug":"_0d-33-jackson-unrecognized-field","link":"#_0d-33-jackson-unrecognized-field","children":[]},{"level":2,"title":"0D.34.javax.annotation.meta.When.MAYBE","slug":"_0d-34-javax-annotation-meta-when-maybe","link":"#_0d-34-javax-annotation-meta-when-maybe","children":[]},{"level":2,"title":"0D.35.StackOverflowError 无限循环","slug":"_0d-35-stackoverflowerror-无限循环","link":"#_0d-35-stackoverflowerror-无限循环","children":[]},{"level":2,"title":"0D.36.SpringMvc常见拦截的区别","slug":"_0d-36-springmvc常见拦截的区别","link":"#_0d-36-springmvc常见拦截的区别","children":[]},{"level":2,"title":"0D.37.显示或隐藏异常堆栈","slug":"_0d-37-显示或隐藏异常堆栈","link":"#_0d-37-显示或隐藏异常堆栈","children":[]},{"level":2,"title":"0D.38.缺少DAO, \\"Skipping DAO generation\\"","slug":"_0d-38-缺少dao-skipping-dao-generation","link":"#_0d-38-缺少dao-skipping-dao-generation","children":[]},{"level":2,"title":"0D.39.@Transactional在接口还是具体类","slug":"_0d-39-transactional在接口还是具体类","link":"#_0d-39-transactional在接口还是具体类","children":[]},{"level":2,"title":"0D.40.git submodule HEAD detached","slug":"_0d-40-git-submodule-head-detached","link":"#_0d-40-git-submodule-head-detached","children":[]},{"level":2,"title":"0D.41.快速而优雅的停机","slug":"_0d-41-快速而优雅的停机","link":"#_0d-41-快速而优雅的停机","children":[]}],"git":{"createdTime":1655901635000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":20}]},"readingTime":{"minutes":15.17,"words":4551},"filePathRelative":"zh/0-wings/0d-qa-devops.md","localizedDate":"2022年6月22日","autoDesc":true}`);export{m as comp,B as data};
