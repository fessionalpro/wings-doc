import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e}from"./app-Bq2ogDBv.js";const l={},n=e(`<h1 id="_3g-后端防护功能" tabindex="-1"><a class="header-anchor" href="#_3g-后端防护功能"><span>3G.后端防护功能</span></a></h1><p>对后端服务，提供一定的保护和控制能力</p><h2 id="_3g-1-后端防抖" tabindex="-1"><a class="header-anchor" href="#_3g-1-后端防抖"><span>3G.1.后端防抖</span></a></h2><p>与前端的Lodash相似，不同的是后端业务优先，只支持先调用后等待的leading防抖。 即在第一个请求时处理业务，有后续请求出现时，支持以下处理方式，</p><ul><li>不复用leading结果时，直接返回预设的response(默认208 Already Reported)。否则，</li><li>等待waiting毫秒数，或超时或被leading唤醒。然后，</li><li>若有leading有response，则复用；否则，返回预设response。</li></ul><p><code>@Debounce</code>基于HandlerInterceptor，request流复用和response流缓存。 作用于Controller层，是Session级，以URL特征及参数为判断重复的依据。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/test/debounce-body.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">waiting</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 600</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> header</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> body</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> reuse</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> debounceBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Q</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> q) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;::&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> seq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getAndIncrement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;::&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> q</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getQ</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多示例参考Debounce代码文档或测试代码<code>TestDebounceController.java</code></p><h2 id="_3g-2-防止连击" tabindex="-1"><a class="header-anchor" href="#_3g-2-防止连击"><span>3G.2.防止连击</span></a></h2><p><code>@DoubleKill</code>与Debounce不同，是类似Cacheable的AOP，用于Service层防止同时计算。 底层基于业务锁，而非时间间隔，开始时获取锁，结束时释放锁，得不到锁的请求会被kill。</p><p>命名是Dota的，但意思不同，是杀死第二个，由Jvm全局锁和DoubleKillException实现。</p><p>能够但不建议用于Controller层，此时需要显式的通过Spel指定参数，如@RequestParam。 默认是session级别的控制，可使用@Bean进行处理。默认返回202 Accepted</p><p>DoubleKillException默认返回固定的json，注入DoubleKillExceptionResolver可替换， 需要注意ExceptionResolver或ExceptionHandler的Order，避免异常捕获的层级错误。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">DoubleKill</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;#type + &#39;-&#39; + #p1 * 1000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sleepSecondExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> s) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">DoubleKill</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;@httpSessionIdResolver.resolveSessionIds(#p0)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doubleKill</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> request) throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10_000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;login page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细用法，参考DoubleKill源码文档，或参考测试代码</p><ul><li><a href="https://github.com/trydofor/professional-wings/blob/master/wings/slardar/src/test/java/pro/fessional/wings/slardar/controller/TestDoubleKillController.java" target="_blank" rel="noopener noreferrer">TestDoubleKillController.java</a></li><li><a href="https://github.com/trydofor/professional-wings/blob/master/wings/slardar/src/test/java/pro/fessional/wings/slardar/service/DoubleKillService.java" target="_blank" rel="noopener noreferrer">DoubleKillService.java</a></li></ul><h2 id="_3g-3-验证码" tabindex="-1"><a class="header-anchor" href="#_3g-3-验证码"><span>3G.3.验证码</span></a></h2><p>对于受保护的资源，使用验证码防扒，有时是为了延缓时间，有时是为了区分行为。 验证码的加载和验证，可以通过header或param进行（默认param）。</p><p>在SpringSecurity中，对401和403有以下约定，所以验证码使用406(Not Acceptable)</p><ul><li>401 - Unauthorized 身份未鉴别</li><li>403 - Forbidden/Access Denied 鉴权通过，授权不够</li></ul><p>slardar的验证码是基于图片的，现今的AI算法识别率可达99.9%以上，因此并不安全， 仅限于初防君子的初级资源保护上。默认支持中文，一个汉字+3个英数，可以在配置中关闭。 若是敏感信息或高级防护，建议采购第三方验证码服务。</p><p>使用方法如下，在MappingMethod上，放置<code>@FirstBlood</code> 即可，工作流程如下。</p><ul><li>客户端正常访问此URL，如/test/captcha.json（需要支持GET方法，以便返回图片）</li><li>服务器需要验证码时，以406(Not Acceptable)返回提示json</li><li>客户端在header和cookie中获得Client-Ticket的token，并每次都发送</li><li>客户端在URL后增加quest-captcha-image=\${vcode}获取验证码图片（可直接使用） <ul><li>以<code>accept</code>区分图片的返回形式，<code>base64</code>为base64格式的图，其他均为二进制流</li><li>当<code>vcode</code>为验证码，通过时，返回空body，否则返回新的验证图片</li></ul></li><li>客户端在URL后增加check-captcha-image=\${vcode}提交验证码</li><li>服务器端自动校验Client-Ticket和check-captcha-image，完成验证或放行</li></ul><p>若需集成其他验证码，如第三方服务或消息验证码，实现并注入FirstBloodHandler即可</p><h2 id="_3g-4-防止篡改" tabindex="-1"><a class="header-anchor" href="#_3g-4-防止篡改"><span>3G.4.防止篡改</span></a></h2><p>通过http header中为要编辑的信息设置签名，防止客户端篡改。默认返回409(Conflict)。 详见 wings-righter-79.properties 和 RighterContext。实现原理和使用方法是，</p><ul><li>使用Righter注解编辑数据(false)和提交数据(true)的方法</li><li>获得编辑数据时，在RighterContext中设置签名的数据header</li><li>提交时需要提交此签名，并被校验，签名错误时直接409</li><li>签名通过后，通过RighterContext获取数据，程序自行检验数据项是否一致</li></ul><h2 id="_3g-5-终端信息" tabindex="-1"><a class="header-anchor" href="#_3g-5-终端信息"><span>3G.5.终端信息</span></a></h2><p>通过以下方式，在当前线程（和request）中设置如ip，agent，locale和timezone的Terminal信息，</p><ul><li><code>HandlerInterceptor</code> - Controller</li><li><code>AuthenticationEventPublisher</code> - Filter (login/logout)</li></ul><h2 id="_3g-6-请求复用和应答缓存" tabindex="-1"><a class="header-anchor" href="#_3g-6-请求复用和应答缓存"><span>3G.6.请求复用和应答缓存</span></a></h2><p>WingsReuseStreamFilter 实行了request流的循环读，和response的缓存。 在使用以下filter时，会出现bytes重复复制而浪费空间，建议自行Override。</p><ul><li>CommonsRequestLoggingFilter</li><li>ShallowEtagHeaderFilter</li></ul><p>ReuseStream的流仅提供了复用功能，默认不开启，不使用时无空间和性能损失。 仅在需要时，由filter，interceptor，advice等机制在使用其开启复用功能。</p><p>需要注意filter的order，以保证该filter在使用之前完成wrapper。</p><h2 id="_3g-7-请求及应答日志" tabindex="-1"><a class="header-anchor" href="#_3g-7-请求及应答日志"><span>3G.7.请求及应答日志</span></a></h2><p>通过为WingsReuseStreamFilter注入RequestResponseLogging可实现请求应答日志。 相比于CommonsRequestLoggingFilter，此功能按需复用，同时支持request和response。</p><p>实现AbstractRequestResponseLogging Bean即可，参考代码如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> RequestResponseLogging</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> requestResponseLogging</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> AbstractRequestResponseLogging</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Condition</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> loggingConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ReuseStreamRequestWrapper</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRequestURI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/test/debounce&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cond</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRequestEnable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRequestPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setResponseEnable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            cond</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setResponsePayload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cond;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> logging</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其原理是，WingsReuseStreamFilter配置时，自动实现了以下步骤。</p><ul><li>@AutoConfigureBefore(SlardarRestreamConfiguration.class)</li><li>获取 WingsReuseStreamFilter，然后setRequestResponseLogging</li></ul><p>注意<code>POST</code>提交传统表单提交，以下2中类型，包括参数和文件，</p><ul><li><code>application/x-www-form-urlencoded</code></li><li><code>multipart/form-data</code></li></ul><p>因底层的参数解析和获取流是二选一关系，即先解析则流读尽，获取流则参数为空。 所以，对应此两种请求需要记录Payload时，会存在以下差异</p><ul><li>form-urlencoded，因后置构造body，所以其中会包括query参数</li><li>form-data，body同上，文件需要实现buildRequestPayload获取parts记录</li></ul><h2 id="_3g-8-rest和client" tabindex="-1"><a class="header-anchor" href="#_3g-8-rest和client"><span>3G.8.Rest和Client</span></a></h2><p>默认使用OkHttp作为restTemplate的实现。遵循SpringBoot官方文档和源码约定， 可以Autowired OkHttpClient直接使用，默认<strong>信任所有ssl证书</strong>，如安全高，需要关闭。 如果需要按scope定制，使用RestTemplateBuilder，全局应用使用RestTemplateCustomizer。</p><p><a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#io.rest-client.resttemplate.customization" target="_blank" rel="noopener noreferrer">RestTemplate 定制</a> org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</p><p>在springboot2.x中okhttp默认是3.x，而just-auth需要4.x，所以需要手动okhttp3.version属性</p><h2 id="_3g-9-负载过滤器" tabindex="-1"><a class="header-anchor" href="#_3g-9-负载过滤器"><span>3G.9.负载过滤器</span></a></h2><p>OverloadFilter可限定请求并发，默认<code>false</code></p><ul><li>自动或手动设置<code>最大同时进行请求数</code>，超过时，执行<code>fallback</code>。</li><li>不影响性能的情况下，记录慢响应URI和运行状态。</li><li>优雅停止服务器，阻断所有新请求。</li><li>相同IP请求过于频繁，执行fallback。</li></ul><p><code>最大同时进行请求数</code>，指已经由Controller处理，但未完成的请求。</p><p>其中，关闭<code>快请求</code>或<code>慢请求</code>功能，可以通过以下设置关闭，</p><ul><li><code>快请求</code> - <code>wings.slardar.overload.request-capacity=-1</code></li><li><code>慢请求</code> - <code>wings.slardar.overload.response-warn-slow=0</code></li></ul><h2 id="_3g-10-分页查询" tabindex="-1"><a class="header-anchor" href="#_3g-10-分页查询"><span>3G.10.分页查询</span></a></h2><p>Wings中使用PageQuery和PageDefault取代了SpringData中的Pagable。</p><ul><li>PageQuery只能使用QueryString方式传递，不属于RequesBody部分。</li><li><code>@ParameterObject</code> PageQuery pq</li><li><code>@ParameterObject</code> <code>@PageDefault(size=30)</code> PageQuery pq</li></ul><p>使用@ParameterObject注解，是为了Swagger能自动识别为Param类型</p><p>同PageQuery一样，返回分页使用PageResult作为容器，Wings中有相应的工具类。</p><p>当PageQuery作为@RequesBody使用时，一般如下形式，</p><ul><li>继承 Ins extends PageQuery</li><li>组合 private PageQuery pagable</li></ul><p>不能享有PageDefault及别名，和普通的json对象一样，由以下类处理。</p><ul><li>RequestResponseBodyMethodProcessor</li><li>HttpMessageConverter</li></ul><p>因别名需求，一般用于兼容老系统，所以未定制jackson的Deserializer及HandlerMethodArgumentResolver</p>`,65),t=[n];function h(p,r){return a(),s("div",null,t)}const g=i(l,[["render",h],["__file","3g-fun-server.html.vue"]]),o=JSON.parse('{"path":"/zh/3-slardar/3g-fun-server.html","title":"3G.后端防护功能","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"shield-heart","category":["鱼人","防护","后端"],"description":"3G.后端防护功能 对后端服务，提供一定的保护和控制能力 3G.1.后端防抖 与前端的Lodash相似，不同的是后端业务优先，只支持先调用后等待的leading防抖。 即在第一个请求时处理业务，有后续请求出现时，支持以下处理方式， 不复用leading结果时，直接返回预设的response(默认208 Already Reported)。否则， 等待w...","GIT_REPO_HEAD":"2024-08-01 05107706255cba83dc5ec76e359d3302df867736","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/3-slardar/3g-fun-server.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/3-slardar/3g-fun-server.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"3G.后端防护功能"}],["meta",{"property":"og:description","content":"3G.后端防护功能 对后端服务，提供一定的保护和控制能力 3G.1.后端防抖 与前端的Lodash相似，不同的是后端业务优先，只支持先调用后等待的leading防抖。 即在第一个请求时处理业务，有后续请求出现时，支持以下处理方式， 不复用leading结果时，直接返回预设的response(默认208 Already Reported)。否则， 等待w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3G.后端防护功能\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"3G.1.后端防抖","slug":"_3g-1-后端防抖","link":"#_3g-1-后端防抖","children":[]},{"level":2,"title":"3G.2.防止连击","slug":"_3g-2-防止连击","link":"#_3g-2-防止连击","children":[]},{"level":2,"title":"3G.3.验证码","slug":"_3g-3-验证码","link":"#_3g-3-验证码","children":[]},{"level":2,"title":"3G.4.防止篡改","slug":"_3g-4-防止篡改","link":"#_3g-4-防止篡改","children":[]},{"level":2,"title":"3G.5.终端信息","slug":"_3g-5-终端信息","link":"#_3g-5-终端信息","children":[]},{"level":2,"title":"3G.6.请求复用和应答缓存","slug":"_3g-6-请求复用和应答缓存","link":"#_3g-6-请求复用和应答缓存","children":[]},{"level":2,"title":"3G.7.请求及应答日志","slug":"_3g-7-请求及应答日志","link":"#_3g-7-请求及应答日志","children":[]},{"level":2,"title":"3G.8.Rest和Client","slug":"_3g-8-rest和client","link":"#_3g-8-rest和client","children":[]},{"level":2,"title":"3G.9.负载过滤器","slug":"_3g-9-负载过滤器","link":"#_3g-9-负载过滤器","children":[]},{"level":2,"title":"3G.10.分页查询","slug":"_3g-10-分页查询","link":"#_3g-10-分页查询","children":[]}],"git":{"createdTime":1655981049000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":6}]},"readingTime":{"minutes":6.07,"words":1820},"filePathRelative":"zh/3-slardar/3g-fun-server.md","localizedDate":"2022年6月23日","autoDesc":true}');export{g as comp,o as data};
