import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o as t,e as a}from"./app-DEdToB0k.js";const i={},s=a(`<h1 id="_3h-后端常见话题" tabindex="-1"><a class="header-anchor" href="#_3h-后端常见话题"><span>3H.后端常见话题</span></a></h1><h2 id="_3h-01-error-creating-hazelcastinstance" tabindex="-1"><a class="header-anchor" href="#_3h-01-error-creating-hazelcastinstance"><span>3H.01.Error creating &#39;hazelcastInstance&#39;</span></a></h2><blockquote><p>Error creating bean with name &#39;hazelcastInstance&#39; Invalid content was found starting with element &#39;cluster-name&#39;，</p></blockquote><p>若是有以上信息，是hazelcast 3和4配置的兼容问题，boot-2.2.x为hazelcast 3.12.x</p><h2 id="_3h-02-修改servlet容器" tabindex="-1"><a class="header-anchor" href="#_3h-02-修改servlet容器"><span>3H.02.修改Servlet容器</span></a></h2><p>slardar 默认使用undertow，并提供 spring-servlet-server-79.properties 配置</p><h2 id="_3h-03-session方案的选择" tabindex="-1"><a class="header-anchor" href="#_3h-03-session方案的选择"><span>3H.03.Session方案的选择</span></a></h2><p>其实 hazelcast 是个不错的选择，若选用redis，切记redis必须<code>requirepass</code>。 最后，从redis+redisson的方案，切换成了hazelcast的方案。其理由如下。</p><ul><li>单应用进化的简单性，hazelcast是零依赖</li><li>性能，可用性，运维角度，两者五五开</li></ul><p>关于hazelcast和spring，主要的管理场景是cache,session,security</p><ul><li>spring-boot优先尝试创建client，不成则创建embedded server</li><li>spring session 使用@Enable*HttpSession手动配置</li></ul><p>文档中是hazelcast3的配置，实际支持4。 文档中的例子都是通过编码方式配置的，实际可以通过xml配置，交由boot处理。 系统默认提供了server和client的组播配置。</p><h2 id="_3h-04-异常处理或handler" tabindex="-1"><a class="header-anchor" href="#_3h-04-异常处理或handler"><span>3H.04.异常处理或handler</span></a></h2><p>需要根据spring约定和实际需要，自定义一套机制。 但是不要使用<code>spring.mvc.throw-exception-if-no-handler-found=true</code>， 因为，异常之所以叫异常，就不能当做正常，避免用来处理正常事情。</p><ul><li>controller层异常用<code>@ControllerAdvice</code>或<code>@ExceptionHandler</code></li><li>service层异常，自行做业务处理，或AOP日志</li><li>静态，src/main/resources/public/error/404.html</li><li>模板，src/main/resources/templates/error/5xx.ftl</li><li><code>class MyErrorPageRegistrar implements ErrorPageRegistrar</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ControllerAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">basePackageClasses</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> AcmeController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AcmeControllerAdvice</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ResponseEntityExceptionHandler</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// ///////</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">public </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ModelAndView</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;"> resolveErrorView(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档位于<a href="https://docs.spring.io/spring-boot/docs/3.0.3/reference/htmlsingle/#web.servlet.spring-mvc.error-handling" target="_blank" rel="noopener noreferrer">Error Handling</a></p><h2 id="_3h-05-启动时warn-ut026010" tabindex="-1"><a class="header-anchor" href="#_3h-05-启动时warn-ut026010"><span>3H.05.启动时Warn UT026010</span></a></h2><p>在未配置websocket时，undertow使用默认buffer，出现以下警告。 需要定制<code>websocketServletWebServerCustomizer</code></p><p>在<code>io.undertow.websockets.jsr.Bootstrap</code> 68行，<code>buffers == null</code> 时 <code>UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used</code> 默认 DefaultByteBufferPool(directBuffers, 1024, 100, 12);</p><h2 id="_3h-06-oauth2的参考资料" tabindex="-1"><a class="header-anchor" href="#_3h-06-oauth2的参考资料"><span>3H.06.OAuth2的参考资料</span></a></h2><ul><li><a href="https://projects.spring.io/spring-security-oauth/docs/oauth2.html" target="_blank" rel="noopener noreferrer">OAuth 2 Developers Guide</a></li><li><a href="https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener noreferrer">OAuth2 boot</a></li><li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/" target="_blank" rel="noopener noreferrer">Spring Security</a></li></ul><h2 id="_3h-07-如何配置security" tabindex="-1"><a class="header-anchor" href="#_3h-07-如何配置security"><span>3H.07.如何配置security</span></a></h2><p>security一定是系统中最为重要的部分，也是所有渗透入侵的重点，所以slardar无默认配置。</p><p>配置中可以使用Order，提供多个HttpSecurity。</p><h2 id="_3h-08-多线程下的securitycontext" tabindex="-1"><a class="header-anchor" href="#_3h-08-多线程下的securitycontext"><span>3H.08.多线程下的SecurityContext</span></a></h2><ul><li>DelegatingSecurityContext</li><li>transmittable-thread-local</li></ul><h2 id="_3h-09-成功登陆后跳转" tabindex="-1"><a class="header-anchor" href="#_3h-09-成功登陆后跳转"><span>3H.09.成功登陆后跳转</span></a></h2><p>SavedRequestAwareAuthenticationSuccessHandler和RequestCache 进行搭配即可。 在前后端分离的情况下，不需要后端控制，所以应该关闭RequestCache。</p><ul><li>HTTP Referrer header - 有些浏览器不给refer</li><li>saving the original request in the session - 要session支持</li><li>base64 original URL to the redirected login URL - 通常的SSO实现</li></ul><p>不过，spring security默认不支持第三种。如果要定制的话，需要看ExceptionTranslationFilter， 在sendStartAuthentication方法中，对requestCache或authenticationEntryPoint上进行定制。 也可以通过interceptor对loginPage进行定制。</p><ul><li><a href="https://www.baeldung.com/spring-security-redirect-login" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/spring-security-redirect-login</a></li><li><a href="https://www.baeldung.com/spring-security-redirect-logged-in" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/spring-security-redirect-logged-in</a></li></ul><h2 id="_3h-10-以kv传递数组及对象" tabindex="-1"><a class="header-anchor" href="#_3h-10-以kv传递数组及对象"><span>3H.10.以KV传递数组及对象</span></a></h2><p>在http协议中，没有明确的规定数组及对象的传递方法，因此实践中，spring及js体系下有不同的默认规则。</p><ul><li><code>a=1&amp;a=2&amp;a=3</code>，servlet支持，spring支持，js的qs需要<code>{ indices: false }</code> (推荐)</li><li><code>a[]=1&amp;a[]=2&amp;a[]=3</code>，spring支持，js的qs需要<code>{ arrayFormat: &#39;brackets&#39; }</code></li><li><code>a[0]=1&amp;a[1]=2&amp;a[2]=3</code>，spring支持，js的qs默认格式</li></ul><p>其中，servlet支持时，@RequestParam也生效；spring支持，指默认的DataBinding</p><p>参考资料</p><ul><li><a href="https://github.com/ljharb/qs#stringifying" target="_blank" rel="noopener noreferrer">qs#stringifying</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beans-conventions" target="_blank" rel="noopener noreferrer">Basic and Nested Properties</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-matrix-variables" target="_blank" rel="noopener noreferrer">Matrix Variables</a></li></ul>`,38),n=[s];function l(o,h){return t(),r("div",null,n)}const d=e(i,[["render",l],["__file","3h-qa-slardar.html.vue"]]),g=JSON.parse(`{"path":"/zh/3-slardar/3h-qa-slardar.html","title":"3H.后端常见话题","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"circle-question","category":["鱼人","话题","后端"],"description":"3H.后端常见话题 3H.01.Error creating 'hazelcastInstance' Error creating bean with name 'hazelcastInstance' Invalid content was found starting with element 'cluster-name'， 若是有以上信息，是haz...","GIT_REPO_HEAD":"2025-01-17 e638e7035dc7958e3f145793e37c871eb02f12d5","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/3-slardar/3h-qa-slardar.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/3-slardar/3h-qa-slardar.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"3H.后端常见话题"}],["meta",{"property":"og:description","content":"3H.后端常见话题 3H.01.Error creating 'hazelcastInstance' Error creating bean with name 'hazelcastInstance' Invalid content was found starting with element 'cluster-name'， 若是有以上信息，是haz..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3H.后端常见话题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"3H.01.Error creating 'hazelcastInstance'","slug":"_3h-01-error-creating-hazelcastinstance","link":"#_3h-01-error-creating-hazelcastinstance","children":[]},{"level":2,"title":"3H.02.修改Servlet容器","slug":"_3h-02-修改servlet容器","link":"#_3h-02-修改servlet容器","children":[]},{"level":2,"title":"3H.03.Session方案的选择","slug":"_3h-03-session方案的选择","link":"#_3h-03-session方案的选择","children":[]},{"level":2,"title":"3H.04.异常处理或handler","slug":"_3h-04-异常处理或handler","link":"#_3h-04-异常处理或handler","children":[]},{"level":2,"title":"3H.05.启动时Warn UT026010","slug":"_3h-05-启动时warn-ut026010","link":"#_3h-05-启动时warn-ut026010","children":[]},{"level":2,"title":"3H.06.OAuth2的参考资料","slug":"_3h-06-oauth2的参考资料","link":"#_3h-06-oauth2的参考资料","children":[]},{"level":2,"title":"3H.07.如何配置security","slug":"_3h-07-如何配置security","link":"#_3h-07-如何配置security","children":[]},{"level":2,"title":"3H.08.多线程下的SecurityContext","slug":"_3h-08-多线程下的securitycontext","link":"#_3h-08-多线程下的securitycontext","children":[]},{"level":2,"title":"3H.09.成功登陆后跳转","slug":"_3h-09-成功登陆后跳转","link":"#_3h-09-成功登陆后跳转","children":[]},{"level":2,"title":"3H.10.以KV传递数组及对象","slug":"_3h-10-以kv传递数组及对象","link":"#_3h-10-以kv传递数组及对象","children":[]}],"git":{"createdTime":1655981049000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":4}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"zh/3-slardar/3h-qa-slardar.md","localizedDate":"2022年6月23日","autoDesc":true}`);export{d as comp,g as data};
