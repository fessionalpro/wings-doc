import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as t,e as n}from"./app-BT4uJ8Vu.js";const o={},r=n('<h1 id="_3e-session-and-authn" tabindex="-1"><a class="header-anchor" href="#_3e-session-and-authn"><span>3E.Session and Authn</span></a></h1><ul><li>Supports header-token, cookie-session</li><li>Low security url-string credential ticket</li><li>User manageable session, control login, kick out</li><li>Configurable cookie-name, token-name</li><li>Fine control of concurrent logins, eg., single login for finance only</li><li>Integrated 3rd login, captcha login, credential login</li><li>Admin sudo, super user identity switching</li><li>Session aliases, additional tokens</li></ul><h2 id="_3e-1-header-and-cookie" tabindex="-1"><a class="header-anchor" href="#_3e-1-header-and-cookie"><span>3E.1.Header and Cookie</span></a></h2><p>The token name is set via server.servlet.session.cookie.name by default. WingsSessionIdResolver supports both header and cookie resolver. The header and cookie have the same name and both are <code>session</code> by default.</p><p>Implementation suggestions.</p><ul><li>It is not recommended to use rememberMe, you can set the timeout of session and maxAge of cookie for a longer time</li><li>If there are no special requirements, it is recommended to use the cookie system, because of its ecological maturity</li></ul><h2 id="_3e-2-customize-cookie" tabindex="-1"><a class="header-anchor" href="#_3e-2-customize-cookie"><span>3E.2.Customize Cookie</span></a></h2><p>Under the cookie system, the following features can be customized by Filter and Wrapper.</p><ul><li>cookie prefix for multiple apps to share session-cookie under the same domain and path.</li><li>cookie alias to obfuscate the cookie name, affected by prefix</li><li>cookie encoding to control readability and security <ul><li>noop - no encryption, plaintext, e.g. random token, no need to cost CPU</li><li>b64 - base64, spring&#39;s default encryption, only to prevent special chars</li><li>aes - aes256, primary encryption for non-sensitive data, basic encryption</li></ul></li><li>customize http-only, secure, domain, path</li></ul><p>One thing to note is that</p><ul><li>http-only will make js unreadable, sometimes you need to let it go (watch out for CSRF attacks)</li><li>session settings, should be set in spring-session-79.properties</li></ul><h2 id="_3e-3-multi-auth-and-login" tabindex="-1"><a class="header-anchor" href="#_3e-3-multi-auth-and-login"><span>3E.3.Multi-Auth and Login</span></a></h2><p>To seamlessly enhance userPassword login of SpringSecurity, inherit or replace the following classes,</p><ul><li>WingsBindLoginConfigurer : FormLoginConfigurer</li><li>WingsBindAuthenticationToken : UsernamePasswordAuthenticationToken</li><li>WingsBindAuthenticationFilter : UsernamePasswordAuthenticationFilter</li><li>WingsBindAuthenticationProvider : DaoAuthenticationProvider</li><li>WingsUserDetail : UserDetails</li><li>WingsUserDetailService : UserDetailsService</li></ul><p>When using, directly replace the formLogin with bindLogin, and when coexisting, the bind must be in front. Sine Token is an extension to ensure that WingsProvider is processed before DaoAuthenticationProvider.</p><p>For example, when implementing SMS authentication or 3rd binding, only WingsUserDetailService needs to be implemented to handle the authentication type.</p><ul><li>SMS auth, UserDetailsService get the cached and passwordEncoder encrypted SMS</li><li>3rd binding, recommended justAuth, set loginProcessingUrl to callback address, <ul><li>Authentication.details in the request constructed by AuthnDetailsSource</li><li>In AuthnProvider first UserDetailsService.load, if NotFound, then try to create users</li><li>Oauth in particular, , relies heavily on AuthnDetailsSource to get details.</li></ul></li></ul><p>When using WingsBindAuthnProvider instead of the default DaoAuthenticationProvider, there are the following options</p><ul><li>Inherit configure(AuthenticationManagerBuilder) and build it manually via wingsHelper</li><li>Without inheritance, declare the WingsBindAuthnProvider bean and auto-config globally (recommended)</li><li>Without AuthenticationProvider, with WingsUserDetailsService, auto-config using Wings way (default)</li></ul><p>If you manually configure userDetailsService and the default configuration, a new provider will be added automatically. If you do not need to add a provider, you can set wingsBindAuthnProvider(false), different from the Spring default.</p><h2 id="_3e-4-underlying-principle" tabindex="-1"><a class="header-anchor" href="#_3e-4-underlying-principle"><span>3E.4.Underlying Principle</span></a></h2><p>With the support of Spring Session, Spring Security can perform the Api pre-auth and token login.</p><ul><li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-preauth" target="_blank" rel="noopener noreferrer">PreAuthenticatedProcessingFilter</a></li><li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-preauth" target="_blank" rel="noopener noreferrer">UsernamePasswordAuthenticationFilter</a></li><li>SwitchUserFilter - linux su like, global sudo</li><li>RunAsManager - Single method temporary sudo</li></ul><p>As a skill enhancement, the following technical points need source code reading or customization.</p><ul><li>SessionRepositoryFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>RememberMeAuthenticationFilter</li><li>SwitchUserFilter</li><li>FilterComparator</li></ul><p>The relationship between Session and SecurityContext calls is as follows,</p><img src="https://www.plantuml.com/plantuml/svg/fPAn2i8m48PtdwAZ3hv01oaKH0T1wk1y94SDf4czkufzUwCjjAKgrIuXN7u-llj9mW8aLM4N9sGstcLOUZRYgTuQAqZHUXEDdZAyLiXo9YXBf3ZIlWdlNJWSsEKgu5H5HkhKXzbTZaXiMD0fx7C7cOuVHzQ3RiTZM1USP9UZj9d_l7RUwYU7KJuglUKqj_G2ndKTpNDG5e5-i_ZICiCD-x1NIGTma6E1JYOnL1Y51NakP-YIeDFXLpu0" alt=""><h2 id="_3e-5-related-knowledge" tabindex="-1"><a class="header-anchor" href="#_3e-5-related-knowledge"><span>3E.5.Related Knowledge</span></a></h2><ul><li>RequestContextHolder - SecurityContextHolder</li><li>CookieSerializer HttpSessionIdResolver</li><li>SessionEventHttpSessionListenerAdapter - HttpSessionEventPublisher</li><li>rememberMe - SpringSessionRememberMeServices</li></ul><p>Wings uses the Hazelcast implementation with its default configuration, the product environment needs to be configured.</p><p>If you use <code>@Enable*HttpSession</code> to indicate manual configuration, then <code>spring.session.*</code> will not be auto configured. <code>springSessionRepositoryFilter</code> will be on top in order to wrap off the original HttpRequest and HttpSession.</p>',31),a=[r];function l(s,d){return t(),i("div",null,a)}const h=e(o,[["render",l],["__file","3e-auth-session.html.vue"]]),p=JSON.parse('{"path":"/3-slardar/3e-auth-session.html","title":"3E.Session and Authn","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"key","category":["Slardar","Authn","Permit"],"description":"3E.Session and Authn Supports header-token, cookie-session Low security url-string credential ticket User manageable session, control login, kick out Configurable cookie-name, t...","GIT_REPO_HEAD":"2025-01-28 900f8d7f901cad2172a025862418812b0d068d29","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/3-slardar/3e-auth-session.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/3-slardar/3e-auth-session.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"3E.Session and Authn"}],["meta",{"property":"og:description","content":"3E.Session and Authn Supports header-token, cookie-session Low security url-string credential ticket User manageable session, control login, kick out Configurable cookie-name, t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3E.Session and Authn\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"3E.1.Header and Cookie","slug":"_3e-1-header-and-cookie","link":"#_3e-1-header-and-cookie","children":[]},{"level":2,"title":"3E.2.Customize Cookie","slug":"_3e-2-customize-cookie","link":"#_3e-2-customize-cookie","children":[]},{"level":2,"title":"3E.3.Multi-Auth and Login","slug":"_3e-3-multi-auth-and-login","link":"#_3e-3-multi-auth-and-login","children":[]},{"level":2,"title":"3E.4.Underlying Principle","slug":"_3e-4-underlying-principle","link":"#_3e-4-underlying-principle","children":[]},{"level":2,"title":"3E.5.Related Knowledge","slug":"_3e-5-related-knowledge","link":"#_3e-5-related-knowledge","children":[]}],"git":{"createdTime":1655981049000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":3}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"3-slardar/3e-auth-session.md","localizedDate":"June 23, 2022","autoDesc":true}');export{h as comp,p as data};
