import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,b as a,e as p,d as l,f as n}from"./app-b67efd75.js";const i={},r=n(`<h1 id="_3f-多级缓存及事件" tabindex="-1"><a class="header-anchor" href="#_3f-多级缓存及事件" aria-hidden="true">#</a> 3F.多级缓存及事件</h1><p>基于Cache2k和Hazelcast，提供了分级缓存，本地及分布式缓存，分布式对象。</p><h2 id="_3f-1-多级缓存" tabindex="-1"><a class="header-anchor" href="#_3f-1-多级缓存" aria-hidden="true">#</a> 3F.1.多级缓存</h2><p>默认提供JCache约定下的Memory和Server两个CacheManager，名字和实现如下，</p><ul><li>MemoryCacheManager - Cache2kCacheManager</li><li>ServerCacheManager - 如hazelcast/redis等具体实现</li></ul><p>因为已注入了CacheManager，会使SpringBoot的自动配置不满足条件而无效。</p><blockquote><p>If you have not defined a bean of type CacheManager or a CacheResolver named cacheResolver (see CachingConfigurer), Spring Boot tries to detect the following providers (in the indicated order):</p></blockquote><p>三种不同缓存级别前缀，分别定义不同的ttl,idle,size</p><ul><li><code>program.</code> - 程序级，程序或服务运行期间</li><li><code>general.</code> - 标准配置，1天</li><li><code>service.</code> - 服务级的，1小时</li><li><code>session.</code> - 会话级的，10分钟</li></ul><p>具有相同前缀的cache，会采用相同的配置项(ttl,idle,size)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheManager <span class="token operator">=</span> <span class="token class-name">Manager<span class="token punctuation">.</span>Memory</span><span class="token punctuation">,</span> 
cacheNames <span class="token operator">=</span> <span class="token class-name">Level<span class="token punctuation">.</span>General</span> <span class="token operator">+</span> <span class="token string">&quot;OperatorService&quot;</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;&#39;all&#39;&quot;</span><span class="token punctuation">,</span> 
cacheNames <span class="token operator">=</span> <span class="token class-name">Level<span class="token punctuation">.</span>General</span> <span class="token operator">+</span> <span class="token string">&quot;StandardRegion&quot;</span><span class="token punctuation">,</span> 
cacheManager <span class="token operator">=</span> <span class="token class-name">Manager<span class="token punctuation">.</span>Server</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;&#39;all&#39;&quot;</span><span class="token punctuation">,</span> 
cacheNames <span class="token operator">=</span> <span class="token class-name">Level<span class="token punctuation">.</span>General</span> <span class="token operator">+</span> <span class="token string">&quot;StandardRegion&quot;</span><span class="token punctuation">,</span> 
cacheManager <span class="token operator">=</span> <span class="token class-name">Manager<span class="token punctuation">.</span>Server</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cacheName的命名要求，不可使用特殊字符，当前以<code>~</code>分隔，以<code>!</code>结尾表示Resolve扩展</p>`,12),u={href:"https://github.com/cache2k/cache2k/issues/201",target:"_blank",rel:"noopener noreferrer"},d=a("li",null,"WingsCache - 具体定义的命名规则",-1),k=n(`<p>Resolve扩展，指在<code>@Cache*</code>注解指定<code>cacheResolver</code>，忽略<code>cacheManager</code>时， 若cacheNames以<code>!</code>结尾，则会在其后追加所在类的全类名，详情参考 CacheConst， 其用途在于代码层面统一缓存名，运行时换成按impl类独立。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token class-name">CacheName</span><span class="token punctuation">,</span> cacheResolver <span class="token operator">=</span> <span class="token class-name">CacheResolver</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarlockPermServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">WarlockPermService</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若上示代码中，CacheName=<code>WarlockPermService!</code>，全类名为<code>a.b.c.WarlockPermServiceImpl</code>， 则最终的缓存名为<code>WarlockPermService!a.b.c.WarlockPermServiceImpl</code></p><h2 id="_3f-2-多级事件" tabindex="-1"><a class="header-anchor" href="#_3f-2-多级事件" aria-hidden="true">#</a> 3F.2.多级事件</h2><p>EventPublishHelper默认提供了3种事件发布机制，可实现，同步/异步/单机/集群的事件</p><ul><li>SyncSpring - 同步，spring原生的jvm内</li><li>AsyncSpring - 异步，spring原生的jvm内，使用slardarEventExecutor线程池</li><li>AsyncGlobal - 异步，基于topic的发布订阅机制</li></ul><p>注意，SpringBoot默认为同步的不处理异常的，以便能够很好的同步处理业务等。 SlardarAsyncConfiguration在启动后，检查这个机制，若被破坏，则以Warn输出到日志。</p><ul><li>ApplicationEventMulticaster - 底层处理机制</li><li>AbstractApplicationContext#initApplicationEventMulticaster() - 默认Bean</li><li>AbstractApplicationContext#publishEvent(Object, ResolvableType) - 入口</li><li>SimpleApplicationEventMulticaster - 默认实现，无TaskExecutor，无ErrorHandler</li></ul><h2 id="_3f-3-数据cud事件" tabindex="-1"><a class="header-anchor" href="#_3f-3-数据cud事件" aria-hidden="true">#</a> 3F.3.数据CUD事件</h2><p>基于jooq的listener，可获得特定表和字段的CUD事件， 默认通过AsyncGlobal发布，可供表和字段有关缓存evict</p><p>通过<code>TableCudListener</code>和<code>wings.faceless.jooq.cud.table</code>设置，以Authn为例， <code>[win_user_authn]</code>=<code>user_id,username,auth_type</code>，当对win_user_authn进行 Insert/Update/Delete时，都会在集群内发布携带设定的字段值TableChangeEvent。</p><p>通过以下代码，即可监听和处理，以下是根据认证表变更，而清空缓存的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ComboWarlockAuthnService.java 72-81</span>
<span class="token annotation punctuation">@EventListener</span>
<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> condition <span class="token operator">=</span> <span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">evictAllAuthnCache</span><span class="token punctuation">(</span><span class="token class-name">TableChangeEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> tb <span class="token operator">=</span> <span class="token class-name">CacheEventHelper</span><span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token class-name">EventTables</span><span class="token punctuation">,</span> <span class="token constant">DELETE</span> <span class="token operator">|</span> <span class="token constant">UPDATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tb <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;evictAllAuthnCache by {}, {}&quot;</span><span class="token punctuation">,</span> tb<span class="token punctuation">,</span> event <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> event<span class="token punctuation">.</span><span class="token function">getChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function v(h,m){const s=t("ExternalLinkIcon");return o(),c("div",null,[r,a("ul",null,[a("li",null,[a("a",u,[p("https://github.com/cache2k/cache2k/issues/201"),l(s)])]),d]),k])}const f=e(i,[["render",v],["__file","3f-cache-event.html.vue"]]);export{f as default};
