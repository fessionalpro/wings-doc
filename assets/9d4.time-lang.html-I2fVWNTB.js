import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,g as n,o}from"./app-q0R425qv.js";const i={};function s(l,e){return o(),a("div",null,e[0]||(e[0]=[n(`<h1 id="_9d4-auto-timezone-and-i18n" tabindex="-1"><a class="header-anchor" href="#_9d4-auto-timezone-and-i18n"><span>9D4.Auto Timezone and I18n</span></a></h1><p>The careful handling of language and timezones is an important feature that distinguishes WingsBoot from other frameworks.</p><ul><li>time - can system-level, thread-level tweak clock</li><li>timezone - by annotation or type , to auto convert Dto/pojo</li><li>language - strong type MessageCode, EnumCode constants with auto conversion</li></ul><h2 id="tweak-clock-and-timeline" tabindex="-1"><a class="header-anchor" href="#tweak-clock-and-timeline"><span>Tweak Clock and Timeline</span></a></h2><p>There are typically two types of clocks within a system, the system clock, which requires a linear timeline, and the business clock, which may require traversal. The system clock may also need to be tuned to a different timeline, especially during test, deduce and replay.</p><ul><li>mirana&#39;s <code>ThreadNow</code> and <code>SlideDate</code> basic version to tweak system clock</li><li>slardar&#39;s <code>Now</code> advanced version to tweak system clock, also the user timeline</li></ul><p>So, when writing a program, if you need to tweak the timeline (all business code is recommended)</p><ul><li><code>Now.xxx()</code> instead of <code>Xxxx.now()</code> if dep on slardar</li><li><code>ThreadNow.xxx()</code> instead, if not dep on slardar, but on mirana dependency</li></ul><p>It is important to note whether the business thread model supports ThreadLocal&#39;s Inheritable.</p><ul><li>ThreadNow use ThreadLocal by default</li><li>Now uses TransmittableThreadLocal by default to override the default value of ThreadNow</li></ul><p>The jmh Benchmark on ThreadNow.xxx() and Xxx.now() is basically the same</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Benchmark     Mode  Cnt      Score     Error   Units</span></span>
<span class="line"><span>NowMain.now  thrpt    6  11942.923 ± 368.430  ops/ms</span></span>
<span class="line"><span>NowMain.sys  thrpt    6  12910.824 ± 226.997  ops/ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i18n-of-time-and-text" tabindex="-1"><a class="header-anchor" href="#i18n-of-time-and-text"><span>I18n of Time and Text</span></a></h2><p>WingsBoot&#39;s automatic conversion relies on two Contexts to get the ZoneId and Locale</p><ul><li>spring&#39;s <code>LocaleContextHolder</code>, used in the web layer</li><li>slardar&#39;s <code>TerminalContext</code>, which is recommended, especially in the Service layer</li></ul><p>Automatic conversion occurs in SpringMvc Request and Response, respectively</p><ul><li>Jackson&#39;s @RequestBody, @ResponseBody</li><li>Spring&#39;s Data Binding, such as @Param</li></ul><p>Manual conversions are handled by <code>AutoDtoHelper</code>, such as Excel output, but avoid automatic conversions.</p><ul><li>Only works for annotation fields by default, while auto-conversion can be handled by type</li><li>Only non-final and transient fields with getters are supported by default</li></ul><p>The types and configuration items involved in auto-conversion are</p><ul><li>LocaleDateTime - wings.slardar.datetime.datetime.auto=false</li><li>ZonedDateTime - wings.slardar.datetime.zoned.auto=false</li><li>OffsetDateTime - wings.slardar.datetime.offset.auto=true</li><li>I18nString - without config, auto convert</li></ul><p>The annotations involved in the automatic and manual conversions are</p><ul><li>AutoDtoAble - marks the container class field (manual conversion only)</li><li>AutoI18nString - marks String or I18nString type</li><li>AutoTimeZone - marks the DateTime of Local/Zoned/Offset</li></ul><h2 id="context-rule-and-pitfall" tabindex="-1"><a class="header-anchor" href="#context-rule-and-pitfall"><span>Context Rule and Pitfall</span></a></h2><p>All Context implicitly passing variables, that have side effects, are considered anti-patterns and should follow the rules and be used with caution. Avoid using Functions with sideEffects in Wings, but Context does provide convenience and works very well.</p><p>ThreadLocal is often used to implement Context, and ThreadLocal must be set and removed correctly. Either in <code>try{set}finally{remove}</code> or some mechanism to ensure there are no misreads or memory leaks.</p><p>Wings uses <a href="https://github.com/alibaba/transmittable-thread-local" target="_blank" rel="noopener noreferrer">Transmittable-ThreadLocal</a> by default, and use TransmittableThreadLocal whenever possible, wrap Spring&#39;s Executor as TtlExecutors to ensure correct Context passing.</p><p>In scenarios with complex thread models, be sure to follow the principles and concerns of Transmittable-ThreadLocal to correctly handle the Context and ensure proper business code.</p><ul><li>TerminalContext - handled by slardar&#39;s TerminalInterceptor</li><li>Now - As business requirement, need to <code>try{adjust()}finally{remove()}</code> by yourself</li></ul>`,29)]))}const c=t(i,[["render",s],["__file","9d4.time-lang.html.vue"]]),m=JSON.parse('{"path":"/9-example/9d.wings-boot/9d4.time-lang.html","title":"9D4.Auto Timezone and I18n","lang":"en-US","frontmatter":{"isOriginal":true,"icon":"clock","category":["Practice","Manual"],"description":"9D4.Auto Timezone and I18n The careful handling of language and timezones is an important feature that distinguishes WingsBoot from other frameworks. time - can system-level, th...","GIT_REPO_HEAD":"2025-04-02 da9b4e04fc94cbc914e3a6d86b8766465737f2f7","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://wings.fessional.pro/zh/9-example/9d.wings-boot/9d4.time-lang.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/9-example/9d.wings-boot/9d4.time-lang.html"}],["meta",{"property":"og:site_name","content":"WingsBoot Win Sprint"}],["meta",{"property":"og:title","content":"9D4.Auto Timezone and I18n"}],["meta",{"property":"og:description","content":"9D4.Auto Timezone and I18n The careful handling of language and timezones is an important feature that distinguishes WingsBoot from other frameworks. time - can system-level, th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T11:57:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T11:57:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9D4.Auto Timezone and I18n\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T11:57:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"git":{"createdTime":1665629662000,"updatedTime":1736423831000,"contributors":[{"name":"trydofor","username":"trydofor","email":"trydofor@gmail.com","commits":6,"url":"https://github.com/trydofor"}]},"readingTime":{"minutes":1.75,"words":525},"filePathRelative":"9-example/9d.wings-boot/9d4.time-lang.md","localizedDate":"October 13, 2022","autoDesc":true}');export{c as comp,m as data};
