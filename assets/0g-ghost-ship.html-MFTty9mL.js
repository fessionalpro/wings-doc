import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o,c,b as a,e,d as n,w as s,f as l}from"./app-mN42Vc4a.js";const t={},p=l('<h1 id="_0g-幽灵船模型" tabindex="-1"><a class="header-anchor" href="#_0g-幽灵船模型"><span>0G.幽灵船模型</span></a></h1><p>WingsBoot体系的基本架构思路是，纵向做模型，横向贴功能。 曾用代号【邮轮模型】，后在Dota系，改为GhostShip，更wings一点。</p><h2 id="_0g-1-上船下海-gosea" tabindex="-1"><a class="header-anchor" href="#_0g-1-上船下海-gosea"><span>0G.1.上船下海 GoSea</span></a></h2><p>俗话说，<code>Go And Sea</code>，<code>Let&#39;s Me See Sea</code></p><p>在我所知的创业实践中，几乎什么都是短缺的，一切都是不确定的。 整个团队都在一条船上，要在海上生存和探寻，防止迷失和沉船。</p><h2 id="_0g-2-纵向模型-floor" tabindex="-1"><a class="header-anchor" href="#_0g-2-纵向模型-floor"><span>0G.2.纵向模型 Floor</span></a></h2><p>业务架构，业务模型，程序架构，数据模型，有严格的边界和依赖要求。 通常，从下至上像楼层一样，分别称之为Floor-N（N为自然数）</p><h3 id="单向调用-避免跨层" tabindex="-1"><a class="header-anchor" href="#单向调用-避免跨层"><span>单向调用，避免跨层</span></a></h3><p>通常，上层可以调用同层及下层，反之不可。如 Dao/Ser/Mvc的结构中，</p>',9),h=l(`<h3 id="单向流动-事件溯源" tabindex="-1"><a class="header-anchor" href="#单向流动-事件溯源"><span>单向流动，事件溯源</span></a></h3><p>数据流，业务流，要求单向流动。乱流时，以明确的Event传播和溯源。 如数据的从下向上构建，业务的从上到下传播。</p><h2 id="_0g-3-横向功能-layer" tabindex="-1"><a class="header-anchor" href="#_0g-3-横向功能-layer"><span>0G.3.横向功能 Layer</span></a></h2><p>功能或模块可以通过组合，继承，叠加或过滤后对外提供合适的服务。 通常，从内到外，分别称为Layer-N（N为自然数）</p><ul><li><code>messages</code>和<code>properties</code> 使用了叠加</li><li><code>Servlet</code>和<code>Filter</code> 使用了组合和过滤</li><li><code>Authn</code>和<code>Authz</code> 使用了组合和继承</li></ul><h3 id="划清边界-减少耦合" tabindex="-1"><a class="header-anchor" href="#划清边界-减少耦合"><span>划清边界，减少耦合</span></a></h3><p>根据领域内的业务要求，划清边界，比如数据模型，功能模块等。</p><h3 id="单一职能-各尽其职" tabindex="-1"><a class="header-anchor" href="#单一职能-各尽其职"><span>单一职能，各尽其职</span></a></h3><p>一次事件发生，只做好一件事，一次数据流动，只做好本次状态。</p><h2 id="_0g-4-基本模型-basic" tabindex="-1"><a class="header-anchor" href="#_0g-4-基本模型-basic"><span>0G.4.基本模型 Basic</span></a></h2><ul><li>展示层 - 展示和解释用户指令，如app, web</li><li>应用层 - 验证及转换数据，如controller, api</li><li>业务层 - 业务概念和逻辑处理，如service, dao</li><li>设施层 - 业务无关的基础服务，如db, cache</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>▲ 
│ Floor of Abstraction
├──────────────┐
│ Presentation │
├──────────────┴──┬────────┐
│ Application     │ LayerA │
├─────────────────┴──┬─────┴───┬────────┐
│ Domain/Biz         │  LayerB │ LayerD │
├────────────────────┴──┬──────┴─┬──────┴─┬────────┐
│ Infrastructure        │ Layer1 │ Layer2 │ Layer3 │
└───────────────────────┴────────┴────────┴────────┴─────▶
                    Layer of Complexity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function v(u,_){const i=d("Badge");return o(),c("div",null,[p,a("ul",null,[a("li",null,[e("Service中可以调用Dao和Service，反之则应避免。"),n(i,{type:"tip",vertical:"top"},{default:s(()=>[e("推荐")]),_:1})]),a("li",null,[e("Controller可以调用Service，反之则禁止。"),n(i,{type:"info",vertical:"top"},{default:s(()=>[e("必须")]),_:1})]),a("li",null,[e("Controller不可调用Dao。"),n(i,{type:"tip",vertical:"top"},{default:s(()=>[e("推荐")]),_:1})])]),h])}const f=r(t,[["render",v],["__file","0g-ghost-ship.html.vue"]]);export{f as default};
