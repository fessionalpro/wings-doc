import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as l,b as s,d as i,f as r,w as p,e,o as h}from"./app-DEdToB0k.js";const o={},d=e('<h1 id="_0j-编码模式" tabindex="-1"><a class="header-anchor" href="#_0j-编码模式"><span>0J.编码模式</span></a></h1><p>收集Wings编码实践中常见的代码模式。</p><h2 id="_0j01-config-script的注释" tabindex="-1"><a class="header-anchor" href="#_0j01-config-script的注释"><span>0J01.Config/Script的注释</span></a></h2><p>在Config (<code>*.properties</code>)和Script(<code>*.sh</code>)中的注释，按用途分为两类，</p><ul><li>功能开关，但保留代码。使用单个注释，如 <code>#</code></li><li>帮助文档，和功能无关。使用双倍注释，如 <code>##</code></li></ul><p>这个规则的好处在于</p><ul><li>明确确认注释的用途</li><li>可以快速切换功能开关，比如使用快捷键或列编辑</li><li>双倍注释，可以避免被错误开启</li></ul><h2 id="_0j02-swagger的api文档" tabindex="-1"><a class="header-anchor" href="#_0j02-swagger的api文档"><span>0J02.Swagger的Api文档</span></a></h2>',8),c=s("code",null,"jsdoc",-1),k=s("code",null,"markdown",-1),g=e(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SuppressWarnings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UastIncorrectHttpHeaderInspection&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Operation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">summary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Verify that the one-time token is valid&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> description</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        # Usage</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        Use Oauth2 state as the token and require the same ip, agent and other header as the original client.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        After successful verification, the session and cookie are in the header as a normal login</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ## Params</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        * @param token - RequestHeader Oauth2 state as token</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ## Returns</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        * @return {401} token is not-found, expired, or failed</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        * @return {200 | Result(false, message=&#39;authing&#39;)} in verifying</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        * @return {200 | Result(true, data=sessionId)} success</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;\${&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> WarlockUrlmapProp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Key$authNonceCheck</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function u(m,y){const a=n("RouteLink");return h(),l("div",null,[d,s("p",null,[i("参考 "),r(a,{to:"/zh/0-wings/0a-code-style.html#0a9api%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%96%87%E6%A1%A3%E7%BA%A6%E5%AE%9A"},{default:p(()=>[i("0A.9.Api测试及文档约定")]),_:1}),i("， 以"),c,i("和"),k,i("格式书写文档。")]),g])}const v=t(o,[["render",u],["__file","0j-code-pattern.html.vue"]]),C=JSON.parse('{"path":"/zh/0-wings/0j-code-pattern.html","title":"0J.编码模式","lang":"zh-CN","frontmatter":{"isOriginal":true,"icon":"brush","category":["神翼","规范"],"description":"0J.编码模式 收集Wings编码实践中常见的代码模式。 0J01.Config/Script的注释 在Config (*.properties)和Script(*.sh)中的注释，按用途分为两类， 功能开关，但保留代码。使用单个注释，如 # 帮助文档，和功能无关。使用双倍注释，如 ## 这个规则的好处在于 明确确认注释的用途 可以快速切换功能开关，比...","GIT_REPO_HEAD":"2025-01-17 e638e7035dc7958e3f145793e37c871eb02f12d5","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://wings.fessional.pro/0-wings/0j-code-pattern.html"}],["meta",{"property":"og:url","content":"https://wings.fessional.pro/zh/0-wings/0j-code-pattern.html"}],["meta",{"property":"og:site_name","content":"WingsBoot 纹丝不忒"}],["meta",{"property":"og:title","content":"0J.编码模式"}],["meta",{"property":"og:description","content":"0J.编码模式 收集Wings编码实践中常见的代码模式。 0J01.Config/Script的注释 在Config (*.properties)和Script(*.sh)中的注释，按用途分为两类， 功能开关，但保留代码。使用单个注释，如 # 帮助文档，和功能无关。使用双倍注释，如 ## 这个规则的好处在于 明确确认注释的用途 可以快速切换功能开关，比..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-12T00:21:52.000Z"}],["meta",{"property":"article:author","content":"trydofor"}],["meta",{"property":"article:modified_time","content":"2024-06-12T00:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"0J.编码模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T00:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"trydofor\\",\\"url\\":\\"https://www.trydofor.com\\"}]}"]]},"headers":[{"level":2,"title":"0J01.Config/Script的注释","slug":"_0j01-config-script的注释","link":"#_0j01-config-script的注释","children":[]},{"level":2,"title":"0J02.Swagger的Api文档","slug":"_0j02-swagger的api文档","link":"#_0j02-swagger的api文档","children":[]}],"git":{"createdTime":1692237469000,"updatedTime":1718151712000,"contributors":[{"name":"trydofor","email":"trydofor@gmail.com","commits":3}]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"zh/0-wings/0j-code-pattern.md","localizedDate":"2023年8月17日","autoDesc":true}');export{v as comp,C as data};
